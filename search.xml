<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01-什么是JVM?</title>
    <url>/2022/07/10/01-%E4%BB%80%E4%B9%88%E6%98%AFJVM/</url>
    <content><![CDATA[<h2 id="什么是JVM？"><a href="#什么是JVM？" class="headerlink" title="什么是JVM？"></a><strong>什么是JVM？</strong></h2><p><strong>①. JVM 是 java虚拟机，是用来执行java字节码(二进制的形式)的虚拟计算机</strong></p>
<p><strong>②. jvm是运行在操作系统之上的，与硬件没有任何关系</strong></p>
<p><img src="/2022/07/10/01-%E4%BB%80%E4%B9%88%E6%98%AFJVM/1.png" alt="1"></p>
<h2 id="Java的跨平台及原理"><a href="#Java的跨平台及原理" class="headerlink" title="Java的跨平台及原理"></a><strong>Java的跨平台及原理</strong></h2><p><strong>①. 跨平台：由Java编写的程序可以在不同的操作系统上运行：一次编写，多处运行</strong></p>
<p><strong>②. 原理：编译之后的字节码文件和平台无关，需要在不同的操作系统上安装一个对应版本的虚拟机(JVM)</strong></p>
<h2 id="JVM的整体的理解"><a href="#JVM的整体的理解" class="headerlink" title="JVM的整体的理解"></a><strong>JVM的整体的理解</strong></h2><p><strong>①. 类加载子系统</strong></p>
<p><strong>②. 运行时数据区(我们核心关注这里 的栈、堆、方法区)</strong></p>
<p><strong>③. 执行引擎(一般都是JIT编译器和解释器共存)</strong></p>
<p><img src="/2022/07/10/01-%E4%BB%80%E4%B9%88%E6%98%AFJVM/2.png" alt="2"></p>
<h2 id="java代码执行流程"><a href="#java代码执行流程" class="headerlink" title="java代码执行流程"></a><strong>java代码执行流程</strong></h2><p>​	<strong>java源码—java编译器—生成字节码—进入java虚拟机（类加载器—字节码校验器—翻译字节码—JIT编译器）</strong></p>
<h2 id="JVM的架构模型"><a href="#JVM的架构模型" class="headerlink" title="JVM的架构模型"></a><strong>JVM的架构模型</strong></h2><p><strong>Java编译器输入的指令流基木上是一种基于栈的指令集架构，另外一种指令集架构则是基于寄存器的指令集架构。</strong></p>
<p><strong>基于栈式架构的特点</strong></p>
<ul>
<li>跨平台性</li>
<li>指令集小</li>
<li>指令多</li>
<li>执行性能比寄存器差</li>
</ul>
<p><strong>基于寄存器架构的特点</strong></p>
<ul>
<li>指令集架构则完全依赖硬件，可移植性差</li>
<li>性能优秀和执行更高效</li>
</ul>
<p><strong>举例</strong></p>
<p><strong>同样执行2+3这种逻辑操作，其指令分别如下：</strong></p>
<p><strong>1、基于栈的计算流程（以Java虚拟机为例)</strong></p>
<p><img src="/2022/07/10/01-%E4%BB%80%E4%B9%88%E6%98%AFJVM/3.png" alt="3"></p>
<p><strong>2、基于寄存器的计算流程</strong></p>
<p><img src="/2022/07/10/01-%E4%BB%80%E4%B9%88%E6%98%AFJVM/4.png" alt="4"></p>
<p><strong>总结</strong></p>
<p>由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</p>
<h2 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a><strong>JVM的生命周期</strong></h2><p><strong>虚拟机的启动</strong></p>
<p><strong>Java虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体实现指定的。</strong></p>
<p><strong>虚拟机的执行</strong></p>
<ul>
<li><strong>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。</strong></li>
<li><strong>程序开始执行时他才运行，程序结束时他就停止。</strong></li>
<li><strong>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程。</strong></li>
</ul>
<p><strong>虚拟机的退出</strong></p>
<ul>
<li><strong>程序正常执行结束</strong></li>
<li><strong>程序在执行过程中遇到了异常或错误而异常终止</strong></li>
<li><strong>由于操作系统用现错误而导致Java虚拟机进程终止</strong></li>
<li><strong>某线程调用Runtime类或system类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。</strong></li>
<li><strong>除此之外，JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或卸载 Java虚拟机时，Java虚拟机的退出情况。</strong></li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>01-设计模式的原则</title>
    <url>/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="设计模式的目的"><a href="#设计模式的目的" class="headerlink" title="设计模式的目的"></a><strong>设计模式的目的</strong></h1><p><strong>1、代码重用性</strong></p>
<p><strong>2、可读性</strong></p>
<p><strong>3、可扩展性（增加功能时，对原来的功能没有影响）</strong></p>
<p><strong>4、可靠性（增加功能时，对原来的功能没有影响）</strong></p>
<p><strong>5、高内聚，低耦合</strong></p>
<h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a><strong>单一职责原则</strong></h2><p><strong>一个类应该只负责一项职责</strong></p>
<p>如：类 A 负责两个不同职责：职责 1，职责 2。</p>
<p>当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类 A 的粒度分解为 A1，A2</p>
<p><strong>注意：</strong></p>
<ul>
<li>降低类的复杂度，一个类负责一个职责</li>
<li>提高类的可读性</li>
<li>降低变更的风险</li>
</ul>
<p>只有类中方法数量足够少时，可以在方法级别保持单一职责原则</p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/1.png" alt="0"></p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/2.png" alt="0"></p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/3.png" alt="0"></p>
<h2 id="接口隔离的原则"><a href="#接口隔离的原则" class="headerlink" title="接口隔离的原则"></a><strong>接口隔离的原则</strong></h2><p><strong>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</strong></p>
<p>类A和类C只需要依赖接口1的一部分接口，而不需要实现全部，所以可以将接口 Interface1 拆分为独立的几个接口(这里我们拆分成 3 个接口)，类 A 和类 C 分别与他们需要的接口建立依赖关系</p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/4.png" alt="0"></p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/5.png" alt="0"></p>
<h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a><strong>依赖倒转原则</strong></h2><p>1）高层模块不应该依赖底层模块，二者都应该依赖其抽象</p>
<p>2）抽象不应该依赖细节，细节应该依赖抽象</p>
<p><strong>3）核心思想：面向接口编程</strong></p>
<p>三种方式：接口传递，构造方法传递，setter方法传递</p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/6.png" alt="0"></p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/7.png" alt="0"></p>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a><strong>里氏替换原则</strong></h2><p><strong>继承给程序设计带来便利也带来了弊端：</strong></p>
<ul>
<li>使用继承会给程序带来侵入性</li>
<li>可移植性降低</li>
<li>增加对象间的耦合</li>
<li>当这个类要修改时，必须考虑到所有的子类</li>
</ul>
<p><strong>正确使用继承：</strong></p>
<ul>
<li>使用继承时，在子类中尽量不要重写父类的方法</li>
<li>在适当的情况，可以使用聚合，组合，依赖来解决</li>
</ul>
<p><strong>解决方法：让原来的子类和父类都继承一个更通俗的基类，将原有的继承关系去掉，采用聚合，组合，依赖等关系来代替</strong></p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/8.png" alt="0"></p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/9.png" alt="0"></p>
<h2 id="开闭原则-（最基础，最重要）"><a href="#开闭原则-（最基础，最重要）" class="headerlink" title="开闭原则 （最基础，最重要）"></a><strong>开闭原则</strong> <strong>（最基础，最重要）</strong></h2><p><strong>比如一个类，模块和函数一个对扩展开发（对提供方），对修改关闭（对使用方）。</strong></p>
<p><strong>当软件需要变化，尽量通过扩展代码，而不是通过修改已有代码的方法实现</strong></p>
<p><strong>案例：</strong></p>
<p>如果需要增加新的功能，绘制别的图形，需要在使用方处修改代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ocp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//使用看看存在的问题</span></span><br><span class="line">      <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方]</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">   <span class="comment">//接收Shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.m_type == <span class="number">1</span>)</span><br><span class="line">         drawRectangle(s);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>)</span><br><span class="line">         drawCircle(s);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">3</span>)</span><br><span class="line">         drawTriangle(s);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//绘制矩形</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//绘制圆形</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//绘制三角形</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawTriangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Shape类，基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="type">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Rectangle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Circle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Triangle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>改进：</strong></p>
<p>创建一个抽象类Shape，提供一个抽象方法drow，然后让子类去继承该抽象方法，重写该抽象方法，当需要增加新的功能的时候，只需要创建一个新的类去继承抽象方法并重写即可，无需对使用方代码进行改动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ocp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//使用看看存在的问题</span></span><br><span class="line">      <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">OtherGraphic</span>());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方]</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">   <span class="comment">//接收Shape对象，调用draw方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">      s.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Shape类，基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="type">int</span> m_type;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Rectangle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Circle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Triangle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增一个图形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OtherGraphic</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   OtherGraphic() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">4</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制其它图形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="迪米特法则-（最少知道原则）"><a href="#迪米特法则-（最少知道原则）" class="headerlink" title="迪米特法则 （最少知道原则）"></a><strong>迪米特法则</strong> <strong>（最少知道原则）</strong></h2><p> <strong>一个对象应该对其他对象保持最少的了解</strong></p>
<p>每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，则这两个对象之间是朋友关系</p>
<p>其中，出现成员变量，方法参数，方法返回值中的类为直接的朋友</p>
<p>迪米特法则只要要求降低类间（对象间）耦合关系，并不是要求完全没有依赖关系</p>
<h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a><strong>合成复用原则</strong></h2><p><strong>尽量使用合成或者聚合的方式，而不是使用继承</strong></p>
<p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起</p>
<p><strong>针对接口编程，而不是针对具体实现编程</strong></p>
<p><strong>松耦合设计</strong></p>
<p>​    <img src="/2022/07/12/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99/10.png" alt="0"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>03-数据区概述与线程</title>
    <url>/2022/07/12/03-%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="数据区"><a href="#数据区" class="headerlink" title="数据区"></a><strong>数据区</strong></h1><p><strong>JVM在执行java程序的过程中会把它管理的内存划分为若干个不同的数据区域（包括5个运行时数据区）</strong></p>
<p><strong>1、方法区	2、虚拟机栈	3、本地方法栈	4、堆	5、程序计数器</strong></p>
<p>​    <img src="/2022/07/12/03-%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%BA%BF%E7%A8%8B/1.jpg" alt="截图1"></p>
<p><strong>运行时数据区的完整图</strong></p>
<p>​    <img src="/2022/07/12/03-%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.jpg" alt="截图2"></p>
<p><strong>Java的内存区域</strong></p>
<p>​    <img src="/2022/07/12/03-%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%BA%BF%E7%A8%8B/3.jpg" alt="截图3"></p>
<p><strong>灰色的为单独线程私有的，红色的为多个线程共享的。</strong></p>
<p><strong>即：</strong></p>
<p><strong>1、每个线程：独立包括程序计数器、虚拟机栈、本地方法栈。</strong></p>
<p><strong>2、线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</strong></p>
<p>​    <img src="/2022/07/12/03-%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%BA%BF%E7%A8%8B/4.jpg" alt="截图4"></p>
<h1 id="线程的简单介绍"><a href="#线程的简单介绍" class="headerlink" title="线程的简单介绍"></a><strong>线程的简单介绍</strong></h1><p><strong>线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行</strong></p>
<p>当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。</p>
<p>操作系统负责所有线程的安排调度到任何一个可用的CPU上。<strong>一旦本地线程初始化成功，它就会调用Java线程中的run()方法。</strong></p>
<p><strong>JVM线程（*）</strong></p>
<p>虚拟机线程：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型包括”stop-the-world”的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销。</p>
<ul>
<li>周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。</li>
<li>GC线程：这种线程对在JVM里不同种类的垃圾收集行为提供了支持。</li>
<li>编译线程：这种线程在运行时会将字节码编译成到本地代码。</li>
<li>信号调度线程：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>02-类加载器和类加载过程</title>
    <url>/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a><strong>类加载过程</strong></h1><p><img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/1.png" alt="截图"></p>
<p><img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/20210311102359950.png" alt="20210311102359950"></p>
<h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a><strong>加载</strong></h2><p>1、通过一个类的全限定名获取定义此类的二进制字节流</p>
<p>2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p>
<p>3、在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</p>
<h2 id="链接：一共分为三个部分，验证、准备和解析"><a href="#链接：一共分为三个部分，验证、准备和解析" class="headerlink" title="链接：一共分为三个部分，验证、准备和解析"></a><strong>链接：一共分为三个部分，验证、准备和解析</strong></h2><h3 id="一、验证"><a href="#一、验证" class="headerlink" title="一、验证"></a><strong>一、验证</strong></h3><p>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身。</p>
<p>验证阶段是十分重要的，直接决定了Java虚拟机是否能承受恶意代码的攻击，验证阶段的工作量在虚拟机的类加载过程中占了相当大的比重。</p>
<p>主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证</p>
<img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%9B%BE%20(1).png" alt="截图 (1)" style="zoom:67%;">

<h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a><strong>二、准备</strong></h3><p>1、为类变量分配内存并且设置该变量的默认初始值，即零值。</p>
<p>2、这里不包括含用final修饰的static,因为final在编译的时候就会分配数值了，准备阶段会显式初始化。</p>
<p>3、这里不会为实例变量分配初始化，类变量会分配在方法区，而实例变量是会随着对象一起分配到java堆中。</p>
<h3 id="三、解析"><a href="#三、解析" class="headerlink" title="三、解析"></a><strong>三、解析</strong></h3><p>1、<strong>将常量池内的符号引用转换为直接引用过程</strong></p>
<p>2、实际上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</p>
<p>3、符号引用就是一组符号来描述所引用的目标。<strong>符号引用的字面形式明确定义在《java虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</strong></p>
<p>4、主要解析动作针对类或接口、字段、类方法、接口方法、方法类型等。</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h2><h3 id="1）初始化阶段就是执行类构造器方法-的过程"><a href="#1）初始化阶段就是执行类构造器方法-的过程" class="headerlink" title="1）初始化阶段就是执行类构造器方法()的过程"></a><strong>1）初始化阶段就是执行类构造器方法()的过程</strong></h3><p><strong>该方法不需要定义，而是javac编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并而来的</strong></p>
<p><strong>构造器方法中的指令按照语句在源文件中出现的顺序来决定</strong></p>
<p><strong>变量已经赋过一次系统要求的初始零值，而在初始化阶段</strong></p>
<p><strong>则会根据程序员通过程序编码制定的主观计划去初始化类变量和其他资源。</strong></p>
<h3 id="2）若该类有父类，JVM会保证子子类的-执行前，父类的-已经执行完毕"><a href="#2）若该类有父类，JVM会保证子子类的-执行前，父类的-已经执行完毕" class="headerlink" title="2）若该类有父类，JVM会保证子子类的()执行前，父类的()已经执行完毕"></a>2）若该类有父类，JVM会保证子子类的()执行前，父类的()已经执行完毕</h3><p>虚拟机必须保证一个类的()方法在多线程下被同步加锁</p>
<img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%9B%BE%20(2).png" alt="截图 (2)" style="zoom:80%;">

<h3 id="3）在类加载的Linking链接的准备阶段，所有类变量以符号引用的方法存储在方法区"><a href="#3）在类加载的Linking链接的准备阶段，所有类变量以符号引用的方法存储在方法区" class="headerlink" title="3）在类加载的Linking链接的准备阶段，所有类变量以符号引用的方法存储在方法区"></a>3）在类加载的Linking链接的准备阶段，所有类变量以符号引用的方法存储在方法区</h3><p>而当静态代码尝试获取类变量时候需要通过直接引用，这就导致了编译的出错</p>
<h3 id="4）Java编译器并不会为所有的类都产生-初始化方法"><a href="#4）Java编译器并不会为所有的类都产生-初始化方法" class="headerlink" title="4）Java编译器并不会为所有的类都产生()初始化方法"></a>4）Java编译器并不会为所有的类都产生()初始化方法</h3><p>一个类中并没有声明任何的类变量,也没有静态代码块时</p>
<p>一个类中声明类变量,但是没有明确使用类变量的初始化语句以及静态代码块来执行初始化操作时</p>
<p>一个类中包含static final修饰的基本数据类型的字段,这些类字段初始化语句采用编译时常量表达式 </p>
<p>(如果这个static final 不是通过方法或者构造器,则在链接阶段)</p>
<p>  <img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/3.png" alt="截图 (3)"></p>
<h3 id="5）赋值的阶段性问题"><a href="#5）赋值的阶段性问题" class="headerlink" title="5）赋值的阶段性问题"></a><strong>5）赋值的阶段性问题</strong></h3><p> <strong>在链接阶段的准备环节赋值的情况:</strong></p>
<p><strong>1、对于基本数据类型的字段来说,如果使用static final修饰,则显式赋值(直接赋值常量,而非调用方法)通常是在链接阶段的准备环节进行</strong></p>
<p><strong>2、对于String来说,如果使用字面量的方式赋值,使用static final修饰的话,则显式赋值通常是在链接阶段的准备环节进行</strong></p>
<p><strong>3、使用static + final修饰,且显示赋值中不涉及到方法或构造器调用的基本数据类型或String类型的显式赋值,是在链接阶段的准备环节进行。</strong></p>
<p><strong>在初始化阶段()中赋值的情况:</strong></p>
<p><strong>排除上述的在准备环节赋值的情况之外的情况</strong></p>
<p><img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/4.png" alt="截图 (4)"></p>
<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a><strong>类加载器</strong></h1> <img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/02-类加载器和类加%E6%88%AA%E5%9B%BE%20(5).png" alt="截图 (5)" style="zoom:80%;">

<h2 id="引导-启动-类加载器"><a href="#引导-启动-类加载器" class="headerlink" title="引导(启动)类加载器"></a><strong>引导(启动)类加载器</strong></h2><p>这个类加载使用C&#x2F;C++语言实现的,嵌套在JVM内部</p>
<p><strong>1、它用来加载Java的核心类库(JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar、resource.jar或sum.boot.class.path路径下的内容)</strong></p>
<p><strong>用于提供JVM自身需要的类(String类就是使用的这个类加载器)</strong></p>
<p>2、由于安全考虑,Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</p>
<p>3、并不继承自java.lang.ClassLoader,没有父加载器</p>
<p><strong>4、加载扩展类和应用程序类加载器,并指定为他们的父类加载器</strong></p>
<p><strong>自定义加载器</strong> <strong>（将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器）</strong></p>
<p>1、Java语言编写</p>
<p><strong>2、派生于ClassLoader类,父类加载器为启动类加载器</strong></p>
<p>3、从java.ext.dirs系统属性所指定的目录中加载类库,或从JDK的安装目录的jre&#x2F;lib&#x2F;ext子目录(扩展目录)下加载类库。</p>
<p>如果用户创建的JAR放在此目录下,也会自动由扩展类加载器加载</p>
<h2 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a><strong>扩展类加载器</strong></h2><p>1、Java语言编写</p>
<p><strong>2、派生于ClassLoader类,父类加载器为启动类加载器</strong></p>
<p>3、从java.ext.dirs系统属性所指定的目录中加载类库,或从JDK的安装目录的jre&#x2F;lib&#x2F;ext子目录(扩展目录)下加载类库</p>
<p>如果用户创建的JAR放在此目录下,也会自动由扩展类加载器加载</p>
<h2 id="应用程序-系统-类加载器-AppClassLoader"><a href="#应用程序-系统-类加载器-AppClassLoader" class="headerlink" title="应用程序(系统)类加载器 AppClassLoader"></a><strong>应用程序(系统)类加载器 AppClassLoader</strong></h2><p>1、java语言编写</p>
<p><strong>2、派生于ClassLoader类,父类加载器为扩展类加载器</strong></p>
<p><strong>3、它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</strong></p>
<p><strong>4、该类加载是程序中默认的类加载器</strong></p>
<p>5、通过ClassLoader的getSystemClassLoader()方法可以获取到该类加载器</p>
<h2 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a><strong>用户自定义类加载器</strong></h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a><strong>目的</strong></h3><p>隔离记载类</p>
<p>修改类的加载方式</p>
<p>扩展加载源</p>
<p>防止源码泄露</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h3><p><strong>1）重写 loadClass() 方法（不推荐,这个方法会保证类的双亲委派机制）</strong></p>
<p><strong>2）重写 findClass() 方法 –&gt;推荐</strong></p>
<p><strong>这两种方法本质上差不多,毕竟loadClass()也会调用findClass(),但是从逻辑上讲我们最好不要直接修改loadClass()的内部逻辑。建议的做法是只在findClass()里重写自定义类的加载方法,根据参数指定类的名字,返回对应的Class对象的引用</strong></p>
<p><strong>获取ClassLoader的方法</strong></p>
<p><img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/6.png" alt="截图 (6)"></p>
<p><img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/7.png" alt="截图 (7)"></p>
<h1 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a><strong>双亲委派机制</strong></h1><p><em>java虚拟机对class文件采用按需加载的方式进行加载，当需要使用该类时才会将它的class文件加载到内存中生成class对象</em></p>
<p><em>在加载这个类的时候，采用的就是双亲委派模式。</em></p>
<p><strong>1、如果</strong> <strong>一个类加载收到了类加载请求,它并不会自己先去加载</strong> <strong>,而是把这个请求</strong> <strong>委托给父类加载器去执行</strong></p>
<p><strong>2、如果</strong> <strong>父类加载器还存在其父类加载器</strong> <strong>,则进一步</strong> <strong>向上委托</strong> <strong>,依次递归,请求最终将</strong> <strong>到达顶层的启动类加载器</strong></p>
<p><strong>3、如果父类的加载器可以完成类的加载任务,就成功返回,倘若</strong> <strong>父类加载器无法完成此加载任务,子加载器才会尝试自己去加载,</strong> <strong>这就是双亲委派模式</strong></p>
<p>​    <img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/20210509161013261.png" alt="20210509161013261"></p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a><strong>源码分析</strong></h2><p><strong>（双亲委派机制在 java.lang.ClassLoader.loadClass(String,boolean) 中体现）</strong></p>
<p><em>1、先在<strong>当前加载器的缓存</strong>中*<em>查找有无目标类</em></em>,如果有,直接返回。*</p>
<p><em>2、判断当前加载器的父加载器是否为空</em> <em>,如果不为空,则调用 parent.loadClass(name, false) 接口进行加载</em></p>
<p><em>3、反之,如果当前加载器的父类加载器为空,则调用 findBootstrapClassOrNull(name) 接口,让引导类加载器进行加载</em></p>
<p><em>4、如果通过以上3条路径都没能成功加载,则调用 findClass(name) 接口进行加载。该接口最终会调用 java.lang.ClassLoader 接口的 defineClass 系列的native接口加载目标Java类。</em></p>
<p><strong>双亲委派的模型就隐藏在这第2和第3步中</strong></p>
<h2 id="双亲委派机制的优势"><a href="#双亲委派机制的优势" class="headerlink" title="双亲委派机制的优势"></a><strong>双亲委派机制的优势</strong></h2><p><strong>1、避免类的重复加载，确保一个类的全局唯一性（当父ClassLoader已经加载了该类的时候,就没有必要子ClassLoader再加载一次）</strong></p>
<p><strong>2、保护程序的安全，防止API随意被篡改</strong></p>
<h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a><strong>沙箱安全机制</strong></h2><p><strong>Java代码限定在</strong><a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&spm=1001.2101.3001.7020"><strong>虚拟机</strong></a><strong>JVM特定的运行范围中，并且严格限制代码对本地资源的访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏</strong></p>
<p>​    <img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%9B%BE%20(8).png" alt="截图 (8)" style="zoom:80%;"></p>
<h1 id="类的使用方式"><a href="#类的使用方式" class="headerlink" title="类的使用方式"></a><strong>类的使用方式</strong></h1><p><strong>java虚拟机在每个类或接口被java程序“首次主动使用”时才初始化它们。被动使用不会初始化类，但又可能会加载类</strong></p>
<p><strong>在加载的过程中，遇到.class文件的缺失或者存在错误，类加载器只会在首次主动使用它们时才会报错，如果一直没使用，则不会报错</strong></p>
<h2 id="主动使用"><a href="#主动使用" class="headerlink" title="主动使用"></a><strong>主动使用</strong></h2><p><strong>1、创建类的实例</strong>	</p>
<p><strong>2、访问某个类或接口的静态变量，或者对该静态变量赋值</strong>	</p>
<p><strong>3、调用类的静态方法</strong></p>
<p><strong>4、反射</strong></p>
<p><strong>5、初始化一个类的子类</strong></p>
<p><strong>6、java虚拟机启动时被标明为启动类的类</strong></p>
<p><strong>注意：</strong> <strong>初始化一个类的子类这条规则，不适用于接口，即：初始化一个类的子类，会先初始化它的父类，但是不一定会初始化它的接口。只有当首次使用该接口的静态变量时，才会初始化。</strong></p>
<h2 id="被动使用"><a href="#被动使用" class="headerlink" title="被动使用"></a><strong>被动使用</strong></h2><p><strong>除了主动使用的其他使用方式，例如：</strong></p>
<p><strong>1）通过子类引用父类的静态字段，为子类的被动使用，不会导致子类初始化</strong></p>
<p><strong>2）通过数组定义类引用类，为类的被动使用，不会触发此类的初始化</strong></p>
<p>​    <img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/9.png" alt="截图 (9)"></p>
<p><strong>3）常量在编译阶段会存入调用方法所在的类的常量池中（这个例子存在F类的常量池中）</strong></p>
<p><strong>本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化</strong></p>
<p>  <img src="/2022/07/11/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/10.png" alt="截图 (10)"></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>04-程序计数器</title>
    <url>/2022/07/12/04-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="程序计数器（PC寄存器）"><a href="#程序计数器（PC寄存器）" class="headerlink" title="程序计数器（PC寄存器）"></a><strong>程序计数器</strong>（PC寄存器）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>既不存在GC也不存在OOM</strong></p>
<p><strong>PC寄存器用来存储指向下一条指令的地址，也是即将要执行的指令代码</strong>。由执行引擎读取下一条指令</p>
<p>它是一块<strong>很小的内存空间</strong>，几乎可以忽略不记。也是<strong>运行速度最快的存储区域</strong>。</p>
<p>在JVM规范中，每个线程都有它自己的程序计数器，是<strong>线程私有的</strong>，生命周期与线程的生命周期保持一致。</p>
<p>  <img src="/2022/07/12/04-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/1.jpg" alt="截图1"></p>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a><strong>代码演示</strong></h2><p>   <img src="/2022/07/12/04-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/2.jpg" alt="截图2"></p>
<p>   <img src="/2022/07/12/04-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/3.jpg" alt="截图3"></p>
<p><strong>通过PC寄存器，我们就可以知道当前程序执行到哪一步了</strong></p>
<p>​    <img src="/2022/07/12/04-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/4.jpg" alt="截图4"></p>
<h2 id="使用PC寄存器存储字节码地址有什么用？（为什么要使用PC寄存器记录当前线程的执行地址呢？）"><a href="#使用PC寄存器存储字节码地址有什么用？（为什么要使用PC寄存器记录当前线程的执行地址呢？）" class="headerlink" title="使用PC寄存器存储字节码地址有什么用？（为什么要使用PC寄存器记录当前线程的执行地址呢？）"></a><strong>使用PC寄存器存储字节码地址有什么用？（为什么要使用PC寄存器记录当前线程的执行地址呢？</strong>）</h2><p><strong>1、CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。</strong></p>
<p><strong>2、JVM的字节码解释器需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</strong></p>
<h2 id="PC寄存器为什么被设定为线程私有的？"><a href="#PC寄存器为什么被设定为线程私有的？" class="headerlink" title="PC寄存器为什么被设定为线程私有的？"></a><strong>PC寄存器为什么被设定为线程私有的？</strong></h2><p><strong>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</strong></p>
<p><strong>这样必然导致经常中断或恢复，为了保证分毫无差。每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</strong></p>
<p> <img src="/2022/07/12/04-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/5.jpg" alt="截图5"></p>
<p><strong>比如一个cpu负责3个线程，cpu会在3个线程间轮流执行，为了能够保证CPU在切换的过程中，每个线程都可以按照切换之前的指令继续执行，而不影响其他线程，所以PC寄存器设定为线程私有的</strong></p>
<h2 id="CPU时间片（-）"><a href="#CPU时间片（-）" class="headerlink" title="CPU时间片（*）"></a><strong>CPU时间片（*）</strong></h2><p>   <img src="/2022/07/12/04-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/6.jpg" alt="截图6"></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>05-虚拟机栈及相关问题</title>
    <url>/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="虚拟机栈-（线程私有）"><a href="#虚拟机栈-（线程私有）" class="headerlink" title="虚拟机栈 （线程私有）"></a><strong>虚拟机栈</strong> <strong>（线程私有）</strong></h1><p> <img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/1.jpg" alt="0"></p>
<p><strong>不存在GC，存在OOM</strong></p>
<p>每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个栈帧，对应着一次次的方法调用</p>
<p>虚拟机栈的生命周期和线程一致。作用是主管java程序的运行，保存方法的局部变量（8种基本数据类型，对象的引用地址，对象实际存储在堆空间中），部分结果，并参与方法的调用和返回</p>
<p>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器</p>
<h2 id="JVM直接对栈的操作："><a href="#JVM直接对栈的操作：" class="headerlink" title="JVM直接对栈的操作："></a>JVM直接对栈的操作：</h2><p><strong>1、每个方法执行，伴随着进栈（入栈，压栈）</strong></p>
<p>2、执行结束后的出栈操作</p>
<h2 id="设置栈内存的大小"><a href="#设置栈内存的大小" class="headerlink" title="设置栈内存的大小"></a><strong>设置栈内存的大小</strong></h2><p>使用参数-Xss选项设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度</p>
<h2 id="栈的存储单位"><a href="#栈的存储单位" class="headerlink" title="栈的存储单位"></a><strong>栈的存储单位</strong></h2><p><strong>1）栈中的数据都是以栈帧为基本单位存在</strong></p>
<p><strong>2）在这个线程上正在执行的每个方法都各自对应着一个栈帧</strong></p>
<p><strong>3）栈帧是一个内存区块，是一个数据集，****维系着方法执行过程中的各种数据信息</strong></p>
<p><strong>4）在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈帧，与当前栈帧相对应的方法就是当前方法，定义这个方法的类就是当前类。</strong></p>
<p><strong>5）执行引擎运行的所有字节码指令只针对当前栈帧进行操作。</strong></p>
<p><strong>6）如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。</strong></p>
<p>​    <img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/2.jpg" alt="0"></p>
<h2 id="栈帧的内部结构"><a href="#栈帧的内部结构" class="headerlink" title="栈帧的内部结构"></a><strong>栈帧的内部结构</strong></h2><p><strong>每个栈帧都存储着：</strong></p>
<ol>
<li><strong>局部变量表</strong></li>
<li><strong>操作数栈（表达式栈）</strong></li>
<li>动态链接（或指向运行时常量池的方法引用）</li>
<li>方法返回地址（或方法正常退出或异常退出的定义）</li>
<li>一些附加信息</li>
</ol>
<p>方法嵌套调用的次数由栈的大小决定，栈越大，方法嵌套调用的次数就越多。</p>
<p>对于一个函数，参数和局部变量越多，局部变量表就会膨胀，栈帧就越大</p>
<h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a><strong>局部变量表</strong></h3><p>1、存放编译器的各种基本数据类型（8种）引用类型（reference）returnAddress类型的变量</p>
<p>2、定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</p>
<p>3、由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题</p>
<p>4、局部变量表所需的容量大小是在编译器就确定下来的（一旦确定就不会更改）</p>
<p><strong>注意：局部变量表中的变量只在当前方法调用中有效，当方法调用结束后，随着方法栈帧的销毁，局部变量表也会销毁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 字节码中方法内部结构的剖析</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> hzy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/7/11 14:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//使用javap -v 类.class 或者使用jclasslib</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalVariableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LocalVariableTest test=<span class="keyword">new</span> <span class="title class_">LocalVariableTest</span>();</span><br><span class="line">        <span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line">        test.test1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        String name=<span class="string">&quot;xiaozhi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/3.jpg" alt="0"></p>
<p>​    <img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/4.jpg" alt="0"></p>
<p>​    <img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/5.jpg" alt="0"></p>
<p><strong>比如此处，num对应的起始pc是8，对应代码的实际行数第14行，字节码指令长度是17</strong></p>
<p><strong>所以起始pc加上长度就是字节码的指令长度</strong></p>
<h4 id="textcolor-red-局部变量表的基本存储单元是Slot-变量槽"><a href="#textcolor-red-局部变量表的基本存储单元是Slot-变量槽" class="headerlink" title="textcolor{red}{局部变量表的基本存储单元是Slot(变量槽)"></a>textcolor{red}{局部变量表的基本存储单元是Slot(变量槽)</h4><ul>
<li>32位以内的类型只占用一个Slot（包括returnAddress类型）</li>
<li>64位的类型占用两个Slot（long和double）</li>
<li>byte，short，char在存储前转化为int</li>
<li>boolean也被转换为int，0表示false，1表示true</li>
<li>JVM会为局部变量中的每一个Slot都分配一个访问索引，通过这个索引可以访问局部变量中指定的值</li>
</ul>
<p>​    <img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/6.jpg" alt="0"></p>
<p><strong>如果需要访问一个64bit的局部变量值时，只需要使用前一个索引即可</strong></p>
<p><strong>如果当前帧是由构造方法或者实例的方法进行创建的，那么该对象引用this将会存放在index为0的Slot处，其余的继续排列</strong></p>
<h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>​    <img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/7.jpg" alt="0"></p>
<p>*<em>this代表对象实例，而static是随类的加载而加载，先于实例之前就有的，所以不存在于局部变量表中，所以不能使用。</em></p>
<p><strong>变量的分类	一、按照数据类型分：1、基本数据类型		2、引用数据类型</strong></p>
<p><strong>二、按照在类中声明的位置分：	1、成员变量：在使用前都经过默认初始化赋值</strong></p>
<p>​    	  		<strong>类变量：linking的prepare阶段，给类变量默认赋值  —&gt;  initial阶段，给类变量显式赋值即静态代码块赋值</strong></p>
<pre><code>           **实例变量：随着对象的创建，会在堆空间中分配实例变量空间，并进行默认赋值**
   
       **2、局部变量：使用前必须进行显示赋值，否则编译不通过**
</code></pre>
<p><strong>局部变量表中的变量是重要的垃圾回收根节点，只要被局部变量表中的直接或间接引用的对象都不会被回收</strong></p>
<h3 id="操作数（表达式）栈"><a href="#操作数（表达式）栈" class="headerlink" title="操作数（表达式）栈"></a><strong>操作数（表达式）栈</strong></h3><ol>
<li>每一个独立的栈帧中除了包含局部变量表以外，还包含了一个后进先出的操作数栈，也可以称之为表达式栈</li>
<li>在方法执行的过程中，根据字节码指令，往栈中写入数据（入栈）或提取数据（出栈）</li>
<li>主要用于保存计算过程的中间结果，同时作为计算机过程中变量临时的存储空间</li>
<li>当一个方法开始执行的时候，一个新的栈帧也会被创建出来，这个方法的操作数栈是空的</li>
<li>每一个操作数栈都会拥有一个栈深度用于存储数值（max_stack）32bit类型占用一个栈单位深度，64bit类型占用两个栈单位深度</li>
<li>操作数栈不是通过访问索引的方式来进行数据访问的，而只能通过标准的入栈出栈来进行数据访问</li>
</ol>
<h4 id="代码追踪"><a href="#代码追踪" class="headerlink" title="代码追踪"></a><strong>代码追踪</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddOperation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i + j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/8.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/9.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/10.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/11.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/12.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/13.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/14.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/15.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/16.jpg" alt="0"></p>
<h4 id="操作数栈的最大深度"><a href="#操作数栈的最大深度" class="headerlink" title="操作数栈的最大深度"></a><strong>操作数栈的最大深度</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperandStackTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddOperation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//byte、short、char、boolean:都以int型保存</span></span><br><span class="line">        <span class="type">byte</span> i=<span class="number">15</span>;</span><br><span class="line">        <span class="type">short</span> j=<span class="number">8</span>;</span><br><span class="line">        <span class="type">int</span> k=i+j;</span><br><span class="line">        <span class="type">long</span> m=<span class="number">12L</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">800</span>;</span><br><span class="line">        <span class="comment">//存在宽化类型转换</span></span><br><span class="line">        m=m*n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/17.jpg" alt="0"></p>
<h4 id="栈顶缓存技术"><a href="#栈顶缓存技术" class="headerlink" title="栈顶缓存技术"></a><strong>栈顶缓存技术</strong></h4><p>为了解决指令过多导致频繁地执行内存读&#x2F;写操作，影响执行速度的问题</p>
<p>将栈顶元素全部缓存在物理CPU的寄存器中,以此降低对内存的读&#x2F;写次数</p>
<p><strong>(将计算的操作放到CPU寄存器里面去)</strong></p>
<h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a><strong>动态链接</strong></h3><p>栈帧内部包含了一个指向运行时常量池中该栈帧所属方法的引用—动态链接</p>
<p>每一个栈帧内部都包含一个指向运行时常量池Constant pool或该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接。比如invokedynamic指令</p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/18.jpg" alt="0"></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/19.jpg" alt="0"></p>
<p>动态链接的作用就是为了将这些符号引用(#)最终转换为调用方法的直接引用</p>
<h4 id="方法的调用："><a href="#方法的调用：" class="headerlink" title="方法的调用："></a><strong>方法的调用：</strong></h4><ul>
<li>静态链接：在字节码文件装载进JVM内部时，被调用的方法在编译期可知，而且在运行的期间保持不变，这时候符号引用就会转换为直接引用。这个过程即为静态链接</li>
<li>动态链接：被调用的方法在编译期不可确定，在程序运行的期间才将符号引用进行转换，这个过程为动态链接</li>
<li>绑定：一个字段，方法，类在符号引用转换为直接引用的过程</li>
<li>早期绑定：被调用的目标方法在编译期内可知，运行期间不变</li>
<li>晚期绑定：调用方法在编译期无法确定，到运行期才确定</li>
<li>非虚方法：在编译器确定调用的版本，这个版本运行时不变，比如：静态方法，私有方法，final方法，实例构造器，父类方法</li>
<li>虚方法：其他</li>
</ul>
<h4 id="虚方法表"><a href="#虚方法表" class="headerlink" title="虚方法表"></a><strong>虚方法表</strong></h4><p><strong>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</strong></p>
<p><strong>如果类中重写了方法，那么调用的时候，就会直接在虚方法表中查找，否则将会直接连接到Object的方法中</strong></p>
<p><strong>虚方法表会在类加载的链接阶段被创建并开始初始化</strong> <strong>，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕。</strong></p>
<p><img src="/2022/07/12/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/20.jpg" alt="0"></p>
<h3 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a><strong>方法返回地址</strong></h3><p><em><strong>存储调用该方法的PC寄存器的值</strong></em></p>
<p><em><strong>在方法推出后都会返回到该方法被调用的位置。</strong></em></p>
<p><em><strong>方法正常退出时，调用者的PC计数器的值作为返回地址（调用该方法的指令的下一条指令的地址）</strong></em></p>
<p><em><strong>方法异常退出时，返回地址通过异常表来确定</strong></em></p>
<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a><strong>相关问题</strong></h2><p><strong>1、举例栈溢出的情况：通过-Xss设置栈的大小（OOM）</strong></p>
<p><strong>2、调整栈大小，就能保证不出现溢出吗？不能</strong></p>
<p><strong>3、分配的栈内存越大越好吗？不是，栈空间大了线程数就少了，栈空间和线程数目成反比</strong></p>
<p><strong>4、垃圾回收是否会涉及到虚拟机栈？不会</strong></p>
<p><strong>5、方法中定义的局部变量是否线程安全？看情况</strong></p>
<p><strong>6、代码演示：（内部产生，在内部消亡，线程安全）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//s1的声明方式是线程安全的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//StringBuilder线程不安全</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//s2的操作过程是线程不安全的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(StringBuilder s2)</span>&#123;</span><br><span class="line">    s2.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//s3的操作是线程不安全的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    s3.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> s3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//s4的操作是线程安全的,s4其实在内部消亡了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    s4.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> s4.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; &#123;</span><br><span class="line">        s.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">    method2(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>06-本地方法栈和本地方法</title>
    <url>/2022/07/12/06-%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="本地方法"><a href="#本地方法" class="headerlink" title="本地方法"></a><strong>本地方法</strong></h1><p><strong>实际上是一个java调用非java代码的一个接口</strong> <strong>（</strong> <strong>使用native关键字进行修饰</strong> ）</p>
<p>本地方法的作用：</p>
<p>1、Java应用与Java外面的环境交互</p>
<p>2、与操作系统进行交互</p>
<p>3、Sun公司解释器由C实现</p>
<h1 id="本地方法栈-（线程私有）"><a href="#本地方法栈-（线程私有）" class="headerlink" title="本地方法栈 （线程私有）"></a><strong>本地方法栈</strong> <strong>（线程私有）</strong></h1><p>Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用</p>
<p>本地方法栈中登记本地方法，然后执行引擎执行时，加载本地方法库</p>
<p>当某一个线程调用本地方法时</p>
<p>本地方法可通过本地方法接口来访问虚拟机内部的运行时数据区</p>
<p>可以使用本地处理器中的寄存器</p>
<p>……（和虚拟机拥有一样的权限）</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>07-堆</title>
    <url>/2022/07/13/07-%E5%A0%86/</url>
    <content><![CDATA[<h1 id="堆的核心概述"><a href="#堆的核心概述" class="headerlink" title="堆的核心概述"></a><strong>堆的核心概述</strong></h1><p>一个进程对应一个JVM实例，一个JVM实例中有一个运行时数据区，一个运行时数据区中只有一个堆空间</p>
<p><strong>进程中的多个线程各自拥有一套程序计数器，本地方法栈，虚拟机栈，但是多个线程共享同一个堆空间</strong></p>
<ul>
<li>一个JVM实例只存在一个堆内存，堆是Java内存管理的核心区域</li>
<li>堆区在JVM启动的时候就被创建，其空间大小也确定了<em><strong>（JVM管理的最大一块内存区域，大小可调节）</strong></em></li>
<li>堆可以处于物理上不连续的内存空间，但在逻辑上它应该被视为连续的</li>
<li><strong>多个线程共享一个堆区，容易造成并发性能差的问题，所以堆划分出线程私有的缓冲区，每个线程占一份</strong></li>
<li>几乎所有的对象实例都在这里分配内存</li>
<li>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，指向对象或数组在堆中的位置</li>
<li>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾回收的时候会被移除<em><strong>（只是移除了方法区指向堆空间的索引，如果方法结束就移除堆中的对象的话，当方法多次调用时，会因为多次 GC而影响系统性能）</strong></em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleHeap</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleHeap</span><span class="params">(<span class="type">int</span> id)</span> &#123;<span class="built_in">this</span>.id = id;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;My ID is &quot;</span> + id); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SimpleHeap</span> <span class="variable">sl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleHeap</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">SimpleHeap</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleHeap</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/07/13/07-%E5%A0%86/1.png" alt="1" style="zoom: 70%;">



<h1 id="堆内存结构概述和OOM"><a href="#堆内存结构概述和OOM" class="headerlink" title="堆内存结构概述和OOM"></a><strong>堆内存结构概述和OOM</strong></h1><h2 id="堆空间细分为"><a href="#堆空间细分为" class="headerlink" title="堆空间细分为"></a>堆空间细分为</h2><ul>
<li><p>JDK 7及之前堆内存逻辑上分为三部分：<strong>新生区+养老区+永久区</strong></p>
</li>
<li><p>JDK 8及之后堆内存逻辑上分为三部分：<strong>新生区+养老区+元空间</strong></p>
</li>
</ul>
<p>新生区&lt;&#x3D;&gt;新生代&lt;&#x3D;&gt;年轻代</p>
<p>养老区&lt;&#x3D;&gt;老年区&lt;&#x3D;&gt;老年代</p>
<p>永久代&lt;&#x3D;&gt;永久区</p>
<h2 id="堆空间大小的设置-Xms-Xmx"><a href="#堆空间大小的设置-Xms-Xmx" class="headerlink" title="堆空间大小的设置 -Xms -Xmx"></a>堆空间大小的设置 -Xms -Xmx</h2><p><code>-Xms</code>（默认：物理内存的1&#x2F;64）：表示<strong>堆空间（新生代＋老年代）的起始内存</strong></p>
<p><code>-Xmx</code>（默认：物理内存的1&#x2F;4）：则用于表示<strong>堆空间的最大内存</strong></p>
<p><strong>通常会将-Xms和-Xmx两个参数配置相同的值，目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提升性能</strong></p>
<h2 id="新生代与老年代"><a href="#新生代与老年代" class="headerlink" title="新生代与老年代"></a><strong>新生代与老年代</strong></h2><p>堆区可细分为新生代和老年代，新生代又可划分为Eden空间，Survivor1空间和Survivor2空间（from区，to区）</p>
<img src="/2022/07/13/07-%E5%A0%86/2.png" alt="1" style="zoom: 70%;">

<ul>
<li>配置新生代和老年代在堆结构中的占比<strong>（一般不进行调整）</strong></li>
</ul>
<p>默认情况下 <code>-XX:NewRatio=2</code>，表示新生代占1，老年代占2，即新生代占整个堆的1&#x2F;3</p>
<ul>
<li>配置年轻代中的Eden和Survivor区的比例</li>
</ul>
<p> <code>-XX:SurvivorRatio=8</code>，表示调整这个空间比例<strong>（Eden空间和另外两个Survivor空间缺省所占的比例是8:1:1）</strong></p>
<ul>
<li>配置新生代的空间的大小：<code>-Xmn</code>，一般不设置</li>
</ul>
<p><strong>几乎所有的Java对象都是在Eden区被new出来的，大部分的Java对象的销毁都在新生代进行的</strong></p>
<h1 id="对象分配"><a href="#对象分配" class="headerlink" title="对象分配"></a><strong>对象分配</strong></h1><h2 id="一般过程"><a href="#一般过程" class="headerlink" title="一般过程"></a>一般过程</h2><img src="/2022/07/13/07-%E5%A0%86/3.png" alt="1" style="zoom: 70%;">

<p><strong>首先对象先存储到Eden区</strong>，当Eden区存满的时候，<strong>会触发Young GC（Minor GC）</strong>，此时会把用户工作进程停止，称为STW（stop the world），然后判断Eden区里面哪些对象需要回收。（如图所示，红色为回收的对象）</p>
<p>然后将不需要回收的对象放到from区，并加上年龄计数器1</p>
<img src="/2022/07/13/07-%E5%A0%86/4.png" alt="1" style="zoom: 70%;">

<p><em><strong>当from区存满的时候，如果对象还不需要回收，那么就会转入到to区，然后在年龄计数器上加上1，此时Eden里面不需要回收的对象也会存储在to区</strong></em></p>
<p><em><strong>此时，form区为空，from和 to区就互相转换</strong></em></p>
<img src="/2022/07/13/07-%E5%A0%86/5.png" alt="1" style="zoom: 70%;">

<p>当年龄计数器上的值为阈值时（默认为15）对象就会转存到老年区</p>
<p>采用<code>-XX:MaxTenuringThreshold</code>，参数可以设置对象在经过多少次GC后会被放入老年代</p>
<p><em><strong>实际上时对 Eden区到 Survivor区过度的一种策略，是为了保证 Eden区到 Survivor区不会频繁的进行复制一直存活的对象且对Survivor区也能保证不会具有太多的一直占据的内存</strong></em></p>
<p><em><strong>关于垃圾回收，频繁在新生区进行收集，很少在养老区收集，几乎不在永久区 &#x2F; 元空间收集</strong></em></p>
<h2 id="特殊过程"><a href="#特殊过程" class="headerlink" title="特殊过程"></a>特殊过程</h2><p><strong>当存在一个超大对象，导致Eden区放不下的时候，该对象则会直接放到老年区</strong></p>
<p>如果老年区放不下：</p>
<ol>
<li><strong>如果老年区本来的空间够放得下该对象，但是一部分被占用了。则进行Full GC，之后如果空间还是放不下，则直接OOM</strong></li>
<li><strong>如果老年区本来的空间就放不下该对象，直接返回OOM</strong></li>
</ol>
<img src="/2022/07/13/07-%E5%A0%86/6.png" alt="1" style="zoom: 110%;">



<h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h1><p><strong>关于HotSpot VM的实现，GC按照回收区域可以分为部分收集和整堆收集</strong></p>
<p>一、部分收集（Partial GC）：不是完整收集整个Java堆的垃圾收集，其中分为</p>
<ul>
<li>新生代收集（Minor GC &#x2F; Young GC）：只是新生代（Eden&#x2F;S0&#x2F;S1）的垃圾收集</li>
<li>老年代收集（Major GC &#x2F; Old GC）：只是老年代的垃圾收集</li>
<li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集</li>
</ul>
<p>二、整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集</p>
<p><em><strong>注意：</strong></em></p>
<p><em><strong>1、目前只有CMS GC会有单独收集老年代的行为</strong></em></p>
<p><em><strong>2、很多时候Major GC会和Full GC一起混合使用，需要具体分辨是老年代回收还是整堆回收</strong></em></p>
<h2 id="新生代GC（Minor-GC）触发机制"><a href="#新生代GC（Minor-GC）触发机制" class="headerlink" title="新生代GC（Minor GC）触发机制"></a>新生代GC（Minor GC）触发机制</h2><p><strong>当新生代空间不足时，就会触发，这里的新生代空间不足指的是Eden区已满</strong></p>
<p><em><strong>注意：</strong></em></p>
<ul>
<li><strong>Survivor满不会引发GC</strong>（每次Minor GC都会清理新生代的内存）</li>
<li>Minor GC非常频繁，回收速度较快</li>
<li>会引发STW</li>
</ul>
<h2 id="老年代GC（Major-GC-x2F-Full-GC）触发机制"><a href="#老年代GC（Major-GC-x2F-Full-GC）触发机制" class="headerlink" title="老年代GC（Major GC &#x2F; Full GC）触发机制"></a>老年代GC（Major GC &#x2F; Full GC）触发机制</h2><p><strong>当发生在老年代的GC，对象从老年代消失时，我们说老年代GC触发了</strong></p>
<p><em><strong>注意：</strong></em></p>
<ul>
<li><em><strong>当老年代空间不足时，会尝试先触发Minor GC。如果之后空间还不足，则触发Major GC</strong></em></li>
<li>Major GC的速度比Minor GC满10倍以上，STW时间更长</li>
<li>Major GC后，如果内存还是不足，直接返回OOM</li>
</ul>
<h2 id="Full-GC触发机制（-）"><a href="#Full-GC触发机制（-）" class="headerlink" title="Full GC触发机制（*）"></a>Full GC触发机制（*）</h2><p>1、调用 <code>System.gc()</code> 时，系统建议执行Full GC，但是不必然执行</p>
<p>2、老年代空间不足</p>
<p>3、方法区空间不足</p>
<p>…………</p>
<h1 id="堆空间分代的思想"><a href="#堆空间分代的思想" class="headerlink" title="堆空间分代的思想"></a>堆空间分代的思想</h1><p>分代的唯一目的就是优化GC的性能</p>
<p>如果没有分代，那么所有的对象都在一块，当要进行GC的时候，判断哪些对象需要回收，哪些不需要的时候，就需要对整个空间进行扫描。<strong>如果进行分代处理的话，就可以把新创建的一些对象，放在同一块区域，GC的时候就可以针对性地进行搜索，而且还可以腾出一大块区域</strong></p>
<h1 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h1><ul>
<li>优先分配到Eden区</li>
<li>大对象直接分配到老年代</li>
<li>长期存活的对象分配到老年代</li>
<li><em><strong>动态对象的年龄判断：如果Survivor区中相同年龄的所有对象的和大于其空间的一般，年龄大于或等于该年龄的对象直接进入老年代</strong></em></li>
<li>空间分配担保（*）</li>
</ul>
<h1 id="TLAB为对象分配内存"><a href="#TLAB为对象分配内存" class="headerlink" title="TLAB为对象分配内存"></a>TLAB为对象分配内存</h1><h2 id="为什么要有TLAB？"><a href="#为什么要有TLAB？" class="headerlink" title="为什么要有TLAB？"></a>为什么要有TLAB？</h2><p>1、对象的创建在JVM中很频繁，所以在并发环境下从堆区中划分内存空间是线程不安全的</p>
<p>2、为了避免多个线程操作同一个地址，需要加锁，从而影响分配的速度</p>
<h2 id="什么是TLAB？"><a href="#什么是TLAB？" class="headerlink" title="什么是TLAB？"></a>什么是TLAB？</h2><p>1、在Eden区域进行划分，为每个线程分配了一个私有缓存的区域</p>
<p>2、多个线程共同操作时，可以避免线程安全问题，提升内存分配吞吐量</p>
<p><em><strong>注意：</strong></em></p>
<p>1、JVM将TLAB作为内存分配的首选</p>
<p><em><strong>2、TLAB只占 Eden的1%，当对象在TLAB空间分配内存失败后，JVM在Eden直接分配内存，而且通过加锁来确保原子性</strong></em></p>
<p>3、TLAB大小可以通过 <code>-XX:TLABWasteTargetPercent</code> + 参数进行设置</p>
<img src="/2022/07/13/07-%E5%A0%86/7.png" alt="1" style="zoom: 80%;">



<h1 id="总结堆空间参数设置"><a href="#总结堆空间参数设置" class="headerlink" title="总结堆空间参数设置"></a>总结堆空间参数设置</h1><p><em><strong>1、<code>-XX:+PrintFlagsInitial</code> : 查看所有的参数的默认初始值</strong></em></p>
<p>2、<code>-XX:+PrintFlagsFinal</code> : 查看所有的参数的最终值(可能会存在修改(:表示修改了),不再是初始值)</p>
<p>3、具体查看某个参数的指令:</p>
<ul>
<li>jps:查看当前运行中的进程</li>
<li>jinfo -flag SurvivorRatio 进程id</li>
</ul>
<p><em><strong>4、-Xms:初始堆空间内存 (默认为物理内存的1&#x2F;64)</strong></em></p>
<p><em><strong>5、-Xmx:最大堆空间内存(默认为物理内存的1&#x2F;4)</strong></em></p>
<p>6、-Xmn:设置新生代的大小。(初始值及最大值)</p>
<p>7、<code>-XX:NewRatio</code>:配置新生代与老年代在堆结构的占比</p>
<ul>
<li>默认:-<code>XX:NewRatio=2</code>,表示新生代占1,老年代占2,新生代占整个堆的1&#x2F;3</li>
<li>可以修改<code>-XX:NewRatio=4</code>,表示新生代占1,老年代占4,新生代占整个堆的1&#x2F;5</li>
</ul>
<p>8、<code>-XX:SurvivorRatio</code>:设置新生代中Eden和S0&#x2F;S1空间的比例<br>(Eden空间和另外两个Survivor空间缺省所占的比例是8:1:1)</p>
<p>9、<code>-XX:MaxTenuringThreshold</code>设置新生代垃圾的最大年龄</p>
<p><em><strong>10、-XX:+PrintGCDetails:输出详细的GC处理日志</strong></em><br><em><strong>(如下这两种方式是简单的打印 gc 简要信息：</strong></em></p>
<p><em><strong>1） <code>-XX:+PrintGC</code></strong></em></p>
<p>*<strong>2） <code>-verbose:gc*</code></strong></p>
<p><em><strong>11、<code>-XX:HandlePromotionFailure</code>:是否设置空间分配担保</strong></em><br><em><strong>(JDK6之后,只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC,否则将进行Full GC)</strong></em></p>
<h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><em><strong>将堆上的对象分配到栈，需要使用逃逸分析手段</strong></em></p>
<ol>
<li><strong>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸</strong></li>
<li>当一个对象在方法中被定义后，它被外部方法所引用,则认为发生逃逸。<strong>例如作为调用参数传递到其他地方中</strong></li>
</ol>
<p><strong>其实就是看new出来的对象是否有可能在方法外被调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> EscapeAnalysis object;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 方法返回 EscapeAnalysis 对象，发生逃逸</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> EscapeAnalysis <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">return</span> <span class="variable">object</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">EscapeAnalysis</span>() : object;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 对象的作用域仅在当前方法中有效，没有发生逃逸</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useEscapeAnalysis1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">EscapeAnalysis</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EscapeAnalysis</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 引用成员变量的值，发生逃逸</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useEscapeAnalysis2</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">EscapeAnalysis</span> <span class="variable">instance</span> <span class="operator">=</span> getInstance();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在jdk7及之后，可以通过</p>
<p>1、<code>-XX:+DoEscapeAnalysis</code> 显式开启逃逸分析</p>
<p>2、通过 <code>-XX:+PrintEscapeAnalysis</code> 查看逃逸分析的筛选结果</p>
<h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><h3 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h3><ul>
<li>成员变量赋值</li>
<li>方法返回值</li>
<li>实例引用传递</li>
</ul>
<p><em><strong>在开启逃逸分析后执行时间变，而且没有发生GC</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈上分配测试</span></span><br><span class="line"><span class="comment">//-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看执行时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费的时间为：&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="comment">//为了方便查看堆内存中对象的个数，线程sleep</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">//未发生逃逸</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="同步省略"><a href="#同步省略" class="headerlink" title="同步省略"></a>同步省略</h3><p>也叫做锁消除，指在动态编译同步块时，JIT编译器可以<strong>借助逃逸分析来判断同步块所使用的锁对象是否只能被一个线程访问而没有被发布到其他线程</strong>，如果没有，那么在编译这个同步块的时候，就会<strong>取消这部分代码的同步</strong>，大大提高并发性和性能。</p>
<p><strong>代码中堆obj进行加锁，但是obj对象的生命周期只在test1方法中，并不会被其他线程访问到，所以在JIT编译阶段就会优化成test2的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分离对象或标量替换"><a href="#分离对象或标量替换" class="headerlink" title="分离对象或标量替换"></a>分离对象或标量替换</h3><p>标量：一个无法再分解成更小的数据的数据，如基本数据类型</p>
<p>聚合量：还可以继续分解的数据，如对象</p>
<p><em><strong>如果一个对象不会被外界访问的话，经过JIT的优化，就会把对象拆解成若干个成员变量来替代，这就是标量替换</strong></em></p>
<p><em><strong>标量替换可以大大减少堆内存的占用，因为不需要创建对象，也就不需要分配堆内存</strong></em></p>
<p>参数：<code>-XX:+EliminateAllocations</code>开启标量替换，允许将对象打散分配在栈上<strong>（默认打开）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; alloc();&#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;x&quot;</span> + point.x + <span class="string">&quot;;&quot;</span> + <span class="string">&quot;y&quot;</span> + point.y);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> i1)</span> &#123;&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;x&quot;</span> + x + <span class="string">&quot;;&quot;</span> + <span class="string">&quot;y&quot;</span> + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>08-方法区</title>
    <url>/2022/07/14/08-%E6%96%B9%E6%B3%95%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="方法区的演变"><a href="#方法区的演变" class="headerlink" title="方法区的演变"></a>方法区的演变</h1><p><img src="/2022/07/14/08-%E6%96%B9%E6%B3%95%E5%8C%BA/1.png" style="zoom: 67%;"><img src="/2022/07/14/08-%E6%96%B9%E6%B3%95%E5%8C%BA/2.png" style="zoom: 67%;"><img src="/2022/07/14/08-%E6%96%B9%E6%B3%95%E5%8C%BA/3.png" style="zoom: 67%;"></p>
<br>

<p><strong>只有HotSpot虚拟机才有永久代</strong></p>
<p>1、jdk1.6之前：又永久代，静态变量存储在永久代上</p>
<p>2、jdk1.7：又永久代，字符串常量池，静态变量移除，保存在堆中</p>
<p>3、jdk1.8以后：无永久代，类型信息、字段、方法、常量池保存在本地内存的元空间，但字符串常量池，静态变量仍在堆</p>
<img src="/2022/07/14/08-%E6%96%B9%E6%B3%95%E5%8C%BA/8.png" style="zoom: 75%;">

<br>

<h2 id="永久代为什么要被元空间替换？"><a href="#永久代为什么要被元空间替换？" class="headerlink" title="永久代为什么要被元空间替换？"></a>永久代为什么要被元空间替换？</h2><p>1、为永久代设置空间大小是很难确定的如果动态加载类过多，容易产生永久代的OOM，而元空间使用本地内存，只受本地内存的影响</p>
<p>2、对永久代调优困难</p>
<br>

<h2 id="字符串常量池为什么要放到堆空间？"><a href="#字符串常量池为什么要放到堆空间？" class="headerlink" title="字符串常量池为什么要放到堆空间？"></a>字符串常量池为什么要放到堆空间？</h2><p>因为永久代的回收率很低，在进行full GC的时候才会触发，而full GC是老年代空间不足、永久代不足时才会触发，所以导致回收效率不高。但是<em><strong>实际中又有大量字符会被创建，回收效率低导致永久代空间不足。放到堆里，可以及时回收。</strong></em></p>
<br>

<h1 id="方法区的概述"><a href="#方法区的概述" class="headerlink" title="方法区的概述"></a>方法区的概述</h1><p>1、方法区在JVM启动的时候被创建，它的实际的物理内存空间可以是不连续的<em><strong>（关闭 JVM 就会释放这个区域的内存）</strong></em></p>
<p><em><strong>2、方法区时逻辑上是堆的一个组成部分</strong></em>，但是在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space)和元空间(Metaspace)<br><em><strong>（注意：方法区是一种规范，而永久代和元空间是它的一种实现方式）</strong></em></p>
<p>3、方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类,导致方法区溢出，虚拟机同样会抛出内存溢出错误：(<code>java.lang.OutOfMemoryError:PermGen space</code>、<code>java.lang.OutOfMemoryError:Metaspace</code>)</p>
<ul>
<li>加载过多的jar包</li>
<li>tomcat部署的过程过多</li>
<li>反射类太多</li>
</ul>
<p>4、jdk7及以前，将方法区的实现称为永久代，jdk8之后，使用元空间取代了永久代</p>
<p><em><strong>5、元空间和永久代的区别：元空间不在虚拟机设置的内存中，而是使用本地内存</strong></em></p>
<img src="/2022/07/14/08-%E6%96%B9%E6%B3%95%E5%8C%BA/5.png" style="zoom: 67%;">

<br>

<h1 id="设置方法区大小与OOM"><a href="#设置方法区大小与OOM" class="headerlink" title="设置方法区大小与OOM"></a>设置方法区大小与OOM</h1><p><strong>jdk7及以前</strong></p>
<p><code>-XX:PermSize=100m</code>（默认值是20.75M）</p>
<p><code>-XX:MaxPermSize=100m</code>（32位机器默认是64M，64位是82M）</p>
<p><strong>jdk1.8及以后</strong></p>
<p><code>-XX:MetaspaceSize=100m</code>（windows默认约等于21M）</p>
<p><code>-XX:MaxMetaspaceSize=100m</code>（默认是-1,即没有限制）</p>
<br>

<h1 id="方法区的内部结构"><a href="#方法区的内部结构" class="headerlink" title="方法区的内部结构"></a>方法区的内部结构</h1><p><em><strong>存储已被虚拟机记载的类型信息、常量、静态变量、即时编译器编译后的代码缓存、域信息、方法信息</strong></em></p>
<h2 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h2><p><strong>对每个加载的类型（类，接口，枚举，注解）JVM 必须在方法区中存储以下类型信息</strong></p>
<p>1、类型的完整有效名称（全名&#x3D;包名.类名）</p>
<p>2、直接父类的完整有效名（接口和Object类没有）</p>
<p>3、修饰符</p>
<p><em><strong>4、直接接口的一个有序列表</strong></em></p>
<br>

<h2 id="域信息"><a href="#域信息" class="headerlink" title="域信息"></a>域信息</h2><p><em><strong>域名称，域修饰符（public，private……），域类型</strong></em></p>
<br>

<h2 id="方法信息"><a href="#方法信息" class="headerlink" title="方法信息"></a>方法信息</h2><p>1、方法名称</p>
<p>2、方法返回类型</p>
<p>3、方法参数的数量和类型<strong>（按顺序）</strong></p>
<p>4、方法的字节码，操作数栈和局部变量表的大小</p>
<br>

<h2 id="non-final的类变量"><a href="#non-final的类变量" class="headerlink" title="non-final的类变量"></a>non-final的类变量</h2><p>1、静态变量和类关联在一起，<em><strong>随着类的加载而加载</strong></em></p>
<p><em><strong>2、类变量被所有类的实例共享，即使没有类实例也可以访问它</strong></em></p>
<p>以下代码不会报空指针异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodAreaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        order.hello();</span><br><span class="line">        System.out.println(order.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="全局常量：static-final"><a href="#全局常量：static-final" class="headerlink" title="全局常量：static final"></a>全局常量：static final</h2><p><em><strong>每个全局常量在编译的时候就会被分配</strong></em></p>
<br>

<h2 id="常量池与运行时常量池"><a href="#常量池与运行时常量池" class="headerlink" title="常量池与运行时常量池"></a>常量池与运行时常量池</h2><p><em><strong>方法区内部包含了运行时常量池</strong></em></p>
<p><em><strong>字节码文件中包含了常量池</strong></em></p>
<p><em><strong>当类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</strong></em></p>
<br>

<h3 id="常量池的理解"><a href="#常量池的理解" class="headerlink" title="常量池的理解"></a>常量池的理解</h3><p>常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型、字面量等信息（主要是字面量和符号引用）</p>
<img src="/2022/07/14/08-%E6%96%B9%E6%B3%95%E5%8C%BA/6.png" style="zoom: 90%;">

<p><em><strong>一个 java 程序编译生成字节码文件后，字节码文件需要大量数据支持进行解析，如果将数据直接存进字节码，文件过大所以将数据存进常量池，字节码中包含了指向常量池的引用</strong></em></p>
<br>

<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p><em><strong>字节码文件中的常量池表经过类加载器放到方法区后，对应的结构就称为运行时常量池</strong></em></p>
<p><em><strong>当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</strong></em></p>
<p><strong>注意：</strong></p>
<p>1、运行时常量池是方法区的一部分。</p>
<p>2、运行时常量池中包含多种不同的常量，包括<em><strong>编译期就已经明确的数值字面量</strong></em>，也包括到<em><strong>运行期解析后才能够获得的方法或者字段引用</strong></em> <em><strong>此时不再是常量池中的符号地址了，这里换为真实地址。</strong></em></p>
<p>3、运行时常量池相较于Class文件中的常量池的特征：<em><strong>动态性</strong></em></p>
<p><em><strong>4、符号地址变为真实地址其实就是，在<code>*.class文件</code>被加载到内存以后，将<code>*.class文件</code>中常量池中的<code>#x</code>符号地址，转化为内存中的地址。</strong></em></p>
<br>

<h1 id="方法区的垃圾收集"><a href="#方法区的垃圾收集" class="headerlink" title="方法区的垃圾收集"></a>方法区的垃圾收集</h1><blockquote>
<p>前言：</p>
<p>方法区内常量池之中主要存放的两大类常量：字面量和符号引用。 </p>
<p>字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等。</p>
<p>符号引用则属于编译原理方面的概念，包括</p>
<ol>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ol>
</blockquote>
<p>方法区中主要回收</p>
<p>1、常量池中废弃的常量</p>
<p>2、不再使用的类型</p>
<p>只要常量池中的常量没有被任何地方引用，就可以被回收（与堆中回收对象类似）</p>
<p>判断一个类是否要进行回收（*）</p>
<p><img src="/2022/07/14/08-%E6%96%B9%E6%B3%95%E5%8C%BA/7.png"></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>09-对象的实例化，内存布局和访问定位</title>
    <url>/2022/07/14/09-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%EF%BC%8C%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8C%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="对象实例化与创建"><a href="#对象实例化与创建" class="headerlink" title="对象实例化与创建"></a>对象实例化与创建</h1><p><a href="https://www.processon.com/view/link/62d003731e08530a891e2b9b">对象实例化的概述（点我）</a></p>
<p><strong>测试对象实例化的过程</strong></p>
<p><em><strong>①加载类元信息	②为对象分配内存	③处理并发问题	④属性的默认初始化（零值初始化）</strong></em></p>
<p><em><strong>⑤设置对象头信息	⑥属性的显示初始化、代码块中初始化、构造器中初始化</strong></em></p>
<p><strong>创建的过程（字节码角度）</strong></p>
<p><img src="/2022/07/14/09-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%EF%BC%8C%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8C%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/2.png"></p>
<br>

<h1 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h1><p><a href="https://www.processon.com/view/link/62d02000e401fd259600c5d5">内存布局（点我）</a></p>
<p><img src="/2022/07/14/09-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%EF%BC%8C%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8C%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/3.png"></p>
<br>

<h1 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h1><p><a href="https://www.processon.com/view/link/62d0267e0e3e746072708d8c">对象访问定位概述（点我）</a></p>
<img src="/2022/07/14/09-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%EF%BC%8C%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8C%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/4.png" style="zoom:67%;">

<br>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>1-1-数据结构分类</title>
    <url>/2022/07/12/1-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="数据结构分类："><a href="#数据结构分类：" class="headerlink" title="数据结构分类："></a><strong>数据结构分类：</strong></h2><ul>
<li>顺序存储结构： 把数据元素放到地址连续的存储单元里面，其数据间的逻辑关系和物理关系是一致的 ，比如我们常用的数组就是顺序存储结构。</li>
</ul>
<p>​    <img src="/2022/07/12/1-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB/1.png" alt="0" style="zoom:67%;"></p>
<ul>
<li>链式存储结构： 是把数据元素存放在任意的存储单元里面，这组存储单元可以是连续的也可以是不连续的。此时，数据元素之间并 不能反映元素间的逻辑关系，因此在链式存储结构中引进了一个指针存放数据元素的地址，这样通过地址就可以找 到相关联数据元素的位置</li>
</ul>
<h2 id="逻辑结构分类："><a href="#逻辑结构分类：" class="headerlink" title="逻辑结构分类："></a><strong>逻辑结构分类：</strong></h2><ul>
<li>集合结构：集合结构中数据元素除了属于同一个集合外，他们之间没有任何其他的关系。</li>
<li>线性结构：线性结构中的数据元素之间存在一对一的关系</li>
<li>树形结构：树形结构中的数据元素之间存在一对多的层次关系</li>
<li>图形结构：图形结构的数据元素是多对多的关系</li>
</ul>
<p><img src="/2022/07/12/1-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB/2.png" alt="0" style="zoom: 67%;">  <img src="/2022/07/12/1-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB/3.png" alt="0" style="zoom: 67%;"></p>
<p><img src="/2022/07/12/1-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB/4.png" alt="0" style="zoom: 67%;">  <img src="/2022/07/12/1-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB/5.png" alt="0" style="zoom: 67%;"></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>1-nginx-目录，配置文件</title>
    <url>/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="使用-工具tree查看目录结构"><a href="#使用-工具tree查看目录结构" class="headerlink" title="使用 工具tree查看目录结构"></a><strong>使用</strong> <strong>工具tree查看目录结构</strong></h1><p><strong>1、安装tree工具：</strong> <strong>yum install -y tree</strong></p>
<p><strong>2、</strong> <strong>tree &#x2F;usr&#x2F;local&#x2F;nginx</strong> <strong>(tree后面跟的是Nginx的安装目录)</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/1.png" alt="0"></p>
<h1 id="查看进程的PID"><a href="#查看进程的PID" class="headerlink" title="查看进程的PID"></a><strong>查看进程的PID</strong></h1><p><strong>1、查看nginx的master进程和worker进程：</strong> <strong>ps -ef | grep nginx</strong></p>
<p><strong>2、nginx的.&#x2F;configure的配置参数的时候，有一个参数是–pid-path&#x3D;PATH默认是</strong> <strong>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid</strong></p>
<p><strong>所以可以通过查看该文件来获取nginx的master进程ID</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/2.png" alt="0"></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/3.png" alt="0"></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/4.png" alt="0"></p>
<h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a><strong>信号</strong></h1><table>
<thead>
<tr>
<th><strong>信号</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>TERM或INT</strong></td>
<td><strong>立即关闭整个服务</strong></td>
</tr>
<tr>
<td><strong>QUIT</strong></td>
<td><strong>“优雅”地关闭整个服务</strong></td>
</tr>
<tr>
<td><strong>HUP</strong></td>
<td><strong>重读配置文件并使用服务对新配置项生效</strong></td>
</tr>
<tr>
<td><strong>USR1</strong></td>
<td><strong>重新打开日志文件，可以用来进行日志切割</strong></td>
</tr>
<tr>
<td><strong>USR2</strong></td>
<td><strong>平滑升级</strong> <strong>到最新版的nginx</strong></td>
</tr>
<tr>
<td><strong>WINCH</strong></td>
<td><strong>所有子进程不在接收处理新连接相当于给work进程发送QUIT指令</strong></td>
</tr>
</tbody></table>
<h2 id="调用命令为-kill-signal-PID"><a href="#调用命令为-kill-signal-PID" class="headerlink" title="调用命令为 kill -signal PID"></a><strong>调用命令为</strong> <strong>kill -signal PID</strong></h2><p><strong>1、发送</strong>  <strong>TERM 或 INT</strong>  <strong>信号给master进程，会将Nginx服务</strong> <strong>立即关闭</strong> <strong>。</strong></p>
<p><strong>2、发送</strong>  <strong>QUIT</strong>  <strong>信号给master进程，master进程会控制所有的work进程不再接收新的请求，</strong> <strong>等所有请求处理完后，在把进程都关闭掉</strong></p>
<p><strong>3、发送</strong>  <strong>HUP</strong>  <strong>信号给master进程，master进程会把控制旧的work进程不再接收新的请求，等处理完请求后将旧的work进程关闭掉，然后根据nginx的配置文件重新启动新的work进程</strong></p>
<p><strong>4、发送</strong>  <strong>USR1</strong>  <strong>信号给master进程，告诉Nginx重新开启日志文件</strong></p>
<p><strong>5、</strong> <strong>发送</strong>  <strong>USR2</strong>  <strong>信号给master进程，</strong> <strong>重新开启对应的master进程和work进程</strong> <strong>，这时系统里会有两个master进程和四个master进程</strong></p>
<p><strong>新的master进程的PID会被记录在			&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid</strong></p>
<p><strong>而之前的旧的master进程PID会被记在	&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid.oldbin文件中</strong></p>
<p><strong>最后再发送  QUIT  信号给旧的master进程</strong></p>
<p><strong>6、发送</strong>  <strong>WINCH</strong>  <strong>信号给master进程,让master进程控制不让所有的work进程在接收新的请求了</strong></p>
<p><strong>请求处理完后关闭work进程。</strong> <strong>注意master进程不会被关闭掉</strong></p>
<h2 id="nginx命令行控制"><a href="#nginx命令行控制" class="headerlink" title="nginx命令行控制"></a><strong>nginx命令行控制</strong></h2><p><strong>在sbin目录下，可以对nginx进行状态控制</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/5.png" alt="0"></p>
<p><strong>.&#x2F;nginx-v			查看版本号信息</strong>		</p>
<p><strong>.&#x2F;nginx-V			查看版本号信息和配置信息</strong></p>
<p><strong>.&#x2F;nginx-t			测试配置文件语法是否正确</strong></p>
<p><strong>.&#x2F;nginx-T			测试nginx的配置文件语法是否正确并列出用到的配置文件信息然后退出</strong></p>
<p><strong>.&#x2F;nginx-q			在配置测试期间禁止显示非错误消息</strong>	</p>
<p><strong>.&#x2F;nginx-s			s即signal信号，后面可以跟</strong></p>
<ul>
<li><strong>stop[快速关闭，类似于TERM&#x2F;INT信号的作用]</strong></li>
<li><strong>quit[优雅的关闭，类似于QUIT信号的作用]</strong> </li>
<li><strong>reopen[重新打开日志文件类似于USR1信号的作用]</strong> </li>
<li><strong>reload[类似于HUP信号的作用]</strong></li>
</ul>
<p><strong>.&#x2F;nginx-p			指定Nginx的prefix路径</strong></p>
<p><strong>.&#x2F;nginx-c			指定Nginx的配置文件路径</strong></p>
<p><strong>.&#x2F;nginx-g			补充Nginx配置文件，向Nginx服务指定启动时应用全局的配置</strong></p>
<h1 id="nginx-conf配置文件结构"><a href="#nginx-conf配置文件结构" class="headerlink" title="nginx.conf配置文件结构"></a><strong>nginx.conf配置文件结构</strong></h1><p><strong>nginx.conf配置文件中默认有三大块：全局块、events块、http块</strong></p>
<p><strong>http块中可以配置多个server块，每个server块又可以配置多个location块</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/6.png" alt="0"></p>
<h2 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a><strong>全局块</strong></h2><h3 id="一、user指令"><a href="#一、user指令" class="headerlink" title="一、user指令"></a><strong>一、user指令</strong></h3><p><strong>可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全</strong></p>
<h3 id="二、work-process指令"><a href="#二、work-process指令" class="headerlink" title="二、work process指令"></a><strong>二、work process指令</strong></h3><p><strong>1、master_process:用来指定是否开启工作进程</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/7.png" alt="0"></p>
<p><strong>2、worker _ processes:用于配置Nginx生成工作进程的数量</strong> <strong>，这个是Nginx服务器实现并发处理服务的关键所在</strong></p>
<p><strong>process的值越大，可以支持的并发处理量也越多</strong> <strong>但事实上这个值的设定是需要受到来自服务器自身的限制建议将该值和服务器CPU的内核数保存一致</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/8.png" alt="0"></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/9.png" alt="0"></p>
<h3 id="三、其他指令"><a href="#三、其他指令" class="headerlink" title="三、其他指令"></a><strong>三、其他指令</strong></h3><p><strong>1、deamon：</strong> <strong>设定Nginx是否以守护进程的方式启动</strong></p>
<p><strong>守护进程是linux后台一种服务进程，特点是独立于控制终端，不会随着终端的关闭而停止</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/10.png" alt="0"></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/11.png" alt="0"></p>
<p><strong>2、pid：</strong> <strong>配置nginx当前master进程的进程号ID存储的文件路径</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/12.png" alt="0"></p>
<p><strong>3、error_log：</strong> <strong>配置nginx错误日志存放路径</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/13.png" alt="0"></p>
<p><strong>日志级别的值有：debug|info|notice|warn|error|crit|alert|emerg</strong></p>
<p>​								  调试 |信息|  通知  | 警告 | 错误 |临界|警报|紧急</p>
<p><strong>4、include：</strong> <strong>引入其他配置文件</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/14.png" alt="0"></p>
<h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a><strong>测试：</strong></h3><p><strong>1）创建一个main.conf，在里面写上配置文件</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/15.png" alt="0"></p>
<p><strong>2）引入配置文件</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/16.png" alt="0"></p>
<p><strong>3）加载成功</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/17.png" alt="0"></p>
<h2 id="events块"><a href="#events块" class="headerlink" title="events块"></a><strong>events块</strong></h2><h3 id="1、-accept-mutex：-设置nginx网络连接序列化"><a href="#1、-accept-mutex：-设置nginx网络连接序列化" class="headerlink" title="1、 accept_mutex： 设置nginx网络连接序列化"></a><strong>1、</strong> <strong>accept_mutex：</strong> <strong>设置nginx网络连接序列化</strong></h3><p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/18.png" alt="0"></p>
<p><strong>如果设置为on，将会对多个Nginx进程接收连接进行序列号，一个个来唤醒接收，</strong> <strong>防止了多个进程对连接的争抢</strong></p>
<h3 id="2、-multi-accept：-用来设置是否允许同时接收多个网络连接"><a href="#2、-multi-accept：-用来设置是否允许同时接收多个网络连接" class="headerlink" title="2、 multi_accept： 用来设置是否允许同时接收多个网络连接"></a><strong>2、</strong> <strong>multi_accept：</strong> <strong>用来设置是否允许同时接收多个网络连接</strong></h3><p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/19.png" alt="0"></p>
<p><strong>如果multi_accept被禁止了，nginx一个工作进程只能同时接受一个新的连接。否则，一个工作进程可以同时接受所有的新连接</strong></p>
<h3 id="3、-worker-connections：-用来配置单个worker进程最大的连接数"><a href="#3、-worker-connections：-用来配置单个worker进程最大的连接数" class="headerlink" title="3、 worker_connections： 用来配置单个worker进程最大的连接数"></a><strong>3、</strong> <strong>worker_connections：</strong> <strong>用来配置单个worker进程最大的连接数</strong></h3><p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/20.png" alt="0"></p>
<p><strong>连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数</strong></p>
<h3 id="4、-use：用来设置Nginx服务器选择哪种事件驱动来处理网络消息"><a href="#4、-use：用来设置Nginx服务器选择哪种事件驱动来处理网络消息" class="headerlink" title="4、 use：用来设置Nginx服务器选择哪种事件驱动来处理网络消息"></a><strong>4、</strong> <strong>use：</strong>用来设置Nginx服务器选择哪种事件驱动来处理网络消息</h3><p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/21.png" alt="0"></p>
<h2 id="HTTP块"><a href="#HTTP块" class="headerlink" title="HTTP块"></a><strong>HTTP块</strong></h2><h3 id="自定义MIME-Type（网络资源的媒体类型）"><a href="#自定义MIME-Type（网络资源的媒体类型）" class="headerlink" title="自定义MIME-Type（网络资源的媒体类型）"></a><strong>自定义MIME-Type（网络资源的媒体类型）</strong></h3><p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/22.png" alt="0"></p>
<h3 id="default-type-用来配置Nginx响应前端请求默认的MIME类型"><a href="#default-type-用来配置Nginx响应前端请求默认的MIME类型" class="headerlink" title="default_type:用来配置Nginx响应前端请求默认的MIME类型"></a><strong>default_type:用来配置Nginx响应前端请求默认的MIME类型</strong></h3><p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/23.png" alt="0"></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/24.png" alt="0"></p>
<h3 id="自定义服务日志"><a href="#自定义服务日志" class="headerlink" title="自定义服务日志"></a><strong>自定义服务日志</strong></h3><p><strong>1、access_log:用来设置用户访问日志的相关属性</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/25.png" alt="0"></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/26.png" alt="0"></p>
<p><strong>2、log_format:用来指定日志的输出格式。</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/27.png" alt="0"></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/28.png" alt="0"></p>
<p><strong>3、sendfile:用来设置Nginx服务器是否使用sendfile()传输文件</strong></p>
<p><strong>该属性可以大大提高Nginx处理静态资源的性能</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/29.png" alt="0"></p>
<p><strong>4、keepalive_timeout:用来</strong> <strong>设置长连接的超时时间</strong></p>
<p>​    <img src="/2022/07/13/1-nginx-%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/30.png" alt="0"></p>
<p><strong>5、keepalive_requests:用来设置一个keep-alive</strong> <strong>连接使用的次数</strong></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>10-直接内存</title>
    <url>/2022/07/15/10-%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<p><strong>1、直接内存不是虚拟机运行时数据区的一部分，而是在Java堆外，直接向系统申请的内存空间</strong></p>
<p><img src="/2022/07/15/10-%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/1.png"></p>
<p><img src="/2022/07/15/10-%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/2.png"></p>
<p>2、来源于NIO，通过存在堆中的 <code>DirectByteBuffer</code> 操作本地内存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BUFFER</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;<span class="comment">//1GB</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//直接分配本地内存空间</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(BUFFER);</span><br><span class="line">    System.out.println(<span class="string">&quot;直接内存分配完毕&quot;</span>);</span><br><span class="line">    byteBuffer = <span class="literal">null</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;直接内存开始释放！&quot;</span>);</span><br><span class="line">    System.gc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、通常访问直接内存的速度会优于访问java堆的速度<strong>（读写性能更高，适用于读写频繁的场合）</strong></p>
<p><strong>4、java的NIO库运行java程序使用直接内存用于数据缓冲</strong></p>
<p>5、直接内存大小可以通过<code>MaxDirectMemorySize</code>设置，如果不指定，默认与堆的最大值<code>-Xmx</code>参数值一致，但是<strong>由于直接内存在java堆外，因此它不会直接受限于-Xmx指定的最大堆大小，它和java堆受限于操作系统能给出的最大内存</strong></p>
<p><strong>6、简单理解： <code>java process memory = java heap + native memory</code></strong></p>
<br>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>11-执行引擎</title>
    <url>/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>1、执行引擎是Java虚拟机的核心组成部分之一</p>
<p><strong>2、执行引擎的任务是将字节码指令解释&#x2F;编译为对应平台上的本地机器指令</strong> <em><strong>（其实执行引擎就是将高级语言翻译为机器语言）</strong></em></p>
<p><strong>3、执行引擎的工作过程</strong></p>
<ul>
<li><em><strong>输入的是字节码二进制流</strong></em></li>
<li><em><strong>处理过程是字节码解析执行的等效过程</strong></em></li>
<li><em><strong>输出是执行结果</strong></em></li>
</ul>
<img src="/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/1.png" style="zoom:80%;">

<p>4、执行引擎在<strong>执行的过程中</strong>需要执行的<strong>字节码指令完全</strong> <strong>依赖于PC寄存器</strong></p>
<p>5、每当执行完一项指令操作后，PC寄存器就会<strong>更新下一条需要被执行的指令地址</strong></p>
<p><strong>6、在方法的执行过程中，执行引擎有可能会通过存储在局部变量表中的对象引用定位到存储在java堆中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息</strong></p>
<p><em><strong>7、执行引擎包括解释器，及时编译器，垃圾回收器</strong></em></p>
<br>

<h1 id="java代码编译和执行的过程"><a href="#java代码编译和执行的过程" class="headerlink" title="java代码编译和执行的过程"></a>java代码编译和执行的过程</h1><p>大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过下图的各个步骤</p>
<img src="/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/2.png" style="zoom:70%;">

<p><em><strong>解释器：</strong></em></p>
<p>​	当java虚拟机启动时会根据预定义的规范<strong>对字节码采用逐行解释的方式执行</strong></p>
<p>​	将<strong>字节码文件中的内容翻译为对应平台的本地机器指令执行</strong></p>
<p><em><strong>JIT编译器：</strong></em></p>
<p>​	虚拟机<strong>将源代码直接编译成和本地机器平台相关的机器语言</strong></p>
<img src="/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/3.png" style="zoom:70%;">

<br>

<h1 id="机器码、指令、汇编语言"><a href="#机器码、指令、汇编语言" class="headerlink" title="机器码、指令、汇编语言"></a>机器码、指令、汇编语言</h1><h2 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a>机器码</h2><p><em><strong>各种用二进制编码方式表示的指令称为机器指令码（机器语言）</strong></em></p>
<p>编写的程序输入计算机，CPU直接读取运行，<em><strong>执行速度相比其他语言最快</strong></em>，而且机器指令和CPU密切相关，<em><strong>不同种类的CPU机器指令不同</strong></em></p>
<br>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>由于机器码是由0，1组成的二进制序列，为了<em><strong>增加可读性</strong></em>，将<em><strong>机器码中特定的0，1序列简化为对应的指令。</strong></em></p>
<p><em><strong>不同的硬件平台的同一种指令，对应的机器码也可能不同</strong></em></p>
<br>

<h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p><em><strong>每个平台所支持的指令称为对应平台的指令集</strong></em></p>
<p>例如：</p>
<p>x86指令集 -&gt; 对应x86架构的平台</p>
<p>ARM指令集 -&gt; 对应ARM架构的平台</p>
<br>

<h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><p>使用助记符代替机器指令的操作码，用地址符号或标号替代指令或操作数的地址</p>
<br>

<h2 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h2><p>计算机执行高级语言编写的程序时，需要将程序解释和编译成机器的指令码。（这个过程称为解释程序或编译程序）</p>
<img src="/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/4.png" style="zoom:70%;">

<br>

<h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>1、字节码其实是一种<em><strong>中间状态（中间码）的二进制代码（文件）</strong></em>，它比机器码更抽象，需要<em><strong>直译器转译后才能称为机器码</strong></em></p>
<p><em><strong>2、字节码的实现方式是编译器和虚拟机器</strong></em>（编译器将源码翻译成字节码，特定平台上的虚拟机器将字节码转义为可以直接执行的指令）</p>
<p><em><strong>主要目的是为了实现跨平台性</strong></em></p>
<br>

<h1 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h1><p>1、利用解释器来逐行解析字节码文件，其实解释器的作用就是<em><strong>将字节码文件中的内容翻译为对应平台的本地机器指令执行</strong></em></p>
<p><em><strong>2、当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作</strong></em></p>
<h3 id="分类（-）"><a href="#分类（-）" class="headerlink" title="分类（*）"></a><strong>分类（*）</strong></h3><p>字节码解释器：执行时通过纯软件代码模拟字节码执行，效率低下</p>
<p>模板解释器：将每一条字节码和一个模板函数相关联，模板函数直接产生该字节码执行时的机器码，效率较高</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><em><strong>注意：</strong></em></h3><p><em><strong>1、无论是哪种解释器，效率还是比即时编译器低的</strong></em></p>
<p><em><strong>2、解释器存在的必要性：程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。 编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。</strong></em>当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。在一定时间过后，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。</p>
<br>

<h1 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h1><p>前端编译器：将 .java 文件转变成 .class 文件的过程</p>
<p>后端编译器（JIT编译器）：将字节码转变成机器码的过程</p>
<p>静态提前编译器（AOT编译器）：直接将 .java 文件编译成本地机器代码的过程</p>
<br>

<h2 id="热点代码及探测方式"><a href="#热点代码及探测方式" class="headerlink" title="热点代码及探测方式"></a>热点代码及探测方式</h2><p><em><strong>1、决定是否启用 JIT 编译器需要根据代码被调用执行的频率而定。</strong></em>关于<em><strong>需要被编译为本地代码的字节码，称为”热点代码“</strong></em></p>
<p>2、JIT 编译器运行时会针对那些频繁被调用的热点代码做深度优化，将其直接编译为对应平台的本地机器指令，提高执行性能</p>
<h3 id="热点代码："><a href="#热点代码：" class="headerlink" title="热点代码："></a><strong>热点代码：</strong></h3><p><em><strong>一个多次调用的方法或者方法体内循环次数较多的循环体都可以称为热点代码（这种编译方式由于发生在方法的执行过程中，因此也被称为栈上替换，OSR）</strong></em></p>
<br>

<h3 id="基于计数器的热点探测"><a href="#基于计数器的热点探测" class="headerlink" title="基于计数器的热点探测"></a>基于计数器的热点探测</h3><p><strong>判断一个方法被调用多少次，或循环体循环多少次才能称为热点代码的标准</strong></p>
<p>HotSpot虚拟机<strong>为每个方法都创建</strong>两个不同类型的计数器</p>
<h4 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h4><p>统计方法的调用次数，可以通过参数 <code>-XX:CompileThreshold</code>进行设定，Client默认是1500次，Server默认是10000次，超过阈值，触发 JIT 编译</p>
<img src="/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/5.png" style="zoom:70%;">
<br>

<p><em><strong>热度衰减</strong></em></p>
<p><strong>方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率</strong> <strong>（一段时间内方法的执行频率）</strong>当超过一定限度时，如果方法的调用次数不足让它提交给即时编译器，那么这个方法的调用计数器就会<strong>减少一半</strong>，这个<strong>过程称为调用计数器热度的衰减</strong>，<strong>这段时间就称为该方法统计的半衰周期</strong></p>
<p>关闭热度衰减：<code>-XX:UseCounterDecay</code></p>
<p>设置半衰期的时间：<code>-XX:CounterHalfLifeTime</code>（单位为s）</p>
<br>


<h4 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h4><p>统计循环体的循环次数</p>
<img src="/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/6.png" style="zoom:70%;">

<br>

<h2 id="设置程序执行方式"><a href="#设置程序执行方式" class="headerlink" title="设置程序执行方式"></a>设置程序执行方式</h2><p><code>-Xint</code>：完全采用解释器模式执行程序</p>
<p><code>-Xcomp</code>：完全采用即时编译器（如果即时编译器出现问题，解释器会介入执行）</p>
<p><code>-Xmixed</code>：采用解释器+即时编译器的混合模式</p>
<br>

<h2 id="JIT分类"><a href="#JIT分类" class="headerlink" title="JIT分类"></a>JIT分类</h2><p><strong>Client Compiler和Server Compiler（简称为C1和C2）</strong></p>
<h3 id="C1"><a href="#C1" class="headerlink" title="C1"></a>C1</h3><p><code>-client</code>：指定运行在Client模式下，C1会对字节码进行简单可靠的优化，耗时短</p>
<h3 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h3><p><code>-server</code>：指定运行在Server模式下，C2进行耗时较长的优化以及激进优化，但优化的代码执行效率更高</p>
<h3 id="C1和C2的优化策略（-）"><a href="#C1和C2的优化策略（-）" class="headerlink" title="C1和C2的优化策略（*）"></a>C1和C2的优化策略（*）</h3><img src="/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/7.png" style="zoom:90%;">



<h1 id="Graal编译器与AOT编译器（-）"><a href="#Graal编译器与AOT编译器（-）" class="headerlink" title="Graal编译器与AOT编译器（*）"></a>Graal编译器与AOT编译器（*）</h1><img src="/2022/07/15/11-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/8.png" style="zoom:90%;">
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>12-String相关</title>
    <url>/2022/07/16/12-String%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="String具有不可变性"><a href="#String具有不可变性" class="headerlink" title="String具有不可变性"></a><strong>String具有不可变性</strong></h1><p><strong style="color:red;"><em><strong>1）当对字符串进行重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值</strong></em></strong></p>
<p><strong style="color:red;"><em><strong>2）当对现有的字符串进行连接操作的时候，也需要重新指定内存区域赋值，不能使用原有的value进行赋值</strong></em></strong></p>
<p><strong style="color:red;"><em><strong>3）当调用String的 replace() 方法修改指定字符或字符串的时候，也需要重新指定内存区域赋值，不能使用原有的value进行赋值</strong></em></strong></p>
<p><strong>注意：String声明为final，不可被继承</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//字面量定义的方式，&quot;abc&quot;存储在字符串常量池中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s2)	<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//字面量定义的方式，&quot;abc&quot;存储在字符串常量池中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    s1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    System.out.println(s1 == s2)	<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    s2 += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">    System.out.println(s2);<span class="comment">//abcdef</span></span><br><span class="line">    System.out.println(s1);<span class="comment">//abc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">    System.out.println(s1);<span class="comment">//abc</span></span><br><span class="line">    System.out.println(s2);<span class="comment">//mbc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/07/16/12-String%E7%9B%B8%E5%85%B3/1.png" style="zoom:80%;">

<img src="/2022/07/16/12-String%E7%9B%B8%E5%85%B3/2.png" style="zoom:70%;">

<br>

<h1 id="字符串常量池不会存储相同内容的字符串"><a href="#字符串常量池不会存储相同内容的字符串" class="headerlink" title="字符串常量池不会存储相同内容的字符串"></a>字符串常量池不会存储相同内容的字符串</h1><p><strong>1、String的String Pool是一个固定大小的 Hashtable</strong>，如果放进String Pool的String非常多，就会造成Hash冲突严重，导致链表会很长，而链表长了之后直接会造成的影响是当调用<code>String.intern</code>时性能会下降</p>
<p><strong>2、jdk6中StringTable的长度是固定的（1009），jdk7中StringTable的长度默认是60013，jdk8的可设置的最小值是1009。</strong>两个版本都可以**调整StringTable的值，使用 <code>-XX:StringTableSize</code> **</p>
<br>

<h1 id="String的内存分配"><a href="#String的内存分配" class="headerlink" title="String的内存分配"></a>String的内存分配</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>8种基本数据类型的常量池都是系统协调的，String类型的常量池比较特殊。它的主要使用方法有两种：<br><strong style="color:red;"><strong>1、直接使用双引号声明出来的String对象会直接存储在常量池中（比如： <code>String info = “abc”</code> ）</strong></strong><br><strong style="color:red;"><strong>2、也可以使用String提供的intern()方法手动将字符串加入常量池中</strong></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;<span class="comment">//line 1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//line 2</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//line 3</span></span><br><span class="line">    <span class="type">Memory</span> <span class="variable">mem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Memory</span>();<span class="comment">//line 4</span></span><br><span class="line">    mem.foo(obj);<span class="comment">//line 5</span></span><br><span class="line">&#125;<span class="comment">//line 9</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(Object param)</span> &#123;<span class="comment">//line 6</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> param.toString();<span class="comment">//line 7</span></span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;<span class="comment">//line 8</span></span><br></pre></td></tr></table></figure>

<img src="/2022/07/16/12-String%E7%9B%B8%E5%85%B3/3.png" style="zoom:70%;">

<br>

<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><em><strong>注意：</strong></em></h2><p><strong>完全相同的字符串字面量，应该包含同样的Unicode字符序列（包含同一份码点序列的常量)</strong></p>
<p><strong>并且必须是指向同一个String类实例。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println();<span class="comment">//2293</span></span><br><span class="line">    System.out.println(<span class="string">&quot;1&quot;</span>);<span class="comment">//2294</span></span><br><span class="line">    System.out.println(<span class="string">&quot;2&quot;</span>);System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;4&quot;</span>);System.out.println(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;6&quot;</span>);System.out.println(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;8&quot;</span>);System.out.println(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;10&quot;</span>);<span class="comment">//2303</span></span><br><span class="line">    <span class="comment">//如下的字符串&quot;1&quot; 到 &quot;10&quot;不会再次加载</span></span><br><span class="line">    System.out.println(<span class="string">&quot;1&quot;</span>);<span class="comment">//2304</span></span><br><span class="line">    System.out.println(<span class="string">&quot;2&quot;</span>);<span class="comment">//2304</span></span><br><span class="line">    System.out.println(<span class="string">&quot;3&quot;</span>);System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;5&quot;</span>);System.out.println(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;7&quot;</span>);System.out.println(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;9&quot;</span>);<span class="comment">//2304</span></span><br><span class="line">    System.out.println(<span class="string">&quot;10&quot;</span>);<span class="comment">//2304</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="字符串拼接操作"><a href="#字符串拼接操作" class="headerlink" title="字符串拼接操作"></a>字符串拼接操作</h1><p><strong>常量与常量的拼接结果在常量池，原理是编译器优化常量池中不会存在相同内容的常量</strong></p>
<p><em><strong style="color:red;">拼接中只有其中有一个是变量，拼接后的结果就在堆中。变量拼接的原理是 StringBulider</strong></em></p>
<p><em><strong style="color:red;">如果拼接的结果调用 intern方法，则主动将常量池中还没有的字符串对象放到池中，并返回此对象的地址</strong></em></p>
<br>

<h2 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h2><p><em><strong>常量与常量拼接</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在反编译出来后的文件中也可以看到s1是“abc”</span></span><br><span class="line"><span class="comment">//从字节码文件中也可以看出开始就将abc放到字符串常量池里面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;<span class="comment">//编译期优化：等同于&quot;abc&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>; <span class="comment">//&quot;abc&quot;一定是放在字符串常量池中，将此地址赋给s2</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 最终.java编译成.class,再执行.class</span></span><br><span class="line"><span class="comment">     * String s1 = &quot;abc&quot;;</span></span><br><span class="line"><span class="comment">     * String s2 = &quot;abc&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(s1 == s2); <span class="comment">//true</span></span><br><span class="line">    System.out.println(s1.equals(s2)); <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h2><p><em><strong>常量与常量，常量与变量，变量与变量拼接</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;<span class="comment">//编译期优化</span></span><br><span class="line">    <span class="comment">//如果拼接符号的前后出现了变量，则相当于在堆空间中new String()</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line"></span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">    System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line">    <span class="comment">//intern():判断字符串常量池中是否存在javaEEhadoop值</span></span><br><span class="line">    <span class="comment">//如果存在，则返回常量池中javaEEhadoop的地址；</span></span><br><span class="line">    <span class="comment">//如果字符串常量池中不存在javaEEhadoop，则在常量池中加载一份javaEEhadoop，并返回次对象的地址。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> s6.intern();</span><br><span class="line">    System.out.println(s3 == s8);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + s2;<span class="comment">//</span></span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong style="color:red;">如下的s1 + s2 的执行细节：</strong></em><br>① <code>StringBuilder s3 = new StringBuilder();</code><br>② <code>s3.append(&quot;a&quot;)</code><br>③ <code>s3.append(&quot;b&quot;)</code><br>④ <code>s3.toString()</code>  –&gt; 约等于 <code>new String(&quot;ab&quot;)</code></p>
<p><strong style="color:red;"><em><strong>补充：在jdk5.0之后使用的是StringBuilder,在jdk5.0之前使用的是StringBuffer</strong></em></strong></p>
<br>

<h2 id="测试4"><a href="#测试4" class="headerlink" title="测试4"></a>测试4</h2><p><em><strong>1、字符串拼接操作不一定使用的是StringBuilder。如果拼接符号左右两边都是字符串常量或常量引用，则仍然使用编译期优化，即非StringBuilder的方式。</strong></em></p>
<p><em><strong>2、针对于final修饰类、方法、基本数据类型、引用数据类型的量的结构时，能使用上final的时候建议使用上。</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;<span class="comment">//s4:常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s5);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="测试5"><a href="#测试5" class="headerlink" title="测试5"></a>测试5</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    method1(<span class="number">100000</span>);<span class="comment">//4503</span></span><br><span class="line">    method2(<span class="number">100000</span>);<span class="comment">//8</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(<span class="type">int</span> highLevel)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; highLevel;i++)&#123;</span><br><span class="line">        src = src + <span class="string">&quot;a&quot;</span>;<span class="comment">//每次循环都会创建一个StringBuilder、String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(<span class="type">int</span> highLevel)</span>&#123;</span><br><span class="line">    <span class="comment">//只需要创建一个StringBuilder</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; highLevel; i++) &#123;</span><br><span class="line">        src.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行效率：通过<code>StringBuilder</code>的<code>append()</code>的方式添加字符串的效率要远高于使用<code>String</code>的字符串拼接方式</strong><br><strong style="color:red;">1、<code>StringBuilder</code>的<code>append()</code>的方式：自始至终中只创建过一个<code>StringBuilder</code>的对象</strong><br><strong style="color:red;">2、使用<code>String</code>的字符串拼接方式：创建过多个<code>StringBuilde</code>r和<code>String</code>的对象</strong><br><strong style="color:red;">3、使用<code>String</code>的字符串拼接方式：内存中由于创建了较多的<code>StringBuilder</code>和<code>String</code>的对象，内存占用更大；如果进行GC，需要花费额外的时间。</strong></p>
<br>

<h1 id="intern-的用法"><a href="#intern-的用法" class="headerlink" title="intern()的用法"></a>intern()的用法</h1><img src="/2022/07/16/12-String%E7%9B%B8%E5%85%B3/6.png" style="zoom: 80%;">

<p><strong>1、intern方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放到字符串常量池里面</strong></p>
<p><strong>2、在任意字符串上调用intern方法，其返回结果所指向的类实例必须和直接以常量形式出现的字符串实例完全相同</strong></p>
<p>​	如：<code>(&quot;a&quot;+&quot;b&quot;+&quot;c&quot;).intern() == &quot;abc&quot;</code></p>
<p><strong style="color:red;">3、其实intern方法就是确保字符串在内存中只有一份拷贝。这样可以节约内存空间，加快字符串操作任务的执行速度（该值会存放在字符串常量池）</strong></p>
<br>

<h1 id="保证变量指向字符串常量池的方法"><a href="#保证变量指向字符串常量池的方法" class="headerlink" title="保证变量指向字符串常量池的方法"></a>保证变量指向字符串常量池的方法</h1><h2 id="字面量定义的方式"><a href="#字面量定义的方式" class="headerlink" title="字面量定义的方式"></a>字面量定义的方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="调用intern"><a href="#调用intern" class="headerlink" title="调用intern()"></a>调用intern()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;test&quot;</span>).intern();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;test&quot;</span>).toString().intern();</span><br></pre></td></tr></table></figure>

<br>

<h1 id="问题案例"><a href="#问题案例" class="headerlink" title="问题案例"></a>问题案例</h1><h2 id="1、new-String-quot-quot-会创建几个对象"><a href="#1、new-String-quot-quot-会创建几个对象" class="headerlink" title="1、new String(&quot;&quot;)会创建几个对象"></a><strong style="color:red;"><em>1、<code>new String(&quot;&quot;)</code>会创建几个对象</em></strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><em><strong>两个对象，一个对象是：new关键字在堆空间创建的。另一个对象是：字符串常量池中的对象”ab”。 字节码指令：ldc</strong></em></p>
<p><strong style="color:red;"><em>注意：此时在字符串常量池中，存在”ab”</em></strong></p>
<img src="/2022/07/16/12-String%E7%9B%B8%E5%85%B3/7.png" style="zoom: 80%;">

<br>

<h2 id="2、new-String-quot-a-quot-new-String-quot-b-quot-会创建几个对象"><a href="#2、new-String-quot-a-quot-new-String-quot-b-quot-会创建几个对象" class="headerlink" title="2、new String(&quot;a&quot;)+new String(&quot;b&quot;)会创建几个对象"></a><strong style="color:red;"><em>2、<code>new String(&quot;a&quot;)+new String(&quot;b&quot;)</code>会创建几个对象</em></strong></h2><img src="/2022/07/16/12-String%E7%9B%B8%E5%85%B3/8.png" style="zoom: 80%;">

<p><em><strong>对象1：new StringBuilder()</strong></em></p>
<p><em><strong>对象2： new String(“a”)</strong></em></p>
<p><em><strong>对象3： 常量池中的”a”</strong></em></p>
<p><em><strong>对象4： new String(“b”)</strong></em></p>
<p><em><strong>对象5： 常量池中的”b”</strong></em></p>
<img src="/2022/07/16/12-String%E7%9B%B8%E5%85%B3/9.png" style="zoom: 80%;">

<img src="/2022/07/16/12-String%E7%9B%B8%E5%85%B3/10.png" style="zoom: 80%;">

<p><em><strong>对象6 ：new String(“ab”)</strong></em></p>
<p><strong style="color:red;"><em>注意：toString()的调用，在字符串常量池中，没有生成”ab”</em></strong></p>
<br>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    s1.intern();<span class="comment">//调用此方法之前，字符串常量池中已经存在了&quot;1&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s2);<span class="comment">//jdk6：false   jdk7/8：false</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>);<span class="comment">//s3变量记录的地址为：new String(&quot;11&quot;)</span></span><br><span class="line">    <span class="comment">//执行完上一行代码以后，字符串常量池中，不存在&quot;11&quot;</span></span><br><span class="line">    s3.intern();<span class="comment">//在字符串常量池中生成&quot;11&quot;。</span></span><br><span class="line">    <span class="comment">//jdk6:创建了一个新的对象&quot;11&quot;,也就有新的地址。</span></span><br><span class="line">    <span class="comment">//jdk7:字符串常量池在堆空间中，为了节省内存。此时常量中并没有创建&quot;11&quot;,而是创建一个指向堆空间中new String(&quot;11&quot;)的地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;11&quot;</span>;<span class="comment">//s4变量记录的地址：使用的是上一行代码代码执行时，在常量池中生成的&quot;11&quot;的地址</span></span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//jdk6：false  jdk7/8：true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//StringIntern.java中练习的拓展：</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>);<span class="comment">//new String(&quot;11&quot;)</span></span><br><span class="line">    <span class="comment">//执行完上一行代码以后，字符串常量池中，不存在“11”</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;11&quot;</span>;<span class="comment">//在字符串常量池中生成对象&quot;11&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s3.intern();</span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s4);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="总结instern方法"><a href="#总结instern方法" class="headerlink" title="总结instern方法"></a>总结instern方法</h1><h2 id="jdk1-6中"><a href="#jdk1-6中" class="headerlink" title="jdk1.6中"></a>jdk1.6中</h2><p><strong style="color:red;"><em>将这个字符串对象尝试放入字符串常量池</em></strong></p>
<p><strong>如果字符串常量池有，则不会放入。返回已有的串池中的对象的地址</strong></p>
<p><strong>如果没有，会<strong style="color:red;">把此对象复制</strong>一份，放入字符串常量池，返回字符串常量池中的对象地址</strong></p>
<br>

<h2 id="jdk1-7中"><a href="#jdk1-7中" class="headerlink" title="jdk1.7中"></a>jdk1.7中</h2><p><strong style="color:red;"><em>将这个字符串对象尝试放入字符串常量池</em></strong></p>
<p><strong>如果字符串常量池有，则不会放入。返回已有的串池中的对象的地址</strong></p>
<p><strong>如果没有，会<strong style="color:red;">把此对象的引用地址</strong>复制一份，放入字符串常量池，返回字符串常量池中的对象地址</strong></p>
<br>

<h1 id="intern-练习"><a href="#intern-练习" class="headerlink" title="intern()练习"></a>intern()练习</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;b&quot;</span>);<span class="comment">//new String(&quot;ab&quot;)</span></span><br><span class="line">    <span class="comment">//在上一行代码执行完以后，字符串常量池中并没有&quot;ab&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s.intern();<span class="comment">//jdk6中：在串池中创建一个字符串&quot;ab&quot;</span></span><br><span class="line">                           <span class="comment">//jdk8中：串池中没有创建字符串&quot;ab&quot;,而是创建一个引用，指向new String(&quot;ab&quot;)，将此引用返回</span></span><br><span class="line"></span><br><span class="line">    System.out.println(s2 == <span class="string">&quot;ab&quot;</span>);<span class="comment">//jdk6:true  jdk8:true</span></span><br><span class="line">    System.out.println(s == <span class="string">&quot;ab&quot;</span>);<span class="comment">//jdk6:false  jdk8:true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>);<span class="comment">//执行完以后，会在字符串常量池中会生成&quot;ab&quot;</span></span><br><span class="line"><span class="comment">//        String s1 = new String(&quot;a&quot;) + new String(&quot;b&quot;);////执行完以后，不会在字符串常量池中会生成&quot;ab&quot;</span></span><br><span class="line">        s1.intern();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>13-垃圾回收</title>
    <url>/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<h1 id="相关概述"><a href="#相关概述" class="headerlink" title="相关概述"></a>相关概述</h1><p><strong style="color:red;"><em>垃圾：</em></strong><strong>运行程序中没有任何指针指向的对象。这个对象就是需要被回收的垃圾</strong></p>
<p><strong style="color:red;"><em>GC的作用：</em></strong><strong>释放没用的对象，清楚内存里的记录碎片，以便JVM可以将整理出来的内存分配给新的对象，没有GC就不能保证应用程序的正常进行</strong></p>
<p><strong style="color:red;"><em>内存泄露：</em></strong><strong>对象在程序运行期间无法被回收</strong></p>
<p><strong style="color:red;"><em>java自动内存管理：</em></strong><strong>降低内存泄漏和内存溢出的风险</strong></p>
<p><strong style="color:red;"><em>GC的作用范围：</em></strong><strong>方法区和堆区（重点）</strong></p>
<p><strong style="color:red;"><em>分类：</em></strong><strong>频繁收集Young区，较少收集Old区，基本不动Perm区（元空间）</strong></p>
<br>

<h1 id="相关算法"><a href="#相关算法" class="headerlink" title="相关算法"></a>相关算法</h1><p><strong style="color:red;"><em>注意：</em></strong><strong>在GC执行垃圾回收之前，需要先区分出内存中哪些是存活的对象，哪些是死亡的对象，只有被标记为已经死亡的对象，GC才会在执行垃圾回收的时候，释放掉它的内存空间。</strong><strong style="color:red;">当一个对象已经不再被任何存活的对象继续引用时，就可以宣判为死亡</strong></p>
<h2 id="标记阶段：引用计数算法"><a href="#标记阶段：引用计数算法" class="headerlink" title="标记阶段：引用计数算法"></a>标记阶段：引用计数算法</h2><p><strong style="color:red;">对每个对象保留一个整型的引用计数器属性。用来记录对象被引用的情况</strong></p>
<blockquote>
<p>对于一个对象A，只要任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收</p>
</blockquote>
<p><strong style="color:red;">优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性</strong></p>
<p><strong style="color:red;">缺点：</strong><br><strong>1、需要单独的字段存储计数器，增加存储空间的开销</strong><br><strong>2、每次赋值都需要更新计数器，增加时间的开销</strong><br><em><strong>3、无法处理循环引用（致命缺陷）</strong></em></p>
<br>

<h2 id="标记阶段：可达性分析算法"><a href="#标记阶段：可达性分析算法" class="headerlink" title="标记阶段：可达性分析算法"></a>标记阶段：可达性分析算法</h2><p><strong style="color:red;">以根对象集合（GC Roots：一组必须活跃的引用）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达</strong></p>
<blockquote>
<p>使用该算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径（引用链），如果目标对象没有任何引用链相连，则不可达，也就意味着该对象已经死亡。<strong style="color:red;">只有能够被根对象集合直接或者间接连接的对象才是存活对象</strong></p>
</blockquote>
<p><strong style="color:red;">有效地解决了在引用技术算法中循环引用的问题，防止内存泄露的发生</strong></p>
<img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/1.png" style="zoom:67%;">

<img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/2.png" style="zoom: 85%;">

<p><strong style="color:red;"><em>注意：由于栈方式存放变量和指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那么它就是一个Root</em></strong></p>
<p><strong style="color:red;"><em>扩展：除了固定的GC Roots集合以外，还可以有其他对象”临时性“地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收</em></strong></p>
<blockquote>
<p><strong style="color:red;">1、如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。</strong>这点不满足的话分析结果的准确性就无法保证</p>
<p>2、这也是GC进行时必须STW的一个重要原因，<strong>枚举根节点时也是必须要停顿</strong></p>
</blockquote>
<br>

<h3 id="对象的finalization机制"><a href="#对象的finalization机制" class="headerlink" title="对象的finalization机制"></a>对象的finalization机制</h3><blockquote>
<p>1、java提供了对象终止机制来允许开发人员提供对象被销毁之前的自定义处理逻辑</p>
<p><strong style="color:red;">2、垃圾回收该对象之前（垃圾回收器发现没有引用指向一个对象），总会先调用这个对象的finalize()方法</strong></p>
<p>3、finalize()方法允许在子类中被重写，用于在对象被回收时进行资源的释放（通常在这个方法内进行一些资源释放和清理工作）</p>
</blockquote>
<p><strong style="color:red;"><em>注意：永远不要主动调用某个对象的 finalize方法，应该交给垃圾回收机制调用</em></strong></p>
<br>

<p><em><strong style="color:red;">理由：</strong></em></p>
<p><strong style="color:red;">1、在调用时可能会导致对象复活</strong></p>
<p><strong style="color:red;">2、在方法的执行时间是没有保障，它完全由GC线程决定，极端情况下，如果不发生GC，则finalize方法将没有执行机会</strong></p>
<br>

<h3 id="对象的三种状态"><a href="#对象的三种状态" class="headerlink" title="对象的三种状态"></a>对象的三种状态</h3><p><em><strong>由于finalize方法的存在，虚拟机中的对象一般处于三种可能的状态</strong></em></p>
<p><em><strong>一个无法触及的对象有可能在某一个条件下“复活”自己</strong></em></p>
<p>1、可触及的：从根节点开始，可以到达这个对象</p>
<p>2、可复活的：对象的所有引用都被释放，但是对象有可能在调用finalize方法后复活</p>
<p>3、不可触及的：对象的finalize方法被调用，并且没有复活，那么就会进入不可触及的状态。不可触及的对象不可能被复活，因为finalize方法只会被调用一次（对象只有在这个状态才能被回收）</p>
<h3 id="判断对象回收的具体过程"><a href="#判断对象回收的具体过程" class="headerlink" title="判断对象回收的具体过程"></a><strong style="color:red">判断对象回收的具体过程</strong></h3><p>1、判断对象到 GC Roots 是否有引用链，没有则进行第一次标记</p>
<p>2、判断对象是否执行finalize方法</p>
<p>1）如果对象没有重写或者finalize方法已经被虚拟机调用过，则该对象判定为不可触及</p>
<p>2）如果对象重写了finalize方法，但是还没有执行过，那么对象将插入到F-Queue队列中，执行方法</p>
<p>3）GC将会对F-Queue队列中的对象进行第二次标记，如果对象在finalize方法中与引用链中的任何一个对象建立了联系，那么在第二次回收时，将会被移除队列。任何对象会再次出现没有引用的情况，直接变成不可触及的状态</p>
<br>

<h2 id="清除阶段：标记-清除算法"><a href="#清除阶段：标记-清除算法" class="headerlink" title="清除阶段：标记-清除算法"></a>清除阶段：标记-清除算法</h2><p><em><strong><strong style="color:red">基础且常见的垃圾收集算法</strong>，当堆中有效内存空间被耗尽的时候，就会进行STW，任何进行标记和清除</strong></em></p>
<p>标记：Collector从引用根节点进行遍历，标记所有被引用的对象，一般是在对象的Header中记录为可达的对象</p>
<p>清除：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在Header中没有标记为可达对象，则将其回收</p>
<img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/3.png" style="zoom: 90%;">

<p><em><strong style="color:red">缺点：</strong></em></p>
<p>1、效率不高</p>
<p>2、在进行GC的时候，需要STW</p>
<p>3、清理出来的空间内存是不连续的，产生内存碎片。需要维护一个空闲列表</p>
<p><strong style="color:red">注意：</strong><em><strong>此处清除的本质是将需要清除的对象地址保存在空闲的地址列表中，当下次有新对象加载时，判断垃圾的位置空间是否够，如果够，就进行存放</strong></em></p>
<br>

<h2 id="清除阶段：复制算法"><a href="#清除阶段：复制算法" class="headerlink" title="清除阶段：复制算法"></a>清除阶段：复制算法</h2><p><em><strong>将活着的内存空间分为两块,每次只使用其中一块,在垃圾回收时将正在.使用的内存中的存活对象复制到未被使用的内存块中,之后清除正在使用的内存块中的所有对象,交换两个内存的角色,最后完成垃圾回收。</strong></em></p>
<img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/4.png" style="zoom: 75%;">

<p><em><strong style="color:red">优点：</strong></em></p>
<p>1、没有标记和清除过程,，实现简单，运行高效</p>
<p>2、不会产生内存碎片，且对象完整不丢<br><em><strong style="color:red">缺点：</strong></em></p>
<p>1、浪费空间</p>
<p>2、对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，内存占用和时间开销大。</p>
<img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/5.png" style="zoom: 80%;">

<p><strong style="color:red">注意：如果垃圾对象很多，复制算法则不太理想。所以在 <em>新生代</em> 中使用复制算法是非常好的</strong></p>
<br>

<h2 id="清除阶段：标记-压缩算法"><a href="#清除阶段：标记-压缩算法" class="headerlink" title="清除阶段：标记-压缩算法"></a>清除阶段：标记-压缩算法</h2><img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/6.png" style="zoom: 80%;">

<p>1、从根节点开始标记所有被引用对象.</p>
<p>2、将所有的存活对象压缩到内存的一端,按顺序排放。</p>
<p>3、清理边界外所有的空间。</p>
<p><strong style="color:red"><em>优点：</em></strong></p>
<p>消除了标记一清除算法当中，内存区域分散的缺点，<em><strong>我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可</strong></em></p>
<p>消除了复制算法当中，内存减半的代价</p>
<p><em><strong style="color:red">缺点：</strong></em></p>
<p>从效率上来说，<em><strong>标记一整理算法要低于复制算法。</strong></em></p>
<p><em><strong>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址。移动过程中需要进行STW</strong></em></p>
<br>

<h2 id="总结清除阶段"><a href="#总结清除阶段" class="headerlink" title="总结清除阶段"></a>总结清除阶段</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">Mark-Sweep</th>
<th align="center">Mark-Compact</th>
<th align="center">Copying</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>速度</strong></td>
<td align="center">中等</td>
<td align="center">最慢</td>
<td align="center">最快</td>
</tr>
<tr>
<td align="center"><strong>空间开销</strong></td>
<td align="center">少（会存在堆积碎片）</td>
<td align="center">少（不堆积碎片）</td>
<td align="center">通常需要或对象的两倍大小（不堆积碎片）</td>
</tr>
<tr>
<td align="center"><strong>移动对象</strong></td>
<td align="center">多</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
</tbody></table>
<br>

<h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p><em><strong>分代算法是针对对象的不同特征，而使用合适的算法，实际上没有新算法产生，而是对前三个算法的实际应用，在新生代使用复制算法，老年代使用标记清除&#x2F;标记压缩算法清除</strong></em></p>
<p><em><strong>老年代中：</strong></em></p>
<p>Mark阶段的开销与存活对象的数量成正比</p>
<p>Sweep阶段的开销与所管理区域的大小成正相关</p>
<p>Compact阶段的开销与存活对象的数据成正比</p>
<br>

<h2 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h2><p><em><strong>为了避免STW影响用户体验或者系统的稳定性，让垃圾收集线程和应用程序线程交替执行，每次垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程，直到垃圾收集完成</strong></em></p>
<p><strong style="color:red">注意：增量收集算法基础还是传统的标记—清除和复制算法，只是通过对线程冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</strong></p>
<p><strong style="color:red">缺点：因为线程切换和上下文转换的小号，使得垃圾回收的总体成本上升，造成系统吞吐量下降</strong>、</p>
<br>

<h2 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h2><p><em><strong>一般堆空间越大，一次GC的时间就越长，GC产生的停顿就越长，为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据停顿时间去回收小区间，而不是整个堆空间，从而减少一个GC所产生的停顿。</strong></em></p>
<br>

<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="System-gc"><a href="#System-gc" class="headerlink" title="System.gc()"></a>System.gc()</h2><p><strong style="color:red">通过System.gc()或Runtime.getRuntime().gc()的调用，会显式触发Full GC同时对新生代和老年代进行回收（无法保证马上执行GC）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">SystemGCTest</span>();</span><br><span class="line">    System.gc();<span class="comment">//无法保证马上执行GC</span></span><br><span class="line">	<span class="comment">//System.runFinalization();//强制调用使用引用的对象的finalize()方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="built_in">super</span>.finalize();</span><br><span class="line">    System.out.println(<span class="string">&quot;SystemGCTest 重写了finalize()&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><p>1）java虚拟机堆内存设置不够</p>
<p><strong>2）代码中创建了大量对象，并且长时间不能被垃圾收集器收集（存在或被引用）</strong></p>
<p>3）在OOM之前，通常垃圾收集器会被触发，尽可能去清理出空间</p>
<br>

<h2 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h2><p><em><strong style="color:red">严格来说：只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄露</strong></em></p>
<p><em><strong style="color:red">实际上：一些操作会导致对象的生命周期变得很长甚至导致OOM，也可以叫做宽泛意义的内存泄露</strong></em></p>
<p>发生内存泄漏，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现0utOfMemory异常，导致程序崩溃。</p>
<br>

<p>比如：</p>
<p>单例模式的生命周期和应用程序是一样的，如果在单例程序中持有堆外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄露的产生</p>
<br>

<h2 id="STW"><a href="#STW" class="headerlink" title="STW"></a>STW</h2><p>在GC事件发生的过程中会产生应用程序的停顿。<em><strong>停顿产生时整个应用程序都会被暂停，没有任何响应</strong></em></p>
<p>所有GC都有这个事件，<em><strong>是由JVM在后台自动发起和完成的</strong></em></p>
<br>

<h2 id="程序的并行和并发"><a href="#程序的并行和并发" class="headerlink" title="程序的并行和并发"></a>程序的并行和并发</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>一个时间段中有几个程序都是在同一个处理器上运行，<em><strong>并发不是真正意义上的“同时进行”，只是CPU把一个时间段划分成几个时间片段，然后在这几个时间区间之间来回切换。</strong></em></p>
<img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/7.png" style="zoom: 70%;">

<br>

<h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行</p>
<p><em><strong>取决于CPU的核心数量</strong></em></p>
<img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/8.png" style="zoom: 80%;">

<br>

<h2 id="垃圾回收的并行和并发"><a href="#垃圾回收的并行和并发" class="headerlink" title="垃圾回收的并行和并发"></a>垃圾回收的并行和并发</h2><p><em><strong>并行：指多条垃圾收集线程并行工作,但此时用户线程仍处于等待状态</strong></em></p>
<p><em><strong>串行：单线程执行。如果内存不够，则程序暂停，启动JVM垃圾回收器进行垃圾回收。回收完，再启动程序的线程。</strong></em></p>
<img src="/2022/08/04/13-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/9.png" style="zoom: 80%;">

<p><em><strong>并发：用户线程和垃圾收集线程同时执行（不一定是并行的，可能会交替执行）垃圾回收线程在执行时不会停顿用户程序的运行</strong></em></p>
<br>

<h2 id="安全点与安全区域"><a href="#安全点与安全区域" class="headerlink" title="安全点与安全区域"></a>安全点与安全区域</h2><h3 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h3><p><strong style="color:red">程序执行时只有在特定位置才能停顿下来开始GC，这些位置被称为安全点</strong></p>
<p>安全点如果太少可能会导致GC等待的时间太长，如果太频繁可能导致运行时的性能问题。</p>
<p><em><strong>如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来？</strong></em> （*）</p>
<ul>
<li><p>抢先式中断（没有虚拟机采用）：中断所有线程，如果还有线程不在安全点，就恢复线程，让线程跑到安全点</p>
</li>
<li><p>主动式中断：设置一个中断标志，各个线程运行到Safe Point的时候主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起</p>
</li>
</ul>
<br>

<h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><p>在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始GC都是安全的。</p>
<br>

<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a><strong style="color:red">强引用</strong></h3><p>最传统的“引用”的定义，是<em><strong>指在程序代码之中普遍存在的引用赋值</strong></em>。即<em><strong>类似“0bject obj&#x3D;new object( )”这种引用关系。</strong></em>只要强引用关系还存在，<em><strong>垃圾收集器就永远不会回收掉被引用的对象。（强引用可以直接访问目标对象）</strong></em></p>
<p><code>StringBuffer str = new StringBuffer(&quot;hello&quot;);</code></p>
<p><strong style="color:red">局部变量str指向Stringbuffer实例所在堆空间，通过str可操作该实例，那么str就是StringBuffer实例的强引用</strong></p>
<br>

<h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a><strong style="color:red">软引用</strong></h3><p><em><strong>在系统将要发生内存溢出之前，</strong></em>将会把这些对象列入回收范围之中进行第<em><strong>二次回收</strong></em>。如果这次<em><strong>回收后还没有足够的内存，才会抛出内存溢出异常内存不足即回收</strong></em></p>
<p>内存足够时，不会回收软引用的可达对象；内存不足时，会回收软引用的可达对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();	<span class="comment">//声明强引用</span></span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="literal">null</span>;	<span class="comment">//销毁强引用</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a><strong style="color:red">弱引用</strong></h3><p><em><strong>只被弱引用关联的对象只能生存到下一次垃圾收集之前。</strong></em>当垃圾收集器工作时，无论内存空间是否足够，都会回收掉被弱引用关联的对象。但是由于垃圾回收器的线程通常优先级很低，因此不一定能很快发现持有弱引用的对象，这种情况下，弱引用对象可以存在较长时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();	<span class="comment">//声明强引用</span></span><br><span class="line">WeakReference&lt;Object&gt; wr = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="literal">null</span>;	<span class="comment">//销毁强引用</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a><strong style="color:red">虚引用</strong></h3><p>一个对象是否有虛引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象的实例。<em><strong>为一个对象设置虛引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知（跟踪垃圾回收过程）</strong></em></p>
<blockquote>
<p>虚引用必须和引用队列一起使用。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虛引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">object</span>();</span><br><span class="line">ReferenceQueuephantomQueue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>( ) ;</span><br><span class="line">PhantomReference&lt;object&gt; pf = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;object&gt;(obj, phantomQueue); </span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="终结器引用（-）"><a href="#终结器引用（-）" class="headerlink" title="终结器引用（*）"></a><strong style="color:green">终结器引用（*）</strong></h3><p>用以实现对象的finalize方法，无需手动编码，内部配合引用队列使用。在GC时，终结器引用入队。由Finalize线程通过终结器引用找到被引用对象并调用它的finalize方法，第二次GC时才能回收被引用对象</p>
<br>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>14-垃圾回收器</title>
    <url>/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="GC分类"><a href="#GC分类" class="headerlink" title="GC分类"></a>GC分类</h1><p>按线程数：分为串行垃圾回收器和并行垃圾回收器</p>
<p>按工作模式：分为并发式垃圾回收器和独占式垃圾回收器</p>
<p>按碎片处理方式：分为</p>
<p><em><strong>1、压缩式垃圾回收器：在回收完成后，对存活对象进行压缩整理，清除回收后的碎片（再分配对象空间的使用：指针碰撞）</strong></em></p>
<p><em><strong>2、非压缩式垃圾回收器（再分配对象空间的使用：空闲列表）</strong></em></p>
<p>按工作的内存区间：分为年轻代垃圾回收器和老年代垃圾回收器</p>
<br>

<h1 id="GC性能指标"><a href="#GC性能指标" class="headerlink" title="GC性能指标"></a>GC性能指标</h1><p><em><strong style="color:red">吞吐量：运行用户代码·的时间占总运行时间的比例</strong>（总运行时间 &#x3D; 程序运行时间 + 内存回收时间）</em></p>
<p><em><strong style="color:red">吞吐量优先，意味着在单位时间内，STW的时间最短</strong></em></p>
<p>垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例</p>
<p><em><strong style="color:red">暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间（STW）</strong></em></p>
<p><em><strong style="color:red">暂停时间优先，意味着尽可能让单次STW的时间最短</strong></em></p>
<p>收集频率：相对于应用程序的执行，收集操作发生的频率</p>
<p><em><strong style="color:red">内存占用：Java堆区所占的内存大小</strong></em></p>
<p>快速：一个对象从诞生到被回收所经历的时间</p>
<p><em><strong style="color:red">注意：现在的标准为在最大吞吐量优先的情况下，降低停顿时间</strong></em></p>
<br>

<h1 id="回收器概述"><a href="#回收器概述" class="headerlink" title="回收器概述"></a>回收器概述</h1><p>新生代收集器：Serial GC、ParNew GC、Parallel Scavenge GC<br>老年代收集器：Serial 0ld GC、 Parallel 0ld GC、 CMS GC<br>整堆收集器：G1 GC</p>
<p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/1.png"></p>
<p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/2.png"></p>
<br>

<p><em><strong>GC发展阶段：</strong></em><br><em><strong>Seria1&#x3D;&gt;Para11e1(并行)&#x3D;&gt;CMS(并发)&#x3D;&gt;G1&#x3D;&gt;ZGC</strong></em></p>
<p>查看命令行相关参数（包含使用的垃圾收集器）：<code>-xx:+PrintCommandLineFlags</code></p>
<p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/3.png"></p>
<br>

<h1 id="Serial，SerialOld-回收器"><a href="#Serial，SerialOld-回收器" class="headerlink" title="Serial，SerialOld 回收器"></a>Serial，SerialOld 回收器</h1><h2 id="Serial：串行"><a href="#Serial：串行" class="headerlink" title="Serial：串行"></a>Serial：串行</h2><p>HotSpot虚拟机Client模式下的默认<strong>新生代</strong>垃圾收集器（最基本，最悠久）</p>
<p><em><strong style="color:red">采用复制算法，串行回收和STW机制方法执行内存回收</strong></em></p>
<p>优势：简单，高效（没与其他收集器的单线程相比，没有线程交互的开销）</p>
<br>

<h2 id="Serial-Old：串行"><a href="#Serial-Old：串行" class="headerlink" title="Serial Old：串行"></a>Serial Old：串行</h2><p>Serial 0ld是运行在Client模式下默认的老年代垃圾回收器</p>
<p><em><strong style="color:red">Serial 0ld收集器同样采用了串行回收和STW机制，只不过内存回收算法使用的是标记一压缩算法</strong></em></p>
<p><strong>在Server模式下的用途：</strong></p>
<p>1、与新生代的Parallel Scavenge配合使用</p>
<p><a href="https://www.hzzzzzy.icu/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/2.png">2、作为老年代CMS收集器的后备垃圾收集方法</a></p>
<p><em><strong style="color:red">单线程回收：使用一个cpu或一条线程去完成垃圾收集工作而且必须暂停其他所有的工作线程</strong></em></p>
<p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/4.png"></p>
<p><em><strong style="color:red">设置Serial垃圾回收器</strong></em></p>
<p>使用 <code>-XX:+UseSerialGC</code> 参数可以指定年轻代和老年代都使用串行收集器，<strong>等价于新生代用Serial GC，且老年代用Serial 0ld GC</strong></p>
<br>

<h1 id="Parallel-New：并行"><a href="#Parallel-New：并行" class="headerlink" title="Parallel New：并行"></a>Parallel New：并行</h1><p>ParNew收集器是Serial收集器的多线程版本，除了采用并行回收的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。<strong style="color:red">ParNew收集器在年轻代中同样也是采用复制算法、STW机制</strong>。<a href="https://www.hzzzzzy.icu/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/2.png">目前只有ParNew GC能与CMS收集器配合工作</a></p>
<p><em><strong style="color:red">设置ParNew垃圾回收器</strong></em></p>
<p><code>-XX:+UseParNewGC</code>：指定使用ParNew收集器执行内存回收任务。它表示<strong>年轻代使用并行收集器， 不影响老年代</strong></p>
<p><code>-XX:ParallelGCThreads</code>：<strong>限制线程数量，默认开启和CPU数据相同的线程数</strong></p>
<p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/5.png"></p>
<br>

<h1 id="Parallel-Scavenge-x2F-ParallelOld：吞吐量优先"><a href="#Parallel-Scavenge-x2F-ParallelOld：吞吐量优先" class="headerlink" title="Parallel Scavenge&#x2F;ParallelOld：吞吐量优先"></a><em><strong style="color:red">Parallel Scavenge&#x2F;ParallelOld：吞吐量优先</strong></em></h1><h2 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h2><p>HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，还用到Parallel Scavenge。该收集器同样也 <em><strong>采用了复制算法、并行回收和STW机制。在Java8中，默认是此垃圾收集器</strong></em></p>
<p><em><strong style="color:red">Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量，自适应调节策略是Parallel Scavenge与ParNew一个重要区别</strong></em></p>
<p>高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，<strong>主要适合在后台运算而不需要太多交互的任务。常见在服务器环境中使用。</strong>例如执行批量处理、订单处理、工资支付、科学计算</p>
<br>

<h2 id="Parallel-0ld"><a href="#Parallel-0ld" class="headerlink" title="Parallel 0ld"></a>Parallel 0ld</h2><p><em><strong style="color:red">Parallel 0ld收集器采用了标记一压缩算法，但同样也是基于并行回收和STW机制</strong></em></p>
<p>Parallel收集器在JDK1.6时提供了用于执行老年代垃圾收集的 Parallel 0ld收集器，用来代替老年代的Serial 0ld收集器</p>
<p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/6.png"></p>
<br>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p><code>-XX:+UseParallelGC</code>：手动指定年轻代使用Parallel并行收集器执行内存回收任务</p>
<p><code>-XX:+UseParallelOldGC</code>：手动指定老年代都是使用并行回收收集器</p>
<p><em><strong>默认jdk8是开启的。上面两个参数，默认开启一个，另一个也会被开启。</strong></em></p>
<p><code>-XX:ParallelGCThreads</code>：<em><strong>设置年轻代并行收集器的线程数，一般最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能</strong></em></p>
<p><code>-XX:MaxGCPauseMillis</code>：设置垃圾收集器最大停顿时间(即STW的时间)</p>
<p><code>-XX:+UseAdaptiveSizePolicy</code>：设置Parallel Scavenge收集器具有自适应调节策略</p>
<blockquote>
<p><strong>在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点</strong><br>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量和停顿时间，让虚拟机自己完成调优工作)</p>
</blockquote>
<br>

<h1 id="CMS：低延迟"><a href="#CMS：低延迟" class="headerlink" title="CMS：低延迟"></a>CMS：低延迟</h1><p><em><strong style="color:red">HotSpot虚拟机中第一款真正意义上的并发收集器。第一次实现了让垃圾收集线程与用户线程同时工作</strong>，</em> <strong>也采用标记-清除算法和STW机制。</strong>在G1出现之前，CMS使用还是非常广泛的</p>
<p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/7.png"></p>
<br>

<h2 id="初始标记"><a href="#初始标记" class="headerlink" title="初始标记"></a><em>初始标记</em></h2><p><em><strong style="color:red">标记出和GCRoots能直接关联到的对象，有STW现象（暂时时间非常短）</strong></em></p>
<br>

<h2 id="并发标记阶段"><a href="#并发标记阶段" class="headerlink" title="并发标记阶段"></a><em>并发标记阶段</em></h2><p><em><strong style="color:red">从GC Roots的直接关联对象开始遍历整个对象图的过程</strong><em>，这个过程耗时较长但是<strong>不用STW</strong>。**可以与垃圾收集线程一起并发运行</em></em></p>
<br>

<h2 id="重新标记阶段"><a href="#重新标记阶段" class="headerlink" title="重新标记阶段"></a><em>重新标记阶段</em></h2><p><strong>有些对象可能开始是垃圾，在并发标记阶段，由于用户线程的影响，导致不是垃圾了，这里需要重新标记的是这部分对象，<em>这个阶段的STW通常会比初始标记阶段稍长一些，但远比并发标记阶段的时间短</em></strong></p>
<p><em><strong style="color:red">注意：重新标记是对已标记过的垃圾进行检测，此时会产生浮动垃圾</strong></em></p>
<br>

<h2 id="并发清除"><a href="#并发清除" class="headerlink" title="并发清除"></a>并发清除</h2><p><em><strong style="color:red">清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。</strong></em> <strong>由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</strong></p>
<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p><strong>在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。</strong>因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是<strong>当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。</strong></p>
<p>要是<strong>CMS运行期间预留的内存无法满足程序需要</strong>，就会出现一次“Concurrent Mode Failure”失败，这时<strong>虚拟机将启动后备预案：临时启用Serial 0ld收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</strong></p>
</blockquote>
<p><em><strong style="color:red">CMS收集器的垃圾收集算法采用的是标记一清除算法，这意味着不可避免地将会产生一些内存碎片。 那么CMS在为新对象分配内存空间时，将无法使用指针碰撞，而只能够选择空闲列表执行内存分配。</strong></em></p>
<br>

<blockquote>
<p><em><strong>最小化使用内存和并行开销：Serial GC（young）+ Serial Old GC（old）</strong></em></p>
<p><em><strong>最大化应用程序吞吐量：Parallel GC（young）+ Parallel Old GC（old）</strong></em></p>
<p><em><strong>最小化GC中断或停顿时间：Parallel New GC（young）+ CMS GC（old）</strong></em></p>
</blockquote>
<br>

<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h3><p><strong>1）低延迟（最耗费时间的并发标记和并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的</strong>）</p>
<p><em>2）并发收集</em></p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p><strong>1）产生内存碎片</strong></p>
<p><strong>2）CMS收集器对CPU资源很敏感（<a href="https://www.hzzzzzy.icu/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/7.png">并发阶段，占用一部分线程，吞吐量降低</a>）</strong></p>
<p><strong>3）CMS收集器无法处理浮动垃圾</strong></p>
<blockquote>
<p>在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行GC时释放这些之前未被回收的内存空间</p>
</blockquote>
<br>

<h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p><code> -XX:+UseConcMarkSweepGC</code>：手动指定使用CMS收集器执行内存回收任务（老年代）<br><em>（开启该参数后会自动将<code>-XX:+UseParNewGc</code>打开。即: ParNew (Young区用) +CMS (0ld区用) +Serial 0ld的组合）</em></p>
<p><code>-XX:CMSlnitiatingOccupanyFraction</code>：设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收</p>
<p><strong>JDK5以前默认为68，即当老年代的空间使用率达到68%时，会执行一次CMS 回收。JDK6及以上默认为92%</strong></p>
<p><strong>通过该选项便可以有效降低Full GC的执行次数</strong></p>
<p><code>-XX:+UseCMSCompactAtFullCollection</code>：用于指定在执行完Full GC后对内存空间进行压缩整理，以此避免内存碎片的产生</p>
<p><code>-XX:CMSFullGCsBeforeCompaction</code>：设置在执行多少次Full GC后对内存空间进行压缩整理</p>
<p><code>-XX:ParallelCMSThreads</code>：设置CMS的线程数量</p>
<br>

<h1 id="G1：区域化分代式"><a href="#G1：区域化分代式" class="headerlink" title="G1：区域化分代式"></a><em><strong style="color:red">G1：区域化分代式</strong></em></h1><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><p><em><strong style="color:red">并行性：</strong>G1在回收期间，可以有多个GC线程同时工作（此时用户线程STW）</em></p>
<p><em><strong style="color:red">并发性：</strong>G1拥有与应用程序交替执行的能力， 部分工作可以和应用程序同时执行，因此，不会在整个回收阶段发生完全阻塞应用程序的情况</em></p>
<br>

<h2 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h2><p><em><strong style="color:red">G1仍然属于分代型垃圾回收器。它区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再有固定大小和固定数量</strong></em></p>
<p><strong>将堆空间分为若干个区域（region），这些区域中包含了逻辑上的年轻代和老年代。</strong></p>
<img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/8.png" style="zoom:60%;">

<br>

<h2 id="空间整合"><a href="#空间整合" class="headerlink" title="空间整合"></a>空间整合</h2><p><em><strong>G1将内存划分为一个个region，内存的回收以region为单位，region之间是复制算法。整体上可看作标记-压缩算法，两种算法都可以避免内存碎片。而且当分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</strong></em></p>
<br>

<h2 id="可预测的停顿时间模型"><a href="#可预测的停顿时间模型" class="headerlink" title="可预测的停顿时间模型"></a><strong style="color:red">可预测的停顿时间模型</strong></h2><p><em><strong>软实时（soft real-time）</strong></em></p>
<p>G1能建立可预测的停顿时间模型，让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒，可以通过参数<code>-XX:MaxGCPauseMillis</code>进行设置</p>
<p><strong>由于分区的原因，G1可以只选取部分区域进行内存回收，缩小了回收的范围，对于全局停顿情况的发生也能得到较好的控制。</strong></p>
<p><strong>G1 跟踪各个Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</strong></p>
<p><strong style="color:red">注意：在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间</strong></p>
<br>

<h2 id="参数设置-1"><a href="#参数设置-1" class="headerlink" title="参数设置"></a>参数设置</h2><p><code>-XX:+UseG1GC</code>：手动指定使用G1收集器执行内存回收任务</p>
<p><code>-XX:G1HeapRegionSize</code>：设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1&#x2F;2000</p>
<p><code>-XX:MaxGCPauseMillis</code>：<strong>设置期望达到的最大GC停顿时间指标（JVM会尽力实现,但不保证达到）</strong>默认200ms**(如果这个值设置很小，如20ms，那么它收集的region会少，这样长时间后，堆内存会满。产生FullGC从而出现STW)**</p>
<p><code>-XX:ParallelGCThread</code>：设置STW时GC线程数的值。最多设置为8（垃圾回收线程）</p>
<p><code>-XX:ConcGCThreads</code>：设置并发标记的线程数。将n设置为并行垃圾回收线程数的1&#x2F;4左右</p>
<p><code>-XX:InitiatingHeapOccupancyPercent</code>：设置触发并发GC周期的Java堆占用率阈值。超过此值,就触发GC（默认45）</p>
<blockquote>
<ol>
<li>开启G1垃圾收集器</li>
<li>设置堆的最大内存</li>
<li>设置最大的停顿时间</li>
</ol>
</blockquote>
<br>

<h2 id="region"><a href="#region" class="headerlink" title="region"></a><strong style="color:red">region</strong></h2><p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/9.png"></p>
<p>1、<strong>使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小为2的N次幂。可以通过<code>-XX:G1HeapRegionSize</code>设定。<strong style="color:red">所有的Region大小相同，且在JVM生命周期内不会被改变</strong></strong></p>
<p><em>2、一个region 有可能属于任何一块内存区域。但是一个region只可能属于一个角色。</em></p>
<p><strong style="color:red">3、Humongous内存区域（图中的H块）主要用于存储大对象，如果超过1. 5个region，就放到Humongous区</strong></p>
<blockquote>
<p>对于堆中的大对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象，就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个<strong style="color:red">Humongous区,它用来专门存放大对象。如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。为了能找到连续的H区，可以启动Full GC。</strong>G1的大多数行为都把H区作为老年代的一部分来看待</p>
</blockquote>
<br>

<h2 id="记忆集"><a href="#记忆集" class="headerlink" title="记忆集"></a>记忆集</h2><blockquote>
<p>一个region中的对象可能被其他任意region中对象引用，因此在判断对象是否存活的时候，需要扫描整个堆才能保证准确（出现STW）。所以使用每一个region对应一个记忆集（Remembered Set）来避免全局扫描</p>
</blockquote>
<p><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/11.png"></p>
<p><em><strong>每次Reference类型数据写操作时，都会产生一个写屏障（Write Barrier）暂时中止操作，然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region （其他收集器：检查老年代对象是否引用了新生代对象）</strong></em><br><em><strong>如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中<br>当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set</strong></em></p>
<br>

<h2 id="G1回收过程"><a href="#G1回收过程" class="headerlink" title="G1回收过程"></a><strong style="color:red">G1回收过程</strong></h2><p><em><strong>1、YoungGC</strong></em></p>
<p><em><strong>2、老年代并发标记过程</strong></em></p>
<p><em><strong>3、混合回收</strong></em></p>
<p><em><strong>（作为一种失败保护机制，Full GC还是存在的）</strong></em></p>
<img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/10.png" style="zoom:67%;">

<br>

<h3 id="年轻代GC"><a href="#年轻代GC" class="headerlink" title="年轻代GC"></a>年轻代GC</h3><blockquote>
<p>当Eden空间耗尽时,G1会启动一次年轻代垃圾回收过程<br>年轻代垃圾回收只会回收Eden区和Survivor区</p>
</blockquote>
<img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/12.png" style="zoom:67%;">

<p><strong style="color:red">1、扫描根</strong>（根引用连同RSet记录的外部引用作为扫描存活对象的入口）</p>
<p><strong style="color:red">2、更新RSet</strong>（ 此阶段完成后,RSet可以准确的反映老年代对所在的内存分段中对象的引用）</p>
<p><strong style="color:red">3、处理RSet</strong>（t:识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象）</p>
<p><strong style="color:red">4、复制对象</strong>（对象树被遍历，Eden区内存中存活的对象复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象如果年龄未达阈值，年龄+1，达到阈值则被复制到Old区中空的内存分段。如果Survivor空间不够，Eden的部分数据会直接晋升到Old区）</p>
<p><strong style="color:red">5、处理引用</strong></p>
<br>

<h3 id="并发标记过程"><a href="#并发标记过程" class="headerlink" title="并发标记过程"></a>并发标记过程</h3><p><strong style="color:red">1、初始标记阶段</strong>：标记从根节点直接可达的对象（STW+一次YoungGC）</p>
<p><strong style="color:red">2、根区域扫描</strong>：扫描Survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在young GC之前完成（YoungGC时，会动Survivor区，所以这一过程必须在YoungGC之前完成）</p>
<p><strong style="color:red">3、并发标记</strong>：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被YoungGC中断。在并发标记阶段,若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）</p>
<p><strong style="color:red">4、再次标记</strong>：由于应用程序持续进行，需要修正上一次的标记结果（STW）</p>
<p><strong style="color:red">5、独占清理</strong>：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域（STW，不会实际上去做垃圾的收集）</p>
<p><strong style="color:red">6、并发清理阶段</strong>：识别并清理完全空闲的区域</p>
<br>

<h3 id="混合回收"><a href="#混合回收" class="headerlink" title="混合回收"></a>混合回收</h3><img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/13.png" style="zoom:70%;">

<blockquote>
<p>当越来越多对象晋升到老年代时，为避免堆内存耗尽，虚拟机会触发一个混合的垃圾收集器</p>
</blockquote>
<p><strong style="color:red">混合回收除了回收整个Young region外，还会回收一部分的Old Region（可以选择哪些Old region被回收，从而对整个垃圾回收的耗时进行控制）</strong></p>
<br>

<h3 id="G1优化建议"><a href="#G1优化建议" class="headerlink" title="G1优化建议"></a>G1优化建议</h3><p>1、年轻代发送GC频率高，避免使用<code>-Xmn</code>或<code>-XX:NewRatio</code></p>
<p>2、暂停时间目标不要太过严苛（影响吞吐量）</p>
<br>

<h1 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h1><p>-XX:+PrintGC：输出GC日志</p>
<p>-XX:+PrintGCDetails：输出GC详细日志</p>
<p>-XX:+PrintGCTimeStamps：输出GC时间戳（以基准时间形式）</p>
<p>-XX:+PrintGCDateStamps：输出GC时间戳（以日期的形式）</p>
<p>-XX:+PrintHeapAtGC：在GC前后打印堆信息</p>
<p>-Xloggc:..&#x2F;logs&#x2F;gc.log：日志文件的输出路径</p>
<img src="/2022/08/04/14-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/14.png" style="zoom:100%;">
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>15-类的生命周期（详细）</title>
    <url>/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><em><strong>从class文件到加载到内存中的类,到类卸载出内存为止,它的整个生命周期包括如下7个阶段</strong></em></p>
<p><strong style="color:red">注意：基本数据类型由虚拟机预先定义，引用数据类型需要进行类的加载</strong></p>
<p><img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/1.png"></p>
<br>

<p><em><strong>程序使用类的过程</strong></em></p>
<img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/2.png" style="zoom: 60%;">

<br>

<h1 id="1、加载"><a href="#1、加载" class="headerlink" title="1、加载"></a>1、加载</h1><p><em><strong style="color:red">将类的.class文件中的二进制数据读取到内存中，存放在运行时数据区的方法区中，并在内存中创建一个Java类原型（类模板对象）</strong></em></p>
<blockquote>
<p>类模板对象：<strong>java类在JVM中的一个快照。JVM从字节码文件中解析出常量池、类字段、类方法等存储在类模板中</strong>，如此JVM就可以在运行期通过类模板获取java中的任意信息，能够对java类的成员变量进行遍历，也能对方法进行调用<strong>（反射机制基于这一基础）</strong></p>
</blockquote>
<br>

<h2 id="加载的步骤"><a href="#加载的步骤" class="headerlink" title="加载的步骤"></a>加载的步骤</h2><p><em><strong style="color:red">1、通过类的全名，获取类的二进制数据流</strong></em></p>
<img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/4.png" style="zoom: 70%;">

<p><em><strong style="color:red">2、解析类的二进制数据流为方法区内的数据结构（java类模型）</strong></em></p>
<p><em><strong style="color:red">3、创建<code>java.lang.Class</code>类的实例（作为方法区这个类的各个数据的访问入口）</strong></em></p>
<br>

<h2 id="类模型与Class实例位置"><a href="#类模型与Class实例位置" class="headerlink" title="类模型与Class实例位置"></a>类模型与Class实例位置</h2><p><strong>类模型的位置：加载的类在JVM中创建相应的类结构，类结构存储在方法区</strong>（1.8之前：永久代；1.8之后：元空间）</p>
<p><strong>Class实例的位置</strong>： .class文件加载后，在堆中创建一个Java.lang.Class对象，<strong>封装类位于方法区的数据结构</strong></p>
<img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/3.png" style="zoom: 50%;">

<br>

<h2 id="数组类加载"><a href="#数组类加载" class="headerlink" title="数组类加载"></a>数组类加载</h2><p><em><strong>数组类本身并不是由类加载器负责创建，而是JVM在运行时根据需要而直接创建的，但数组的元素类型仍然需要依靠类加载器去创建</strong></em></p>
<p>1、数组元素类型是引用类型，遵循定义的加载过程递归加载和创建数组的元素类型</p>
<p>2、JVM使用指定元素类型和数组维度来创建新的数组类</p>
<p><em><strong>数组元素类型是引用类型，数据类的可访问性由元素类型决定，如果为基本数据类型，可访问性为pubilc</strong></em></p>
<br>

<h1 id="2、链接"><a href="#2、链接" class="headerlink" title="2、链接"></a>2、链接</h1><h2 id="1）验证"><a href="#1）验证" class="headerlink" title="1）验证"></a>1）验证</h2><p><strong style="color:red">确保Class文件的字节流中包含信息符合当前虚拟机要求,保证被加载类的正确性</strong></p>
<img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/5.png" style="zoom: 50%;">

<h3 id="格式检查"><a href="#格式检查" class="headerlink" title="格式检查"></a>格式检查</h3><p><strong>1、是否以魔术oxCAFEBABE开头</strong>，主版本和副版本是否在当前Java虚拟机的支持范围内，数据中每一项是否都拥有正确的长度等</p>
<p><strong style="color:red">2、格式检查与类的加载阶段一起执行，验证通过后，类加载器才会成功将类的二进制信息加载到方法区中</strong></p>
<p><strong style="color:red">3、格式检查之外的验证操作会在方法区中进行</strong></p>
<h3 id="语义检查"><a href="#语义检查" class="headerlink" title="语义检查"></a>语义检查</h3><p>java虚拟机会进行语义的检查，语义上不通过的，虚拟机也不会给予验证通过</p>
<h3 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h3><p>验证过程中最复杂的一个过程，通过对字节码流的分析，判断字节码是否可以被正确地执行</p>
<p><strong>栈映射帧（StackMapTbale）就是在这个阶段实现的，用于检测在特定的字节码处，局部变量表和操作数栈是否有正确的数据类型（尽可能检查出可以预知的问题，不能100%）</strong></p>
<h3 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h3><p><strong>Class文件在其常量池会通过字符串来记录自己将要使用的其他类或方法</strong>，因此在验证阶段，虚拟机就会检查这些类或方法确实是存在的（类没找到：NoClassDefFoundError，方法没找到：NoSuchMethodError）</p>
<br>

<h2 id="2）准备"><a href="#2）准备" class="headerlink" title="2）准备"></a>2）准备</h2><p><strong style="color:red">为类变量分配内存并且设置该类变量的默认初始化值</strong></p>
<blockquote>
<p><em><strong>非final修饰的变量，解析环节进行默认初始化赋值</strong></em></p>
<p><em><strong>这里不包含用final修饰的static，final在编译时就进行分配了，准备阶段会显式赋值</strong></em></p>
<p><em><strong>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量会随着对象一起分配到Java堆</strong></em></p>
</blockquote>
<img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/8.png" style="zoom: 80%;">

<img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/7.png" style="zoom: 80%;">

<p><strong style="color:red">注意：Java并不支持boolean类型，对于boolean类型，内部实现是int，由于int的默认值是0，故对应boolean的默认值就是false</strong><br><img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/6.png" style="zoom: 80%;"></p>
<br>

<h2 id="3）解析"><a href="#3）解析" class="headerlink" title="3）解析"></a>3）解析</h2><p>将常量池中的符号引号转换为直接引用的过程（将类、接口、字段和方法的符号引用转为直接引用）</p>
<p>1、实际上，解析操作往往会伴随着JVM在执行完初始化之后再执行</p>
<p>2、直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄（与虚拟机实现的内存布局相关）</p>
<p>3、符号引用是以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到了内存中）</p>
<p>4、主要解析动作针对类或接口、字段、类方法、接口方法、方法类型等</p>
<br>

<h1 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h1><p><strong style="color:red">为类变量赋予正确的初始化值</strong></p>
<p><strong style="color:red">初始化阶段就是执行类构造器方法&lt; clinit &gt;()的过程。</strong>此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来</p>
<p><em><strong>若该类具有父类，Jvm会保证子类的<clinit>() 执行前，父类的&lt; clinit &gt;() 已经执行完成。clinit 不同于类的构造方法(init) （由父及子，静态先行）</clinit></strong></em></p>
<h2 id="Java编译器不会在以下情况下生成clinit方法"><a href="#Java编译器不会在以下情况下生成clinit方法" class="headerlink" title="Java编译器不会在以下情况下生成clinit方法"></a>Java编译器不会在以下情况下生成clinit方法</h2><p>一个类中并没有声明任何的类变量，也没有静态代码块时</p>
<p>一个类中声明类变量，但是没有明确使用类变量的初始化语句以及静态代码块来执行初始化操作时</p>
<p>一个类中包含static final修饰的基本数据类型的字段，这些类字段初始化语句采用编译时常量表达式 </p>
<p>(如果这个static final 不是通过方法或者构造器,则在链接阶段)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitializationTest1</span> &#123;</span><br><span class="line">    <span class="comment">//场景1：对应非静态的字段,不管是否进行了显式赋值,都不会生成&lt;clinit&gt;()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//场景2：静态的字段,没有显式的赋值,不会生成&lt;clinit&gt;()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> num1;</span><br><span class="line">    <span class="comment">//场景3：比如对于声明为static final的基本数据类型的字段,不管是否进行了显式赋值,都不会生成&lt;clinit&gt;()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="static-final进行修饰"><a href="#static-final进行修饰" class="headerlink" title="static+final进行修饰"></a>static+final进行修饰</h2><p>1、在链接阶段的准备环节赋值</p>
<p>2、在初始化阶段赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *1. 对于基本数据类型的字段来说,如果使用static final修饰,则显式赋值(直接赋值常量,而非调用方法)通常是在链接阶段的准备环节进行</span></span><br><span class="line"><span class="comment"> * 2. 对于String来说,如果使用字面量的方式赋值,使用static final修饰的话,则显式赋值通常是在链接阶段的准备环节进行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在初始化阶段&lt;clinit&gt;()中赋值的情况:</span></span><br><span class="line"><span class="comment"> * 排除上述的在准备环节赋值的情况之外的情况。</span></span><br><span class="line"><span class="comment"> * 最终结论:使用static + final修饰,且显示赋值中不涉及到方法或构造器调用的基本数据类型或String类型的显式赋值,是在链接阶段的准备环节进行。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitializationTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INT_CONSTANT</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//在链接阶段的准备环节赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">INTEGER_CONSTANT1</span> <span class="operator">=</span> Integer.valueOf(<span class="number">100</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">INTEGER_CONSTANT2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1000</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s0</span> <span class="operator">=</span> <span class="string">&quot;helloworld0&quot;</span>;<span class="comment">//在链接阶段的准备环节赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;helloworld1&quot;</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;helloworld2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUM1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="client线程安全性问题"><a href="#client线程安全性问题" class="headerlink" title="client线程安全性问题"></a>client线程安全性问题</h2><blockquote>
<p>虚拟机会保证一个类的clinit方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的方法，其他线程都需要阻塞等待，直到活动线程执行clinit方法结束</p>
</blockquote>
<p><strong style="color:red">如果在一个类的clinit方法中有耗时很长的操作，就可能造成多个线程阻塞，引发死锁。</strong></p>
<br>

<h1 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h1><p>使用参数<code>-XX:+TraceClassLoading</code>：可以追踪类的加载信息并打印出来</p>
<h2 id="主动使用"><a href="#主动使用" class="headerlink" title="主动使用"></a>主动使用</h2><p><strong style="color:red">Class只有在必须要首次使用的时候才会被装载。一个类或接口在初次主动使用前，必须要进行初始化。</strong></p>
<p><strong>1、创建一个类的实例时（使用new关键字，通过反射、克隆，反序列化）即使用字节码invokestatic指令</strong></p>
<p><strong>2、使用当前类的静态方法，使用getstatic或者putstatic指令（对应访问变量、赋值变量操作）</strong></p>
<p><strong>3、使用类、接口的静态字段时（final修饰特殊考虑）</strong></p>
<p><strong>4、当使用java.lang.reflect包中的方法反射类的方法时。比如：Class.forName(“xxx.xxx.xxx.test”)</strong></p>
<p><strong>5、当初始化子类时，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</strong></p>
<p>6、如果一个接口定义了default方法，那么直接实现或者间接实现该接口的类的初始化，<strong style="color:red">该接口要在其之前被初始化。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;System.out.println(<span class="string">&quot;Father类的初始化过程&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> <span class="keyword">implements</span> <span class="title class_">CompareB</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;System.out.println(<span class="string">&quot;Son类的初始化过程&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CompareA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">        &#123;System.out.println(<span class="string">&quot;CompareA的初始化&quot;</span>);&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span></span><br><span class="line">    &#123;System.out.println(<span class="string">&quot;你好！&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(Son.num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>7、当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。</strong></p>
<p><strong>8、当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</strong></p>
<p><strong style="color:red">注意： 初始化一个类的子类这条规则，不适用于接口，即：初始化一个类的子类，会先初始化它的父类，但是不一定会初始化它的接口。只有当首次使用该接口的静态变量时，才会初始化。</strong></p>
<br>

<h2 id="被动使用"><a href="#被动使用" class="headerlink" title="被动使用"></a>被动使用</h2><p><strong style="color:red">被动使用不会引起类的初始化，即不会调用clinit方法</strong></p>
<p><strong>1、当访问一个静态字段时，只有真正声明这个字段的类才会被初始化。</strong></p>
<p><strong>2、当通过子类引用父类的静态变量，不会导致子类初始化</strong></p>
<p><strong>3、通过数组定义类引用，不会触发此类的初始化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    Parent[] parents = <span class="keyword">new</span> <span class="title class_">Parent</span>[<span class="number">10</span>];</span><br><span class="line">    System.out.println(parents.getClass());	<span class="comment">//不进行初始化</span></span><br><span class="line">    System.out.println(parents.getClass().getSuperclass());	<span class="comment">//不进行初始化</span></span><br><span class="line">    parents[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Parent</span>();	<span class="comment">//进行Parent的初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;System.out.println(<span class="string">&quot;Parent的初始化过程&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;System.out.println(<span class="string">&quot;Child的初始化过程&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、引用常量不会触发此类或接口的初始化。因为常量在链接阶段就已经被显式赋值了</strong></p>
<p><strong>5、调用ClassLoader类的loadClass()方法加载一个类，并不是对类的主动使用，不会导致类的初始化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;xxx.xxx.xxx&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123; e.printStackTrace();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong style="color:red">注意：没有初始化的类，不意味着没有加载</strong></p>
<br>

<h1 id="5、卸载"><a href="#5、卸载" class="headerlink" title="5、卸载"></a>5、卸载</h1><img src="/2022/08/08/15-%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%88%E8%AF%A6%E7%BB%86%EF%BC%89/9.png" style="zoom:80%;">

<p><strong style="color:red">在类加载器的内部实现中，用一个Java集合来存放所加载类的引用。</strong>另外一个Class对象总是会引用它的类加载器，调用Class对象的<code>getClassLoader()</code>方法，就能获得它的类加载器。所以，二者之间是双向关联的</p>
<p><strong>一个类的实例总是引用代表这个类的Class对象，一个类的实例总是引用代表这个类的Class对象</strong></p>
<br>

<p><em><strong>判断一个类是否属于不再使用的类</strong></em></p>
<blockquote>
<p>1、该类所有的实例都已经被回收。也就是]ava堆中不存在该类及其任何派生子类的实例。<br>2、加载该类的类加载器己经被回收。这个条件除非是经过精心设计的可替换类加载器的场景，如QSGi、SP的重加载等，否则通常是很难达成的。<br>3、该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p>
</blockquote>
<p><strong style="color:red">注意：通常情况下，一个已经加载的类型被卸载的概率很小，而且卸载时间不确定</strong></p>
<br>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>16-类的加载器</title>
    <url>/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<h1 id="类加载的方式"><a href="#类加载的方式" class="headerlink" title="类加载的方式"></a>类加载的方式</h1><p>显示加载：代码中调用ClassLoader加载class对象，比如直接使用<code>Class.forName(name)</code>或<code>this.getClass().getClassLoader().loadClass()</code>加载class对象</p>
<p>隐式加载：不直接在代码中调用ClassLoader加载class对象，而是通过虚拟机自动加载到内存，比如加载某个类的class文件时，该类的class文件中引用了另外一个类的对象，此时额外引用的类将通过JVM自动加载到内存</p>
<br>

<h1 id="类的唯一性"><a href="#类的唯一性" class="headerlink" title="类的唯一性"></a>类的唯一性</h1><p><strong style="color:red">对于任意一个类，都需要由加载它的类加载器和这个类本身一同确认其在java虚拟机中的唯一性。</strong>每一个类加载器，都拥有一个独立的类名称空间：比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提下才有意义。否则，<strong style="color:red">即使这两个类源自同一个Class文件，被同一个虚拟机加载，只要加载他们的类加载器不同，那这两个类就必定不相等。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rootDir</span> <span class="operator">=</span> <span class="string">&quot;D:\\xxx\\src\\&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建自定义的类的加载器1</span></span><br><span class="line">            <span class="type">UserClassLoader</span> <span class="variable">loader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserClassLoader</span>(rootDir);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> loader1.findClass(<span class="string">&quot;xxx.java.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建自定义的类的加载器2</span></span><br><span class="line">            <span class="type">UserClassLoader</span> <span class="variable">loader2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserClassLoader</span>(rootDir);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> loader2.findClass(<span class="string">&quot;xxx.java.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(clazz1 == clazz2); <span class="comment">//clazz1与clazz2对应了不同的类模板结构。</span></span><br><span class="line">            System.out.println(clazz1.getClassLoader());</span><br><span class="line">            System.out.println(clazz2.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//结果为：false</span></span><br><span class="line">	<span class="comment">//				xxx.java.UserClassLoader@1b6d3586</span></span><br><span class="line">	<span class="comment">//				xxx.java.UserClassLoader@74a14482</span></span><br></pre></td></tr></table></figure>

<br>

<h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>每个类加载器都有自己的命名空间，命名空间由该加载器及所有的父加载器所加载的类组成。</p>
<p>在同一命名空间中，不会出现类的完整名字（包括类的包名）相同的两个类；在不同的命名空间中，有可能会出现类的完整名字（包括类的包名）相同的两个类</p>
<p><strong>在大型应用中，我们往往借助这一特性，来运行同一个类的不同版本。</strong></p>
<br>

<h1 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h1><img src="/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/1.png" style="zoom:70%;">

<img src="/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/2.png" style="zoom:70%;">

<h2 id="引导-启动-类加载器"><a href="#引导-启动-类加载器" class="headerlink" title="引导(启动)类加载器"></a><strong>引导(启动)类加载器</strong></h2><p>这个类加载使用C&#x2F;C++语言实现的,嵌套在JVM内部</p>
<p><strong style="color:red">1、它用来加载Java的核心类库<code>JAVA_HOME/jre/lib/rt.jar、resource.jar</code>或<code>sum.boot.class.path路径下的内容</code>用于提供JVM自身需要的类(String类就是使用的这个类加载器)</strong></p>
<p>2、由于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</p>
<p>3、并不继承自<code>java.lang.ClassLoader</code>，没有父加载器</p>
<p><strong>4、加载扩展类和应用程序类加载器，并指定为他们的父类加载器</strong></p>
<br>

<h2 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a><strong>自定义加载器</strong></h2><p><strong style="color:red">将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器）</strong></p>
<p>1、Java语言编写</p>
<p><strong>2、派生于ClassLoader类，父类加载器为启动类加载器</strong></p>
<p>3、从<code>java.ext.dirs</code>系统属性所指定的目录中加载类，或从JDK的安装目录的<code>jre/lib/ext</code>子目录(扩展目录)下加载类库。<strong>（如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载）</strong></p>
<br>

<h2 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a><strong>扩展类加载器</strong></h2><p>1、Java语言编写</p>
<p><strong>2、派生于ClassLoader类,父类加载器为启动类加载器</strong></p>
<p>3、从<code>java.ext.dirs</code>系统属性所指定的目录中加载类库,或从JDK的安装目录的<code>jre/lib/ext</code>子目录(扩展目录)下加载类库<strong>（如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载）</strong></p>
<br>

<h2 id="应用程序-系统-类加载器"><a href="#应用程序-系统-类加载器" class="headerlink" title="应用程序(系统)类加载器"></a><strong>应用程序(系统)类加载器</strong></h2><p>1、java语言编写</p>
<p><strong>2、派生于ClassLoader类,父类加载器为扩展类加载器</strong></p>
<p><strong>3、它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</strong></p>
<p><strong>4、该类加载是程序中默认的类加载器</strong></p>
<p>5、通过ClassLoader的getSystemClassLoader()方法可以获取到该类加载器</p>
<br>

<h2 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a><strong>用户自定义类加载器</strong></h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a><strong style="color:red">目的</strong></h3><p><em><strong>隔离记载类</strong></em></p>
<p><em><strong>修改类的加载方式</strong></em></p>
<p><em><strong>扩展加载源</strong></em></p>
<p><em><strong>防止源码泄露</strong></em></p>
<br>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h3><p><strong>1）重写 loadClass() 方法（不推荐,这个方法会保证类的双亲委派机制）</strong></p>
<p><strong>2）重写 findClass() 方法 –&gt;推荐</strong></p>
<p><strong>这两种方法本质上差不多,毕竟loadClass()也会调用findClass(),但是从逻辑上讲我们最好不要直接修改loadClass()的内部逻辑。建议的做法是只在findClass()里重写自定义类的加载方法,根据参数指定类的名字,返回对应的Class对象的引用</strong></p>
<p><strong>获取ClassLoader的方法</strong></p>
<img src="/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/3.png" style="zoom:70%;">

<img src="/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/4.png" style="zoom:70%;">

<p><strong style="color:red">注意：</strong></p>
<p><em><strong>loadClass()这个方法收i实现双亲委派模型逻辑的地方，擅自修改这个方法会导致模型被破坏，容易造成问题。因此最好避免重写</strong></em></p>
<p><em><strong>loadClass方法过程中必须写双亲委派的重复代码，从代码复用性来说，不直接修改比较好</strong></em></p>
<br>

<h1 id="ClassLoader源码"><a href="#ClassLoader源码" class="headerlink" title="ClassLoader源码"></a><strong style="color:red">ClassLoader源码</strong></h1><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ClassLoader <span class="title function_">getParent</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p><strong style="color:red">返回该类加载器的超类加载器</strong></p>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException</span><br></pre></td></tr></table></figure>

<p><a href="https://www.hzzzzzy.icu/2022/08/09/loadClass%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81/">加载名称为name的类，返回结果为<code>java.lang.Class</code>类的实例（点击查看源码）</a>如果找不到类，则返回<code>ClassNot FoundException</code> 异常。<strong style="color:red">该方法中的逻辑就是双亲委派模式的实现</strong></p>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass (String name) <span class="keyword">throws</span> ClassNotFoundException</span><br></pre></td></tr></table></figure>

<p><a href="https://www.hzzzzzy.icu/2022/08/09/findClass%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81/">查找二进制名称为name的类，返回结果为<code>java.lang.Class</code>类的实例（点击查看源码）</a>这是一个受保护的方法，JVM鼓励我们重写此方法，需要自定义加载器遵循双亲委托机制，该方法会在检查完父类加载器之后被loadClass()方法调用。</p>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.hzzzzzy.icu/2022/08/09/defineClass%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81/">根据给定的字节数组b转换为Class的实例，off和len参数表示实际Class信息在byte数组中的位置和长度，其中byte数组b是ClassLoader从外部获取的这是受保护的方法，只有在自定义ClassLoader子类中可以使用（点击查看源码）</a></p>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">resolveClass</span><span class="params">(Class&lt;?&gt; c)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.hzzzzzy.icu/2022/08/09/resolveClass%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81/">链接指定的一个Java类。使用该方法可以使用类的Class对象创建完成的同时也被解析（点击查看源码）</a><br><br></p>
<h2 id="SecureClassLoader和URLClassLoader"><a href="#SecureClassLoader和URLClassLoader" class="headerlink" title="SecureClassLoader和URLClassLoader(*)"></a>SecureClassLoader和URLClassLoader(*)</h2><p>SecureClassLoader扩展了ClassLoader，新增了几个对代码源位置及证书的验证和对class源码的访问权限的方法</p>
<p>URLClassLoader为findClass，findResource等在ClassLoader抽象类中没实现的方法提供具体的实现，新增了协助取得字节码流的功能。<strong style="color:red">在自定义类的加载器时，如果没有复杂的需求，一般直接继承URLClassLoader</strong></p>
<br>

<h2 id="Class-forName-与ClassLoader-loadClass"><a href="#Class-forName-与ClassLoader-loadClass" class="headerlink" title="Class.forName()与ClassLoader.loadClass()"></a>Class.forName()与ClassLoader.loadClass()</h2><p><strong>1、Class.forName()：是一个静态方法，最常用的是<code>Class.forName(String className)</code></strong></p>
<p><strong style="color:red">根据传入的类的全限定名返回一个 Class 对象。该方法在将 Class 文件加载到内存的同时，会执行类的初始化。</strong></p>
<p><strong>2、ClassLoader.loadClass()：这是一个实例方法，需要一个 ClassLoader 对象来调用该方法。</strong></p>
<p><strong style="color:red">该方法将 Class 文件加载到内存时，并不会执行类的初始化，直到这个类第一次使用时才进行初始化</strong></p>
<p><strong>该方法因为需要得到一个 ClassLoader 对象，所以<strong style="color:red">可以根据需要指定使用哪个类加载器</strong></strong><br><br></p>
<h1 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h1><img src="/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/1.png" style="zoom:60%;">

<img src="/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/6.png" style="zoom:80%;">

<p><a href="https://www.hzzzzzy.icu/2022/08/09/loadClass%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81/">双亲委派机制在loadClass方法中的体现</a></p>
<p><em>java虚拟机对class文件采用按需加载的方式进行加载，当需要使用该类时才会将它的class文件加载到内存中生成class对象</em></p>
<p><strong>1、如果一个类加载收到了类加载请求,它并不会自己先去加载，而是把这个请求委托给父类加载器去执行</strong></p>
<p><strong>2、如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归,请求最终将到达顶层的启动类加载器</strong></p>
<p><strong>3、如果父类的加载器可以完成类的加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式</strong></p>
<br>

<p><strong style="color:red">优势</strong></p>
<p><strong>1、避免类的重复加载，确保一个类的全局唯一性（当父ClassLoader已经加载了该类的时候,就没有必要子ClassLoader再加载一次）</strong></p>
<p><strong>2、保护程序的安全，防止API随意被篡改</strong></p>
<p><strong style="color:red">弊端</strong></p>
<p><strong>顶层的ClassLoader无法访问底层的ClassLoader所加载的类</strong></p>
<img src="/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/.png" style="zoom:80%;">

<br>

<h1 id="破坏双亲委派机制"><a href="#破坏双亲委派机制" class="headerlink" title="破坏双亲委派机制"></a>破坏双亲委派机制</h1><p>第一次破坏双亲委派机制：在双亲委派模型出现之前（JDK 1.2面世以前）</p>
<p>第二次破坏双亲委派机制：线程上下文类加载器<code>ClassLoader.getSystemClassLoader( )</code></p>
<img src="/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/8.png" style="zoom:70%;">

<p>第二次破坏双亲委派机制：用户对程序动态性的追求而导致的。如：代码热替换(Hot Swap)、模块热部署(Hot Deployment)</p>
<br>





]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>2-1-算法时间复杂度分析</title>
    <url>/2022/07/12/2-1-%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><strong>最高次项的指数大的，随着n的增长，结果也会变得增长特别快</strong></p>
<p><strong>算法函数中n最高次幂越小，算法效率越高</strong></p>
<p>1.算法函数中的常数可以忽略； </p>
<p>2.算法函数中最高次幂的常数因子可以忽略； </p>
<p>3.算法函数中最高次幂越小，算法效率越高。</p>
<h2 id="大O记法"><a href="#大O记法" class="headerlink" title="大O记法"></a><strong>大O记法</strong></h2><p>在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随着n的变化情况并确定T(n)的 量级。算法的时间复杂度，就是算法的时间量度，记作:T(n)&#x3D;O(f(n))。</p>
<p><strong>它表示随着问题规模n的增大，算法执行时间 的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称时间复杂度，其中f(n)是问题规模n的某个函数。</strong></p>
<p><strong>执行次数&#x3D;执行时间</strong></p>
<h3 id="算法一："><a href="#算法一：" class="headerlink" title="算法一："></a>算法一：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//执行1次</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次</span></span><br><span class="line"></span><br><span class="line">    sum = (n+<span class="number">1</span>)*n/<span class="number">2</span>;<span class="comment">//执行1次</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="算法二："><a href="#算法二：" class="headerlink" title="算法二："></a>算法二：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//执行1次</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"></span><br><span class="line">    	sum += i;<span class="comment">//执行了n次</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="算法三："><a href="#算法三：" class="headerlink" title="算法三："></a>算法三：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;<span class="comment">//执行1次</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=n ; i++) &#123;</span><br><span class="line"></span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;=n ; j++) &#123;</span><br><span class="line"></span><br><span class="line">     	sum+=i;<span class="comment">//执行n^2次</span></span><br><span class="line"></span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**算法一：3次 **</p>
<p>**算法二：n+3次 **</p>
<p><strong>算法三：n^2+2次</strong></p>
<h3 id="推导大O阶-的表示法"><a href="#推导大O阶-的表示法" class="headerlink" title="推导大O阶 的表示法"></a><strong>推导大O阶</strong> 的表示法</h3><p>以下几个规则可以使用： </p>
<p>**1.用常数1取代运行时间中的所有加法常数； **</p>
<p><strong>2.在修改后的运行次数中，只保留高阶项；</strong></p>
<p><strong>3.如果最高阶项存在，且常数因子不为1，则去除与这个项相乘的常数；</strong></p>
<p>所以，上述算法的大O记法分别为： </p>
<p>​	算法一：O(1) </p>
<p>​	算法二：O(n) </p>
<p>​	算法三：O(n^2)</p>
<h2 id="常见的大O阶"><a href="#常见的大O阶" class="headerlink" title="常见的大O阶"></a><strong>常见的大O阶</strong></h2><h3 id="1-线性阶"><a href="#1-线性阶" class="headerlink" title="1.线性阶"></a>1.线性阶</h3><p>一般含有非嵌套循环涉及线性阶，线性阶就是随着输入规模的扩大，对应计算次数呈直线增长，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//执行1次</span></span><br><span class="line">    <span class="type">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次</span></span><br><span class="line">    sum = (n+<span class="number">1</span>)*n/<span class="number">2</span>;<span class="comment">//执行1次</span></span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>上面这段代码，它的循环的时间复杂度为O(n)</strong>,因为循环体中的代码需要执行n次</p>
<h3 id="2-平方阶"><a href="#2-平方阶" class="headerlink" title="2.平方阶"></a>2.平方阶</h3><p>一般嵌套循环属于这种时间复杂度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,n=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=n ; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;=n ; j++) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码，n&#x3D;100，也就是说，外层循环每执行一次，内层循环就执行100次，那总共程序想要从这两个循环 中出来，就需要执行100<em>100次，也就是n的平方次，所以*<em>这段代码的时间复杂度是O(n^2).</em></em></p>
<h3 id="3-立方阶"><a href="#3-立方阶" class="headerlink" title="3.立方阶"></a>3.立方阶</h3><p>一般三层嵌套循环属于这种时间复杂度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;= n; j++) &#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码，n&#x3D;100，也就是说，外层循环每执行一次，中间循环循环就执行100次，中间循环每执行一次，最 内层循环需要执行100次，那总共程序想要从这三个循环中出来，就需要执行100100100次，也就是n的立方，所 以<strong>这段代码的时间复杂度是O(n^3).</strong></p>
<h3 id="4-对数阶"><a href="#4-对数阶" class="headerlink" title="4.对数阶"></a>4.对数阶</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">1</span>,n=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    i = i * <span class="number">2</span>; 	   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于每次i<em>2之后，就距离n更近一步，假设有x个2相乘后大于n，则会退出循环。由于是2^x&#x3D;n,得到x&#x3D;log(2)n,所 以*<em>这个循环的时间复杂度为O(logn);</em></em> 对于对数阶，<strong>由于随着输入规模n的增大，不管底数为多少，他们的增长趋势是一样的，所以我们会忽略底数。</strong></p>
<h3 id="5-常数阶"><a href="#5-常数阶" class="headerlink" title="5.常数阶"></a>5.常数阶</h3><p>一般不涉及循环操作的都是常数阶，因为它不会随着n的增长而增加操作次数。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> i=n+<span class="number">2</span>;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码，不管输入规模n是多少，都执行2次，根据大O推导法则，常数用1来替换，所以<strong>上述代码的时间复杂度为O(1)</strong></p>
<p>​    <img src="/2022/07/12/2-1-%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/1.png" alt="0"></p>
<p>他们的复杂程度从低到高依次为：</p>
<p>​    <img src="/2022/07/12/2-1-%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/2.png" alt="0"></p>
<p>所以，我们的算法，尽可能的<strong>追求的是O(1),O(logn),O(n),O(nlogn)这几种时间复杂度</strong>，而如果发现算法的时间复杂度为平方阶、 立方阶或者更复杂的，那我们可以分为这种算法是不可取的，需要优化。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>2-3-算法的空间复杂度分析</title>
    <url>/2022/07/12/2-3-%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="一、java中常见内存占用"><a href="#一、java中常见内存占用" class="headerlink" title="一、java中常见内存占用"></a>一、java中常见内存占用</h2><p>1.基本数据类型内存占用情况：</p>
<p>​    <img src="/2022/07/12/2-3-%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/1.png" alt="0"></p>
<p>2.计算机访问内存的方式都是一次一个字节</p>
<p>3.一个引用（机器地址）需要8个字节表示：</p>
<p>例如： Date date &#x3D; new Date(),则date这个变量需要占用8个字节来表示</p>
<p>4.创建一个对象，比如new Date()，除了Date对象内部存储的数据(例如年月日等信息)占用的内存，该对象本身也 有内存开销，每个对象的自身开销是16个字节，用来保存对象的头信息。 </p>
<p>5.一般内存的使用，如果不够8个字节，都会被自动填充为8字节</p>
<p>6.java中数组被被限定为对象，他们一般都会因为记录长度而需要额外的内存，一个原始数据类型的数组一般需要<strong>24字节的头信息</strong></p>
<p>(16个自己的对象开销，4字节用于保存长度以及4个填充字节)再加上保存值所需的内存。</p>
<h2 id="二、算法的空间复杂度"><a href="#二、算法的空间复杂度" class="headerlink" title="二、算法的空间复杂度"></a><strong>二、算法的空间复杂度</strong></h2><p>算法的空间复杂度计算公式记作：S(n)&#x3D;O(f(n)),其中n为输入规模，f(n)为语句关于n所占存储空间的函数。</p>
<p>案例： 对指定的数组元素进行反转，并返回反转的内容。</p>
<p>​    <img src="/2022/07/12/2-3-%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/2.png" alt="0"></p>
<p>​    <img src="/2022/07/12/2-3-%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/3.png" alt="0"></p>
<p>根据大O推导法则，算法一的空间复杂度为O(1)</p>
<p>算法二的空间复杂度为O(n)</p>
<p>所以从空间占用的角度讲，算法一要优于算法二。</p>
<p>由于java中有内存垃圾回收机制，并且jvm对程序的内存占用也有优化（例如即时编译），我们无法精确的评估一 个java程序的内存占用情况，但是了解了java的基本内存占用，使我们可以对java程序的内存占用情况进行估算。 由于现在的计算机设备内存一般都比较大，基本上个人计算机都是4G起步，大的可以达到32G</p>
<p>所以<strong>内存占用一般 情况下并不是我们算法的瓶颈，普通情况下直接说复杂度，默认为算法的时间复杂度。</strong></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>2-2-函数调用时间复杂度分析</title>
    <url>/2022/07/12/2-2-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="案例一："><a href="#案例一：" class="headerlink" title="案例一："></a><strong>案例一：</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        show(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>show方法的时间复杂度为O(1),main方法的时间复杂度是O(n)</strong></p>
<h2 id="案例二："><a href="#案例二：" class="headerlink" title="案例二："></a><strong>案例二：</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        show(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main方法中，有一个for循环，循环体调用了show方法，由于show方法内部也有一个for循环</p>
<p><strong>所以show方法 的时间复杂度为O(n)，main方法的时间复杂度为O(n^2)</strong></p>
<h2 id="案例三："><a href="#案例三：" class="headerlink" title="案例三："></a><strong>案例三：</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">100</span>;</span><br><span class="line">    show(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        show(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在show方法中，有一个for循环，所以show方法的时间复杂度为O(n),在main方法中，show(n)这行代码内部执行 的次数为n，第一个for循环内调用了show方法，所以其执行次数为n^2,第二个嵌套for循环内只执行了一行代码，</p>
<p>所以其执行次数为n^2,那么<strong>main方法总执行次数为n+n^2+n^2&#x3D;2n^2+n</strong>。</p>
<p>根据大O推导规则，去掉n保留最高阶 项，并去掉最高阶项的常数因子2，所以<strong>最终main方法的时间复杂度为O(n^2)</strong></p>
<h2 id="最坏情况"><a href="#最坏情况" class="headerlink" title="最坏情况"></a><strong>最坏情况</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num==arr[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最好情况：</strong> 查找的第一个数字就是期望的数字，那么算法的时间复杂度为O(1) </p>
<p><strong>最坏情况：</strong> 查找的最后一个数字，才是期望的数字，那么算法的时间复杂度为O(n) </p>
<p><strong>平均情况：</strong> 任何数字查找的平均成本是O(n&#x2F;2) <strong>最坏情况是一种保证，在应用中，这是一种最基本的保障，即使在最坏情况下，也能够正常提供服务，所以，除非 特别指定，</strong> <strong>我们提到的运行时间都指的是最坏情况下的运行时间。</strong></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>3-1-冒泡排序</title>
    <url>/2022/07/12/3-1-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p><strong>排序原理：</strong> </p>
<p><strong>1. 比较相邻的元素。如果前一个元素比后一个元素大，就交换这两个元素的位置。</strong></p>
<p><strong>2. 对每一对相邻元素做同样的工作，从开始第一对元素到结尾的最后一对元素。最终最后位置的元素就是最大值。</strong></p>
<p><img src="/2022/07/12/3-1-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/1.png"></p>
<p>**初始状态到第一次冒泡 : **</p>
<ol>
<li>比较 4,5，5比4大，不变。</li>
<li>比较5,6，6比5大，不变</li>
<li>比较6,3，3比6小，交换二者位置    4,5,3,6,2,1</li>
<li>比较6,2，2比6小，交换二者位置    4,5,3,2,6,1</li>
<li>比较6,1，1比6小，交换二者位置    4,5,3,2,1,6</li>
</ol>
<p>假设数组长度为n，冒泡排序必须实现n-1次冒泡（令k &#x3D; n）</p>
<p>第一次冒泡要有k-1次比较</p>
<p>第二次冒泡要有k-2次比较</p>
<p>第n-1次冒泡要有k-n-1次比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a.length-<span class="number">1</span>;i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (greater(a[j],a[j+<span class="number">1</span>]))&#123;</span><br><span class="line">                exch(a,j,j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用两个for循环进行遍历，第一个for循环表示冒泡的次数为：数组长度-1</strong></p>
<p><strong>第二个for循环表示相邻数组元素依次比较，j &lt; i 表示排序完的元素放在数组的后面，不需要再次进行排序</strong></p>
<p><img src="/2022/07/12/3-1-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/2.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> SORT;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hzy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022/1/14</span></span><br><span class="line"><span class="comment"> * 10:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//    1.public static void sort(Comparable[] a)：对数组内的元素进行排序</span></span><br><span class="line"><span class="comment">//    2.private static boolean greater(Comparable v,Comparable w):判断v是否大于w</span></span><br><span class="line"><span class="comment">//    3.private static void exch(Comparable[] a,int i,int j)：交换a数组中，索引i和索引j处的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bubble</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对数组内的元素进行排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a.length-<span class="number">1</span>;i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (greater(a[j],a[j+<span class="number">1</span>]))&#123;</span><br><span class="line">                    exch(a,j,j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断v是否大于w</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v,Comparable w)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> v.compareTo(w);</span><br><span class="line">        <span class="keyword">if</span> (result&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        return result&gt;0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换a数组中，索引i和索引j处的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>冒泡排序的时间复杂度分析 冒泡排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码</strong></p>
<p>**所以， 分析冒泡排序的时间复杂度，主要分析一下内层循环体的执行次数即可。 **</p>
<p>在最坏情况下，也就是假如要排序的元素为{6,5,4,3,2,1}逆序，</p>
<p>那么： 元素比较的次数为： (N-1)+(N-2)+(N-3)+…+2+1&#x3D;((N-1)+1)*(N-1)&#x2F;2&#x3D;N^2&#x2F;2-N&#x2F;2; </p>
<p>元素交换的次数为： (N-1)+(N-2)+(N-3)+…+2+1&#x3D;((N-1)+1)*(N-1)&#x2F;2&#x3D;N^2&#x2F;2-N&#x2F;2;</p>
<p>总执行次数为： (N^2&#x2F;2-N&#x2F;2)+(N^2&#x2F;2-N&#x2F;2)&#x3D;N^2-N;</p>
<p>按照大O推导法则，保留函数中的最高阶项那么<strong>最终冒泡排序的时间复杂度为O(N^2)</strong></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>2-nginx-配置到系统服务和系统环境</title>
    <url>/2022/07/13/2-nginx-%E9%85%8D%E7%BD%AE%E5%88%B0%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="一、将nginx配置到系统服务"><a href="#一、将nginx配置到系统服务" class="headerlink" title="一、将nginx配置到系统服务"></a><strong>一、将nginx配置到系统服务</strong></h1><p><strong>1、在   <code>/usr/lib/systemd/system</code>   目录下添加nginx.service,内容如下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx web service</span><br><span class="line">Documentation=http://nginx.org/en/docs/</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>

<p><strong>2、添加完成后如果权限有问题需要进行权限设置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 755 /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>

<p><strong>3、使用系统命令来操作Nginx服务</strong></p>
<p><img src="/2022/07/13/2-nginx-%E9%85%8D%E7%BD%AE%E5%88%B0%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83/1.png"></p>
<h1 id="二、将nginx命令配置到系统环境"><a href="#二、将nginx命令配置到系统环境" class="headerlink" title="二、将nginx命令配置到系统环境"></a><strong>二、将nginx命令配置到系统环境</strong></h1><p><strong>1、修改</strong> <code>/etc/profile</code> <strong>文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">在最后一行添加</span><br><span class="line">export PATH=$PATH:/usr/local/nginx/sbin</span><br></pre></td></tr></table></figure>

<p><strong>2、使配置立即生效</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>3-2-选择排序</title>
    <url>/2022/07/12/3-2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p><strong>排序原理：</strong></p>
<p><strong>1.每一次遍历的过程中，都假定第一个索引处的元素是最小值，和其他索引处的值依次进行比较</strong></p>
<p>​	**如果当前索引处的值大于其他某个索引处的值，则假定其他某个索引出的值为最小值，最后可以找到最小值所在的索引 **</p>
<p><strong>2.交换第一个索引处和最小值所在的索引处的值</strong></p>
<p>​    <img src="/2022/07/12/3-2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/1.png" alt="0"></p>
<p>原始数据到第一趟排序：假定4是最小值，让4分别与数据的其他7位元素进行比较，如果有比4小的数，交换二者位置让那个数成为最小值放在第一位，然后继续比较，直到到了元素的最后一位</p>
<p>第六趟到第7趟排序：假定8是最小值，与后面的10，9进行比较，如果有比4小的数，交换二者位置让那个数成为最小值放在第一位，然后继续比较，直到到了元素的最后一位</p>
<p>​    <img src="/2022/07/12/3-2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/2.png" alt="0"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//定义一个变量，记录最小元素所在的索引，默认为参与选择排序的第一个元素所在的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="comment">//需要比较最小索引min处的值和j索引处的值</span></span><br><span class="line">            <span class="keyword">if</span> (greater(a[min],a[j]))&#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换最小元素所在的索引min处的值和j索引处的值</span></span><br><span class="line">        exch(a, i, min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v,Comparable w)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.compareTo(w)&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    Comparable temp;</span><br><span class="line">    temp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设数组长度为n</p>
<p>最开始，将数组的第一个元素作为最小值所在的索引，定义为min</p>
<p>用两个for循环进行嵌套，第一个for循环表示，需要进行n-1趟排序</p>
<p>第二个for循环为了比较最小索引的值min 与 后面元素的索引值。</p>
<p>如果存在比最小索引min的值小的元素，则交换min与该元素的索引，使其成为最小值的索引</p>
<p><strong>注意：</strong></p>
<p><strong>第二个for循环中定义 j &#x3D; i + 1 是为了在排好顺序的元素的后一位才开始进行比较</strong></p>
<p><strong>而且 j 不能越界访问，所以 j 要小于数组的长度</strong></p>
<p><strong>选择排序的时间复杂度分析：</strong></p>
<p>选择排序使用了双层for循环，其中外层循环完成了数据交换，内层循环完成了数据比较，</p>
<p>分别统计数据 交换次数和数据比较次数： </p>
<p>数据比较次数： (N-1)+(N-2)+(N-3)+…+2+1&#x3D;((N-1)+1)*(N-1)&#x2F;2&#x3D;N^2&#x2F;2-N&#x2F;2;</p>
<p>数据交换次数： N-1 时间复杂度：N^2&#x2F;2-N&#x2F;2+（N-1）&#x3D;N^2&#x2F;2+N&#x2F;2-1; 根据大O推导法则，保留最高阶项，去除常数因子，<strong>时间复杂度为O(N^2);</strong></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>3-nginx-静态资源部署</title>
    <url>/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="静态资源的配置指令"><a href="#静态资源的配置指令" class="headerlink" title="静态资源的配置指令"></a><strong>静态资源的配置指令</strong></h1><h2 id="listen指令：-用来配置监听端口"><a href="#listen指令：-用来配置监听端口" class="headerlink" title="listen指令： 用来配置监听端口"></a><strong>listen指令：</strong> <strong>用来配置监听端口</strong></h2><p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/1.png"></p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/2.png"></p>
<p><strong>default_server属性是标识符，用来将此虚拟主机设置成默认主机</strong></p>
<p><strong>所谓的默认主机指的是如果没有匹配到对应的address:port，则会默认执行的。</strong> 如果不指定默认使用的是第一个server</p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/3.png"></p>
<br>

<h2 id="server-name指令："><a href="#server-name指令：" class="headerlink" title="server_name指令："></a><strong>server_name指令：</strong></h2><p><strong>用来设置虚拟主机服务名称</strong></p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/4.png"></p>
<p><strong>三种匹配方式：精确匹配、通配符匹配、正则表达式匹配</strong></p>
<br>

<h3 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a><strong>精确匹配</strong></h3><p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/5.png"></p>
<p>域名是要收取一定的费用，所以可以使用修改hosts文件来制作一些虚拟域名来使用。需要修改 <code>/etc/hosts</code> 文件来添加</p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/6.png"></p>
<br>

<h3 id="通配符匹配"><a href="#通配符匹配" class="headerlink" title="通配符匹配"></a><strong>通配符匹配</strong></h3><p><strong>server_name中支持通配符”*“,但需要注意的是通配符不能出现在域名的中间，只能出现在首段或尾段</strong></p>
<p><strong>(*)代表任意字符</strong></p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/7.png"></p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/8.png"></p>
<br>

<h3 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a><strong>正则表达式匹配</strong></h3><p><strong>server_name中可以使用正则表达式，并且使用 ~ 作为正则表达式字符串的开始标记</strong></p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/9.png"></p>
<p>括号取值</p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/10.png"></p>
<p><img src="/2022/07/13/3-nginx-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2/11.png"></p>
<br>

<h3 id="匹配执行顺序"><a href="#匹配执行顺序" class="headerlink" title="匹配执行顺序"></a><strong>匹配执行顺序</strong></h3><p><em><strong>1、准确匹配</strong></em></p>
<p><em><strong>2、通配符在开始时匹配</strong></em></p>
<p><em><strong>3、通配符在结束时匹配</strong></em></p>
<p><em><strong>4、正则表达式匹配</strong></em></p>
<p><em><strong>5、被默认的default_server处理，如果没有指定默认找第一个server</strong></em></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>4-nginx-反向代理</title>
    <url>/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="Nginx反向代理的配置语法"><a href="#Nginx反向代理的配置语法" class="headerlink" title="Nginx反向代理的配置语法"></a><strong>Nginx反向代理的配置语法</strong></h1><p><strong style="color:red;"><strong>Nginx反向代理模块的指令是由ngx_http_proxy_module模块进行解析</strong></strong></p>
<h2 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a><strong>proxy_pass</strong></h2><p><strong style="color:red;"><strong>用来设置被代理服务器地址，可以是主机名称、IP地址加端口号形式</strong></strong></p>
<p><strong>URL：需要进行设置的被代理服务器地址，包含传输协议(http,https:&#x2F;&#x2F;)、主机名称或IP地址加端口号、URI等要素</strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/1.png"></p>
<p><strong>当proxy_pass时，要注意是否要在URL后面加</strong> <strong>&#x2F;</strong> <strong>的问题：</strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/2.png"></p>
<p><strong>当客户端访问</strong> <strong><a href="http://localhost/index.html%EF%BC%8C%E6%95%88%E6%9E%9C%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84">http://localhost/index.html，效果是一样的</a></strong></p>
<br>

<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/3.png"></p>
<p><strong>当客户端访问</strong> <strong><a href="http://localhost/server/index.html">http://localhost/server/index.html</a></strong> <strong>的时候</strong></p>
<p>第一个proxy_pass就变成了  <strong><a href="http://localhost/server/index.html">http://localhost/server/index.html</a></strong></p>
<p>第二个proxy_pass就变成了  <strong><a href="http://localhost/index.html">http://localhost/index.html</a></strong>  效果就不一样了</p>
<p><strong>当没有斜杠时，location后的路径会加上去，有斜杠时，则不会。</strong></p>
<br>

<h2 id="proxy-set-header"><a href="#proxy-set-header" class="headerlink" title="proxy_set_header"></a><strong>proxy_set_header</strong></h2><p><strong style="color:red;"><strong>更改Nginx服务器接收到的客户端请求的请求头信息，然后将新的请求头发送给代理的服务器</strong></strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/4.png"></p>
<p><strong>测试案例：以140为代理服务器，141为被代理服务器，发送请求头信息username为HZY</strong></p>
<p><strong>代理服务器</strong> [192.168.174.140]</p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/5.png"></p>
<p><strong>被代理服务器</strong> [192.168.174.141]</p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/6.png"></p>
<br>

<h2 id="proxy-redirect"><a href="#proxy-redirect" class="headerlink" title="proxy_redirect"></a><strong>proxy_redirect</strong></h2><p><strong style="color:red;"><strong>重置头信息中的”Location”和”Refresh”的值</strong></strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7.png"></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/8.png"></p>
<p><strong>测试案例：</strong></p>
<p><strong>当发送192.168.174.140:8081&#x2F;add.html请求时，代理服务端（140）将请求代理到 141</strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/9.png"></p>
<p><strong>服务端（141）判断当前请求的资源路径是否为空，如果为空，则返回状态码302，临时重定向到192.168.174.141:80，访问默认的index.html</strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/10.png"></p>
<br>

<h2 id="反向代理案例"><a href="#反向代理案例" class="headerlink" title="反向代理案例"></a><strong>反向代理案例</strong></h2><p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/11.png"></p>
<p><strong>如图所示，当用户发送请求到代理服务器端，<a href="http://192.168.174.140:8082/server1%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%B0%86%E4%BC%9A%E8%A2%AB%E4%BB%A3%E7%90%86%E5%88%B0http://192.168.174.141:9001/%E4%B8%8A%E9%9D%A2">http://192.168.174.140:8082/server1，请求将会被代理到http://192.168.174.141:9001/上面</a></strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/12.png"></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/13.png"></p>
<br>

<h1 id="反向代理系统调优"><a href="#反向代理系统调优" class="headerlink" title="反向代理系统调优"></a><strong>反向代理系统调优</strong></h1><p><strong>反向代理值：Buffer（缓冲）和Cache（缓存）</strong></p>
<p><strong style="color:red;"><strong>相同点：两种方式都是提高IO吞吐效率，提升nginx代理的性能</strong></strong></p>
<p><strong style="color:red;"><strong>不同点：</strong></strong></p>
<p><strong style="color:red;"><strong>Buffer是用来解决不同设备之间数据传递速度不一致导致的性能低的问题，BUffer中的数据一旦此次操作完成后，就可以删除</strong></strong></p>
<p><strong style="color:red;"><em><strong>Cache主要是备份，将被代理服务器的数据缓存一份到代理服务器上去。当客户端再次获取相同的数据时，就只需要从代理服务器上去获取，而不需要再次通过被代理服务器，效率高，缓存中的数据可以重复使用，只有满足特定的条件才会删除</strong></em></strong></p>
<h2 id="Proxy-Buffer相关指令"><a href="#Proxy-Buffer相关指令" class="headerlink" title="Proxy Buffer相关指令"></a><strong>Proxy Buffer相关指令</strong></h2><h3 id="1）proxy-buffering"><a href="#1）proxy-buffering" class="headerlink" title="1）proxy_buffering"></a><strong>1）proxy_buffering</strong></h3><p><strong style="color:red;"><strong>该指令用来开启或者关闭代理服务器的缓冲区</strong></strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/14.png"></p>
<br>

<h3 id="2）proxy-buffers"><a href="#2）proxy-buffers" class="headerlink" title="2）proxy_buffers"></a><strong>2）proxy_buffers</strong></h3><p><strong style="color:red;"><strong>指定单个连接从代理服务器读取响应的缓存区的个数和大小</strong></strong></p>
<p><strong>number：缓存区的个数</strong></p>
<p><strong>size：每个缓存区的大小，缓存区的总大小为number*size</strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/15.png"></p>
<br>

<h3 id="3）proxy-buffer-size"><a href="#3）proxy-buffer-size" class="headerlink" title="3）proxy_buffer_size"></a><strong>3）proxy_buffer_size</strong></h3><p><strong style="color:red;"><strong>设置从被代理服务器获取的第一部分响应数据的大小。保持与proxy_buffers中的size一致即可，当然也可以更小。</strong></strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/16.png"></p>
<br>

<h3 id="4）proxy-busy-buffers-size"><a href="#4）proxy-busy-buffers-size" class="headerlink" title="4）proxy_busy_buffers_size"></a><strong>4）proxy_busy_buffers_size</strong></h3><p><strong style="color:red;"><strong>用来限制同时处于BUSY状态的缓冲总大小。</strong></strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/17.png"></p>
<br>

<h3 id="5）proxy-temp-path"><a href="#5）proxy-temp-path" class="headerlink" title="5）proxy_temp_path"></a><strong>5）proxy_temp_path</strong></h3><p><strong style="color:red;"><strong>当缓冲区存满后，仍未被Nginx服务器完全接受，响应数据就会被临时存放在磁盘文件上，该指令设置文件路径</strong></strong></p>
<p><strong>注意path最多设置三层</strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/18.png"></p>
<br>

<h3 id="6）proxy-temp-file-write-size"><a href="#6）proxy-temp-file-write-size" class="headerlink" title="6）proxy_temp_file_write_size"></a><strong>6）proxy_temp_file_write_size</strong></h3><p><strong style="color:red;"><strong>用来设置磁盘上缓冲文件的大小</strong></strong></p>
<p><img src="/2022/07/18/4-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/19.png"></p>
<br>

<h1 id="通用网站的配置"><a href="#通用网站的配置" class="headerlink" title="通用网站的配置"></a><strong>通用网站的配置</strong></h1><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line"><span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line"><span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>5-nginx-负载均衡</title>
    <url>/2022/07/19/5-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h1 id="Nginx八层负载均衡"><a href="#Nginx八层负载均衡" class="headerlink" title="Nginx八层负载均衡"></a>Nginx八层负载均衡</h1><h2 id="upstream指令"><a href="#upstream指令" class="headerlink" title="upstream指令"></a><strong>upstream指令</strong></h2><p><strong>该指令是用来定义一组服务器，它们可以是监听不同端口的服务器，并且也可以是同时监听TCP和<code>Unix socket</code>的服务器。</strong></p>
<p><strong>服务器可以指定不同的权重，默认为1</strong></p>
<p><img src="/2022/07/19/5-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/1.png"></p>
<br>

<h2 id="server指令"><a href="#server指令" class="headerlink" title="server指令"></a><strong>server指令</strong></h2><p><strong>该指令用来指定后端服务器的名称和一些参数，可以使用域名、IP、端口或者<code>Unix socket</code></strong></p>
<p><img src="/2022/07/19/5-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2.png"></p>
<br>

<h2 id="负载均衡案例"><a href="#负载均衡案例" class="headerlink" title="负载均衡案例"></a><strong>负载均衡案例</strong></h2><p><img src="/2022/07/19/5-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/3.png"></p>
<p><strong>客户端发送请求，通过nginx进行负载均衡到各个服务器上（proxy_pass指令）</strong></p>
<p><img src="/2022/07/19/5-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/4.png"><img src="/2022/07/19/5-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/5.png"></p>
<br>

<h2 id="负载均衡状态"><a href="#负载均衡状态" class="headerlink" title="负载均衡状态"></a><strong>负载均衡状态</strong></h2><p><strong>代理服务器在负责均衡调度中的状态有以下几个：</strong></p>
<p><img src="/2022/07/19/5-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/3.png"></p>
<h3 id="1）down："><a href="#1）down：" class="headerlink" title="1）down："></a><strong>1）down：</strong></h3><p><strong>将该服务器标记为永久不可用，该代理服务器不参与负载均衡</strong></p>
<p><strong>down状态一般会对需要停机维护的服务器进行设置</strong></p>
<br>

<h3 id="2）backup"><a href="#2）backup" class="headerlink" title="2）backup"></a><strong>2）backup</strong></h3><p><strong>将该服务器标记为备份服务器，当主服务器不可用时，将用来传递请求</strong></p>
<br>

<p><strong>当正常访问时，因为此时9002已经作为了备份服务器，所以nginx只负载均衡到9003端口。</strong></p>
<p><strong>当9003端口不可用时，9002将传递请求，此时nginx负载均衡到9002端口</strong></p>
<br>

<h3 id="3）max-fails-和-fail-timeout"><a href="#3）max-fails-和-fail-timeout" class="headerlink" title="3）max_fails 和 fail_timeout"></a><strong>3）max_fails 和 fail_timeout</strong></h3><ul>
<li><strong><code>max_fails=number</code></strong></li>
</ul>
<p><em>设置允许请求代理服务器失败的次数，默认为1</em></p>
<ul>
<li><strong><code>fail_timeout=time</code></strong></li>
</ul>
<p><em>设置经过max_fails失败后，服务暂停的时间，默认为10s</em></p>
<ul>
<li><strong>案例</strong></li>
</ul>
<p><strong>当9003服务器出问题后，如果访问失败的次数达到3次后，在15s内 9003服务器将不再提供服务</strong></p>
<br>

<h3 id="4）max-conns"><a href="#4）max-conns" class="headerlink" title="4）max_conns"></a><strong>4）max_conns</strong></h3><p><strong><code>max_conns=number</code></strong></p>
<p><strong>用来设置代理服务器同时活动链接的最大数量，默认为0，表示不限制</strong></p>
<p><strong>使用该配置可以根据后端服务器处理请求的并发量来进行设置，防止后端服务器被压垮。</strong></p>
<br>

<h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a><strong>负载均衡策略</strong></h2><table>
<thead>
<tr>
<th align="center"><strong>算法名称</strong></th>
<th align="center"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>轮询</strong></td>
<td align="center"><strong>默认方式</strong></td>
</tr>
<tr>
<td align="center"><strong>weight</strong></td>
<td align="center"><strong>权重方式</strong></td>
</tr>
<tr>
<td align="center"><strong>ip_hash</strong></td>
<td align="center"><strong>依据ip分配方式</strong></td>
</tr>
<tr>
<td align="center"><strong>least_conn</strong></td>
<td align="center"><strong>依据最少连接方式</strong></td>
</tr>
<tr>
<td align="center"><strong>url_hash</strong></td>
<td align="center"><strong>依据URL分配方式</strong></td>
</tr>
<tr>
<td align="center"><strong>fair</strong></td>
<td align="center"><strong>依据响应时间方式</strong></td>
</tr>
</tbody></table>
<h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a><strong>轮询</strong></h2><p><strong>是upstream模块负载均衡默认的策略，每个请求会按时间顺序注意分配到不同的后端服务器</strong></p>
<br>

<h2 id="weight加权-加权轮询"><a href="#weight加权-加权轮询" class="headerlink" title="weight加权[加权轮询]"></a><strong>weight加权[加权轮询]</strong></h2><p><strong><code>weight=number</code>：用来设置服务器的权重</strong></p>
<p><strong>权重数据越大，被分配到的概率就越高</strong></p>
<br>

<h2 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a><strong>ip_hash</strong></h2><p><strong>当对后端的多台动态应用服务器做负载均衡时，ip_hash指令能够将某个客户端IP的请求通过哈希算法定位到同一台后端服务器上</strong></p>
<br>

<h2 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn"></a><strong>least_conn</strong></h2><p><strong>最少连接，把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同</strong></p>
<p><strong>但是，有些请求占用的时间很长，会导致其所在的后端负载较高</strong></p>
<p><strong>在这种情况下，使用least_conn可以达到更好的方法（适合请求长短不一导致服务器过载的情况）</strong></p>
<br>

<h2 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a><strong>url_hash</strong></h2><p><strong>按访问的url的hash结果来分配请求，使某个url定向到同一个后端服务器，要配合缓存命中来使用。</strong></p>
<p><strong>使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取</strong></p>
<h2 id="fair"><a href="#fair" class="headerlink" title="fair"></a><strong>fair</strong></h2><p><strong>fair采用的不是内建负载均衡使用的轮换的均衡算法，而是可以根据页面大小、加载时间长短智能的进行负载均衡。</strong></p>
<p><strong>安装</strong>  <strong>nginx-upstream-fair</strong>  <strong>模块</strong></p>
<ol>
<li><strong>下载nginx-upstream-fair模块：</strong><a href="https://github.com/gnosek/nginx-upstream-fair"><strong>https://github.com/gnosek/nginx-upstream-fair</strong></a></li>
<li><strong>将下载的文件上传到服务器并进行解压缩：<code>unzip nginx-upstream-fair-master.zip</code></strong></li>
<li><strong>重命名资源：<code>mv nginx-upstream-fair-master fair</code></strong></li>
<li><strong>将资源添加到Nginx模块中：<code>./configure --add-module=/root/fair</code></strong></li>
<li><strong>编译：<code>make</code></strong></li>
</ol>
<br>

<p><strong>案例一：对所有请求实现一般轮询规则的负载均衡</strong></p>
<p><strong>案例二：对所有请求实现加权轮询规则的负载均衡</strong></p>
<p><strong>案例三：对特定资源实现负载均衡</strong></p>
<br>

<p><strong>案例四：对不同域名实现负载均衡</strong></p>
<br>

<p><strong>案例五：实现带有URL重写的负载均衡</strong></p>
<br>

<h1 id="Nginx四层负载均衡"><a href="#Nginx四层负载均衡" class="headerlink" title="Nginx四层负载均衡"></a><strong>Nginx四层负载均衡</strong></h1><p><strong>需要添加stream模块的支持</strong></p>
<ol>
<li><strong>将原有&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx进行备份</strong></li>
<li><strong>拷贝nginx之前的配置信息</strong></li>
<li><strong>在nginx的安装源码进行配置指定对应模块  .&#x2F;configure –with-stream</strong></li>
<li><strong>通过make模板进行编译</strong></li>
<li><strong>将objs下面的nginx移动到&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin下</strong></li>
<li><strong>在源码目录下执行  make upgrade进行升级，这个可以实现不停机添加新模块的功能</strong></li>
</ol>
<p><strong>stream指令和upstream指令</strong></p>
<p><strong>该指令提供在其中指定流服务器指令的配置文件上下文。和http指令同级</strong></p>
<p><strong>案例：</strong></p>
]]></content>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2022/08/19/SpringMVC/</url>
    <content><![CDATA[<h1 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h1><h2 id="初始化时机"><a href="#初始化时机" class="headerlink" title="初始化时机"></a>初始化时机</h2><blockquote>
<p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(A20.class);</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&gt;<span class="type">AnnotationConfigServletWebServerApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>(WebConfig.class);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>Config类</p>
<p>1、创建内嵌的web容器工厂</p>
<p>2、创建 DispatcherServlet</p>
<p>3、注册 DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">@Configuration</span></span><br><span class="line">&gt;<span class="meta">@ComponentScan</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">&gt;<span class="comment">// 创建内嵌的web容器工厂</span></span><br><span class="line">&gt;<span class="meta">@Bean</span></span><br><span class="line">&gt;<span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">tomcatServletWebServerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 创建 DispatcherServlet</span></span><br><span class="line">&gt;<span class="meta">@Bean</span></span><br><span class="line">&gt;<span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 注册 DispatcherServlet, Spring MVC 的入口</span></span><br><span class="line">&gt;<span class="meta">@Bean</span></span><br><span class="line">&gt;<span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">dispatcherServletRegistrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span> &#123;</span><br><span class="line">  <span class="comment">//拦截所有请求，使请求全部进入dispatcherServlet，再进行分发</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>DispatcherServlet对象作为Spring容器的一个Bean，是由Spring容器创建的，但是它的初始化不是由Spring容器创建的，而是由tomcat服务器在首次使用到DispatcherServlet时由tomcat进行初始化。</p>
<p>可以通过setLoadOnStartup方法设置优先级，来让tomcat一启动就加载DispatcherServlet</p>
<p>（数字越小优先级越高）</p>
<img src="/2022/08/19/SpringMVC/1.png" style="zoom:80%;">

<p>一般来说该优先级是写在application.properties文件中，从而避免耦合。所以需要在类上使用注解来读取properties文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br></pre></td></tr></table></figure>

<p>还需要使用注解来绑定配置文件中的key，下面绑定的是properties文件中以spring.mvc开头和server开头的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;WebMvcProperties.class,ServerProperties.class&#125;)</span></span><br></pre></td></tr></table></figure>

<img src="/2022/08/19/SpringMVC/2.png" style="zoom:80%;">

<br>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><code>DispatcherServlet</code>的类层次如下：</p>
<img src="/2022/08/19/SpringMVC/4.png" style="zoom:30%;">

<p>从客户端穿过来的所有请求都需要通过<code>DispatcherServlet</code>前端控制器来进行请求的分发处理，然后把响应结果返回给客户端，它的本质其实也是一个Servlet，和其他Servlet一样有着同样的生命周期<a href="https://www.runoob.com/servlet/servlet-intro.html">（Servlet 简介）</a></p>
<p>1、初始化	2、运行	3、销毁</p>
<p>下图为<code>DispatcherServlet</code>的初始化过程</p>
<img src="/2022/08/19/SpringMVC/3.png" style="zoom:60%;">

<br>

<p><code>DispatcherServlet</code>的初始化工作并没有在<code>DispatcherServlet</code>类中进行，而是在<code>HttpServletBean</code>类中重写了init()方法，代码如下</p>
<p>步骤：</p>
<p>1、init()方法通过实例化<code>ServletConfigPropertyValues</code>对<code>servlet</code>进行参数初始化</p>
<p>2、参数初始化之后，会把<code>DispatcherServlet</code>转换为<code>BeanWrapper</code>，将其当作一个Bean去管理，这样就可以通过Spring的依赖注入对参数的值进行注入（通过<code>bw.setPropertyValues(pvs, true);</code>进行注入）</p>
<p>3、调用的模板方法<code>initBeanWrapper</code>在<code>HttpServletBean</code>的子类中实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 	加载web.xml中的init-param进行初始化</span></span><br><span class="line"><span class="comment"> *	ServletConfigPropertyValues是HttpServletBean的一个内部类</span></span><br><span class="line"><span class="comment"> *	该类的作用是用来解析web.xml中元素&lt;servlet&gt;的子元素&lt;init-param&gt;的参数值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletConfigPropertyValues</span>(getServletConfig(), <span class="built_in">this</span>.requiredProperties);</span><br><span class="line">   <span class="keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//此处将Servlet转化成BeanWrapper，便于值的注入</span></span><br><span class="line">         <span class="type">BeanWrapper</span> <span class="variable">bw</span> <span class="operator">=</span> PropertyAccessorFactory.forBeanPropertyAccess(<span class="built_in">this</span>);</span><br><span class="line">         <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextResourceLoader</span>(getServletContext());</span><br><span class="line">         bw.registerCustomEditor(Resource.class, <span class="keyword">new</span> <span class="title class_">ResourceEditor</span>(resourceLoader, getEnvironment()));</span><br><span class="line">          <span class="comment">//此处调用的是模板方法</span></span><br><span class="line">         initBeanWrapper(bw);</span><br><span class="line">          <span class="comment">//把初始配置设置给DispatcherServlet</span></span><br><span class="line">         bw.setPropertyValues(pvs, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Failed to set bean properties on servlet &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   initServletBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、<code>initBeanWrapper</code>方法在FrameworkServlet类中的重写实现，主要是对web上下文进行初始化，代码如下：</p>
<p>注意：<code>ContextLoaderListener</code>加载的时候已经创建了<code>WebApplicationContext</code>实例，这里是对这个实例的进一步补充初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">   getServletContext().log(<span class="string">&quot;Initializing Spring &quot;</span> + getClass().getSimpleName() + <span class="string">&quot; &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Initializing Servlet &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//初始化WebApplicationContext</span></span><br><span class="line">      <span class="built_in">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">       <span class="comment">//模板方法，在子类中实现</span></span><br><span class="line">      initFrameworkServlet();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ServletException | RuntimeException ex) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;Context initialization failed&quot;</span>, ex);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.enableLoggingRequestDetails ?</span><br><span class="line">            <span class="string">&quot;shown which may lead to unsafe logging of potentially sensitive data&quot;</span> :</span><br><span class="line">            <span class="string">&quot;masked to prevent unsafe logging of potentially sensitive data&quot;</span>;</span><br><span class="line">      logger.debug(<span class="string">&quot;enableLoggingRequestDetails=&#x27;&quot;</span> + <span class="built_in">this</span>.enableLoggingRequestDetails +</span><br><span class="line">            <span class="string">&quot;&#x27;: request parameters and headers will be &quot;</span> + value);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Completed initialization in &quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、initWebApplicationContext方法主要是负责初始化DispatcherServlet自己的应用上下文</p>
<p>先查看<code>FrameworkServlet</code>在构造时，是否传入一个<code>WebApplicationContext</code>，如果不会就会查找，仍然没有查到，则会自己创建一个<code>WebApplicationContext</code>，最后对WebApplicationContext进行onRefresh()操作完成对上下文的创建，onRefresh还是一个模板方法，让子类实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取rootContext，如果在web.xml中配置了ContextLoaderListener，那么这个就是rootContext</span></span><br><span class="line">   <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">         WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">   <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断FrameworkServlet的构造方法是否传入了webApplicationContext，如果有，就使用传入的</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">      wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">      <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">         <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">         <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">            <span class="comment">//如果context还没有被refresh，需要设置父context或者设置应用上下文的id等</span></span><br><span class="line">            <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//在没有明确的父context情况下，注入rootContext的实例</span></span><br><span class="line">               cwac.setParent(rootContext);</span><br><span class="line">            &#125;</span><br><span class="line">            configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">      wac = findWebApplicationContext();</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果最终没有传入也没有找到WebApplicationContext的话，就自己创建一个</span></span><br><span class="line">   <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">       wac = createWebApplicationContext(rootContext);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;、</span><br><span class="line">          <span class="comment">//模板方法，让子类实现</span></span><br><span class="line">         onRefresh(wac);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">      <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">      getServletContext().setAttribute(attrName, wac);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="RequestMappingHandlerMapping"><a href="#RequestMappingHandlerMapping" class="headerlink" title="RequestMappingHandlerMapping"></a>RequestMappingHandlerMapping</h1><p>RequestMappingHandlerMapping 初始化时，会收集所有 @RequestMapping 映射信息，封装为 Map，其中</p>
<ul>
<li>key 是 RequestMappingInfo 类型，包括请求路径、请求方法等信息</li>
<li>value 是 HandlerMethod 类型，包括控制器方法对象、控制器对象</li>
<li>有了这个 Map，就可以在请求到达时，快速完成映射，找到 HandlerMethod 并与匹配的拦截器一起返回给 DispatcherServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A20</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(A20.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AnnotationConfigServletWebServerApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>(WebConfig.class);</span><br><span class="line">        <span class="comment">//解析@RequestMapping以及派生注解，生成路径和控制器方法的映射关系，在初始化时就生成了</span></span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">handlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="comment">//获取映射结果（key封装了路径信息和请求类型，value为控制器方法）</span></span><br><span class="line">        Map&lt;RequestMappingInfo, HandlerMethod&gt; handlerMethods = handlerMapping.getHandlerMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求来了，获取控制器方法，返回一个处理器执行链对象</span></span><br><span class="line">        <span class="comment">//HandlerExecutionChain with [com.itheima.a20.Controller1#test1()] and 0 interceptors</span></span><br><span class="line">        <span class="type">HandlerExecutionChain</span> <span class="variable">chain</span> <span class="operator">=</span> handlerMapping.getHandler(<span class="keyword">new</span> <span class="title class_">MockHttpServletRequest</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/test1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="RequestMappingHandlerAdapter"><a href="#RequestMappingHandlerAdapter" class="headerlink" title="RequestMappingHandlerAdapter"></a>RequestMappingHandlerAdapter</h1><p>因为RequestMappingHandlerAdapter里面invokeHandlerMethod方法是私有的，所以我们创建一个子类去继承他，然后重写该方法，将该方法改为public</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title class_">RequestMappingHandlerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">invokeHandlerMethod</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RequestMappingHandlerAdapter 内部含有大量的web基础组件来协助完成一整个请求处理，因此它可以被描述为单个请求的调度、处理中心，如：</p>
<ul>
<li>HandlerMethodArgumentResolver 解析控制器方法参数</li>
<li>HandlerMethodReturnValueHandler 处理控制器方法返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//创建一个虚拟的请求和响应对象</span></span><br><span class="line">    <span class="type">MockHttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpServletRequest</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/test2&quot;</span>);</span><br><span class="line">    request.setParameter(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="type">MockHttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpServletResponse</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析@RequestMapping以及派生注解，生成路径和控制器方法的映射关系，在初始化时就生成了</span></span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">handlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">	<span class="type">MyRequestMappingHandlerAdapter</span> <span class="variable">handlerAdapter</span> <span class="operator">=</span> context.getBean(MyRequestMappingHandlerAdapter.class);</span><br><span class="line">	<span class="comment">//参数一：请求对象</span></span><br><span class="line">	<span class="comment">//参数二：响应对象</span></span><br><span class="line">	<span class="comment">//参数三：handlerMethod对象</span></span><br><span class="line">	handlerAdapter.invokeHandlerMethod(request,response, (HandlerMethod) chain.getHandler());</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取多个参数解析器</span></span><br><span class="line">    List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = handlerAdapter.getArgumentResolvers();</span><br><span class="line">    <span class="keyword">for</span> (HandlerMethodArgumentResolver argumentResolver : argumentResolvers) &#123;</span><br><span class="line">            System.out.println(argumentResolver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取所有返回值处理器</span></span><br><span class="line">    <span class="keyword">for</span> (HandlerMethodReturnValueHandler returnValueHandler : handlerAdapter.getReturnValueHandlers()) &#123;</span><br><span class="line">        System.out.println(returnValueHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义参数解析器"><a href="#自定义参数解析器" class="headerlink" title="自定义参数解析器"></a>自定义参数解析器</h2><img src="/2022/08/19/SpringMVC/5.png" style="zoom:75%;">

<img src="/2022/08/19/SpringMVC/6.png" style="zoom:75%;">

<p>为了让handlerAdapter能够识别自定义的参数解析器，在Config里调用setCustomArgumentResolvers方法将自定义的参数解析器加入到handlerAdapter中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">requestMappingHandlerAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">TokenArgumentResolver</span> <span class="variable">tokenArgumentResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenArgumentResolver</span>();</span><br><span class="line">    <span class="type">MyRequestMappingHandlerAdapter</span> <span class="variable">handlerAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRequestMappingHandlerAdapter</span>();</span><br><span class="line">    handlerAdapter.setCustomArgumentResolvers(List.of(tokenArgumentResolver));</span><br><span class="line">    <span class="keyword">return</span> handlerAdapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建自定义的参数解析器（实现HandlerMethodArgumentResolver接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenArgumentResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 是否支持某个参数</span></span><br><span class="line">    <span class="comment">// 如果参数上标注了@Token注解，那么才需要进行解析</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="type">Token</span> <span class="variable">token</span> <span class="operator">=</span> parameter.getParameterAnnotation(Token.class);</span><br><span class="line">        <span class="keyword">return</span> token != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 解析参数</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                                  NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> webRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建虚拟请求，并进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AnnotationConfigServletWebServerApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>(WebConfig.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个虚拟的请求和响应对象</span></span><br><span class="line"><span class="type">MockHttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpServletRequest</span>(<span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;/test3&quot;</span>);</span><br><span class="line">request.addHeader(<span class="string">&quot;token&quot;</span>,<span class="string">&quot;令牌&quot;</span>);</span><br><span class="line"><span class="type">MockHttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpServletResponse</span>();</span><br><span class="line"><span class="type">MyRequestMappingHandlerAdapter</span> <span class="variable">handlerAdapter</span> <span class="operator">=</span> context.getBean(MyRequestMappingHandlerAdapter.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析@RequestMapping以及派生注解，生成路径和控制器方法的映射关系，在初始化时就生成了</span></span><br><span class="line"><span class="type">RequestMappingHandlerMapping</span> <span class="variable">handlerMapping</span> <span class="operator">=</span> </span><br><span class="line">    context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求来了，获取控制器方法，返回一个处理器执行链对象</span></span><br><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">chain</span> <span class="operator">=</span> handlerMapping.getHandler(request);</span><br><span class="line"></span><br><span class="line"><span class="type">MyRequestMappingHandlerAdapter</span> <span class="variable">handlerAdapter</span> <span class="operator">=</span> </span><br><span class="line">    context.getBean(MyRequestMappingHandlerAdapter.class);</span><br><span class="line"></span><br><span class="line">handlerAdapter.invokeHandlerMethod(request,response, (HandlerMethod) chain.getHandler());</span><br></pre></td></tr></table></figure>

<br>

<h2 id="自定义的返回值处理器"><a href="#自定义的返回值处理器" class="headerlink" title="自定义的返回值处理器"></a>自定义的返回值处理器</h2><p><img src="/2022/08/19/SpringMVC/7.png" style="zoom:85%;"><img src="/2022/08/19/SpringMVC/8.png" style="zoom:85%;"></p>
<p> 创建自定义的返回值处理器（实现HandlerMethodReturnValueHandler接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YmlReturnValueHandler</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodReturnValueHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 是否支持某个参数</span></span><br><span class="line">    <span class="comment">// 如果参数上标注了@Yml注解，那么才需要进行解析</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsReturnType</span><span class="params">(MethodParameter returnType)</span> &#123;</span><br><span class="line">        <span class="type">Yml</span> <span class="variable">yml</span> <span class="operator">=</span> returnType.getMethodAnnotation(Yml.class);</span><br><span class="line">        <span class="keyword">return</span> yml != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue   返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">                                  ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 转换返回结果为 yaml 字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>().dump(returnValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 将 yaml 字符串写入响应</span></span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 设置请求已经处理完毕</span></span><br><span class="line">        mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了让handlerAdapter能够识别自定义的返回值解析器，在Config里调用setCustomReturnValueHandlers方法将自定义的返回值解析器加入到handlerAdapter中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">requestMappingHandlerAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">TokenArgumentResolver</span> <span class="variable">tokenArgumentResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenArgumentResolver</span>();</span><br><span class="line">    <span class="type">YmlReturnValueHandler</span> <span class="variable">ymlReturnValueHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YmlReturnValueHandler</span>();</span><br><span class="line"></span><br><span class="line">    handlerAdapter.setCustomReturnValueHandlers(List.of(ymlReturnValueHandler));</span><br><span class="line">    <span class="keyword">return</span> handlerAdapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建虚拟请求，并进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AnnotationConfigServletWebServerApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>(WebConfig.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个虚拟的请求和响应对象</span></span><br><span class="line"><span class="type">MockHttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpServletRequest</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/test4&quot;</span>);</span><br><span class="line"><span class="type">MockHttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockHttpServletResponse</span>();</span><br><span class="line"><span class="type">MyRequestMappingHandlerAdapter</span> <span class="variable">handlerAdapter</span> <span class="operator">=</span> context.getBean(MyRequestMappingHandlerAdapter.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析@RequestMapping以及派生注解，生成路径和控制器方法的映射关系，在初始化时就生成了</span></span><br><span class="line"><span class="type">RequestMappingHandlerMapping</span> <span class="variable">handlerMapping</span> <span class="operator">=</span> </span><br><span class="line">    context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求来了，获取控制器方法，返回一个处理器执行链对象</span></span><br><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">chain</span> <span class="operator">=</span> handlerMapping.getHandler(request);</span><br><span class="line"></span><br><span class="line"><span class="type">MyRequestMappingHandlerAdapter</span> <span class="variable">handlerAdapter</span> <span class="operator">=</span> </span><br><span class="line">    context.getBean(MyRequestMappingHandlerAdapter.class);</span><br><span class="line"></span><br><span class="line">handlerAdapter.invokeHandlerMethod(request,response, (HandlerMethod) chain.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查响应结果</span></span><br><span class="line"><span class="type">byte</span>[] content = response.getContentAsByteArray();</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(content, StandardCharsets.UTF_8));</span><br><span class="line"><span class="comment">//!!com.itheima.a20.Controller1$User &#123;age: 18, name: 张三&#125;</span></span><br></pre></td></tr></table></figure>

<br>
]]></content>
      <categories>
        <category>spring高级</category>
      </categories>
      <tags>
        <tag>底层源码</tag>
        <tag>spring高级</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP</title>
    <url>/2022/08/16/AOP/</url>
    <content><![CDATA[<h1 id="ajc编译器"><a href="#ajc编译器" class="headerlink" title="ajc编译器"></a>ajc编译器</h1><p><strong style="color:red">使用aspectj编译器插件来改动class类文件来实现增强（在编译阶段）</strong></p>
<p><strong style="color:red">编译器增强能突破代理仅能通过方法重写增强的限制：可以对构造方法、静态方法等实现增强</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectj-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.14</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;complianceLevel&gt;<span class="number">1.8</span>&lt;/complianceLevel&gt;</span><br><span class="line">        &lt;source&gt;<span class="number">8</span>&lt;/source&gt;</span><br><span class="line">        &lt;target&gt;<span class="number">8</span>&lt;/target&gt;</span><br><span class="line">        &lt;showWeaveInfo&gt;<span class="literal">true</span>&lt;/showWeaveInfo&gt;</span><br><span class="line">        &lt;verbose&gt;<span class="literal">true</span>&lt;/verbose&gt;</span><br><span class="line">        &lt;Xlint&gt;ignore&lt;/Xlint&gt;</span><br><span class="line">        &lt;encoding&gt;UTF-<span class="number">8</span>&lt;/encoding&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">                &lt;goal&gt;test-compile&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<br>
<strong style="color:red">因为idea 不会调用 ajc 编译器，所以一定要用 maven 的 compile 来编译</strong>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A09</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(A09.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">            SpringApplication.run(A09.class, args);</span><br><span class="line">        </span><br><span class="line">        <span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        log.debug(<span class="string">&quot;service class: &#123;&#125;&quot;</span>, service.getClass());</span><br><span class="line">        service.foo();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="agent-类加载"><a href="#agent-类加载" class="headerlink" title="agent 类加载"></a>agent 类加载</h1><p>运行时需要在 VM options 里加入<code>-javaagent:(maven仓库地址)/org/aspectj/aspectjweaver/1.9.7/aspectjweaver-1.9.7.jar</code></p>
<p><strong style="color:red">类加载时修改 .class 文件实现增强</strong></p>
<br>

<h1 id="Proxy增强（JDK）"><a href="#Proxy增强（JDK）" class="headerlink" title="Proxy增强（JDK）"></a>Proxy增强（JDK）</h1><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jdk 只能针对接口代理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] param)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 目标对象</span></span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">        <span class="comment">//类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> JdkProxyDemo.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//三个参数分别为 </span></span><br><span class="line">        <span class="comment">// loader：类加载器，用来加载在运行期间动态生成的字节码</span></span><br><span class="line">        <span class="comment">// Class[]&#123;Foo.class&#125;：代理类将要实现的接口</span></span><br><span class="line">        <span class="comment">// 代理类将来要调用代理类方法时要执行的行为</span></span><br><span class="line">        <span class="type">Foo</span> <span class="variable">proxy</span> <span class="operator">=</span> (Foo) Proxy.newProxyInstance(loader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Foo.class&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="comment">//三个参数分别是代理对象本身，正在执行的方法对象，方法传递的参数</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">                <span class="comment">//目标.方法(参数);</span></span><br><span class="line">                <span class="comment">//方法.invoke(目标,参数);</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">                <span class="comment">//让代理也返回目标方法执行的结果</span></span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        proxy.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong style="color:red">代理对象和目标对象都实现了<code>Foo</code>接口，是兄弟关系。代理对象类型不能强转成目标对象类型</strong></p>
<p><strong style="color:red">目标类定义的时候可以加<code>final</code>修饰</strong></p>
<br>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong style="color:red">1、</strong>先用代码简单模拟一下JDK动态代理。先定义一个Foo接口，里面有一个foo方法，再定义一个Target类来实现这个接口，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 功能增强</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 调用目标</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Target</span>().foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Foo</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>();</span><br><span class="line">        proxy.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来对<code>Target</code>类中的<code>foo()</code>方法进行增强</p>
<p>首先想再定义一个类实现<code>Foo</code>接口，然后在<code>foo()</code>中编写增强代码，接着再<code>new</code>一个<code>Target</code>对象，调用它的<code>foo()</code>方法，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 功能增强</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 调用目标</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Target</span>().foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试运行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Foo</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>();</span><br><span class="line">        proxy.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>
<strong style="color:red">2、</strong>上面的代码把功能增强的代码和调用目标的代码都固定在了代理类的内部，不太灵活。

<p><strong style="color:red">因此可以通过定义一个<code>InvocationHandler</code>接口的方式来将这部分代码解耦出来，代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Foo</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 1. 功能增强</span></span><br><span class="line">                System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">                <span class="comment">// 2. 调用目标</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Target</span>().foo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        proxy.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        h.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p><strong style="color:red">3、</strong>虽然将功能增强的代码和调用目标的代码通过接口的方式独立出来了，但是如果此时接口中新增了一个方法<code>bar()</code>，Target类和<code>$Proxy0</code>类中都要实现bar()方法，那么调用proxy的<code>foo()</code>和<code>bar()</code>方法都将间接调用目标对象的foo()方法，因为在<code>InvocationHandler</code>的<code>invoke()</code>方法中调用的是<code>target.foo()</code>方法</p>
<img src="/2022/08/16/AOP/2.png" style="zoom: 80%;">

<img src="/2022/08/16/AOP/1.png" style="zoom: 80%;">

<br>

<p><strong style="color:red">4、改进为代理类中调用方法的时候，通过反射把接口中对应的方法<code>Method</code>对象作为参数传给<code>InvocationHandler</code></strong>，这样就可以通过保证调用proxy调用方法时一定能在invoke中调用对应的方法</p>
<p>5、同时，修改Foo接口的中的<code>bar()</code>方法，使其具有<code>int</code>类型的返回值，因此<code>InvocationHandler</code>的<code>invoke()</code>方法也得有返回值，同时将代理对象本身作为第一个参数，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A12</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target bar&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    interface InvocationHandler &#123;</span></span><br><span class="line"><span class="comment">//        Object invoke(Object proxy, Method method, Object[] args) throws Throwable;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] param)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Foo</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">                <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">                <span class="comment">//1、实现功能增强</span></span><br><span class="line">                System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">                <span class="comment">//2、调用目标</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(<span class="keyword">new</span> <span class="title class_">Target</span>(),args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        proxy.foo();</span><br><span class="line">        proxy.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当每次调用foo或者bar方法时，多次加载。此处使用静态代码块对foo和bar进行初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="comment">//与目标实现一个共同的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造方法传递InvocationHandler</span></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler h)&#123;</span><br><span class="line">        <span class="built_in">super</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将foo方法和方法参数进行传递（此处没有参数，使用Object[0]代替）</span></span><br><span class="line">            h.invoke(<span class="built_in">this</span>,foo,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//运行异常直接抛</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">            <span class="comment">//检查异常，转化后抛</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将bar方法和方法参数进行传递（此处没有参数，使用Object[0]代替）</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> h.invoke(<span class="built_in">this</span>,bar, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">            <span class="comment">//运行异常直接抛出</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">            <span class="comment">//检查异常，转化为运行时异常后</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对foo和bar初始化</span></span><br><span class="line">    <span class="keyword">static</span> Method foo;</span><br><span class="line">    <span class="keyword">static</span> Method bar;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取 foo方法对象</span></span><br><span class="line">            foo = Foo.class.getMethod(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="comment">//获取 bar方法对象</span></span><br><span class="line">            bar = Foo.class.getMethod(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="反射优化"><a href="#反射优化" class="headerlink" title="反射优化"></a>反射优化</h2><p><strong style="color:red">前 16 次是调用了java本地的MethodAccessor 的实现类，反射性能较低</strong></p>
<p><strong style="color:red">第 17 次调用会生成代理类，优化为非反射调用（用 arthas 的 jad 工具反编译第 17 次调用生成的代理类）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethodInvoke</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">foo</span> <span class="operator">=</span> TestMethodInvoke.class.getMethod(<span class="string">&quot;foo&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">17</span>; i++) &#123;</span><br><span class="line">            show(i, foo);</span><br><span class="line">            foo.invoke(<span class="literal">null</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法反射调用时, 底层 MethodAccessor 的实现类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i, Method foo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getMethodAccessor</span> <span class="operator">=</span> Method.class.getDeclaredMethod(<span class="string">&quot;getMethodAccessor&quot;</span>);</span><br><span class="line">        getMethodAccessor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> getMethodAccessor.invoke(foo);</span><br><span class="line">        <span class="keyword">if</span> (invoke == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;:&quot;</span> + <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">delegate</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;jdk.internal.reflect.DelegatingMethodAccessorImpl&quot;</span>).getDeclaredField(<span class="string">&quot;delegate&quot;</span>);</span><br><span class="line">        delegate.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(i + <span class="string">&quot;:&quot;</span> + delegate.get(invoke));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(i + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/08/16/AOP/3.png" style="zoom: 80%;">

<img src="/2022/08/16/AOP/4.png" style="zoom: 80%;">

<br>

<h1 id="Proxy增强（cglib）"><a href="#Proxy增强（cglib）" class="headerlink" title="Proxy增强（cglib）"></a>Proxy增强（cglib）</h1><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;`</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理是子类型, 目标是父类型</span></span><br><span class="line">    <span class="comment">// 如果目标对象为final，或者代理类执行的方法为final，则无法进行代理</span></span><br><span class="line">    <span class="comment">// 而jdk代理都实现了接口，代理类和目标类是平级的关系，所以可以进行代理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] param)</span> &#123;</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">        <span class="comment">//MethodInterceptor()决定了代理类中方法执行的行为</span></span><br><span class="line">        <span class="type">Target</span> <span class="variable">proxy</span> <span class="operator">=</span> (Target) Enhancer.create(Target.class, <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//四个参数分别是：</span></span><br><span class="line">            <span class="comment">//1、代理对象本身</span></span><br><span class="line">            <span class="comment">//2、当前代理类中执行的方法</span></span><br><span class="line">            <span class="comment">//3、方法执行时的参数</span></span><br><span class="line">            <span class="comment">//4、方法对象（可以避免反射调用方法）</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span></span><br><span class="line">                    <span class="params">(Object p, Method method, Object[] args, MethodProxy methodProxy)</span><span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">                </span><br><span class="line"><span class="comment">//                Object res = method.invoke(target, args);</span></span><br><span class="line"><span class="comment">//                Object res = methodProxy.invoke(target, args);//内部没有用到反射，需要目标</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> methodProxy.invokeSuper(p, args);<span class="comment">//内部没有用到反射，需要代理</span></span><br><span class="line">                 </span><br><span class="line">                System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        proxy.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">intercept</span> <span class="params">(Object p, Method method, Object[] args, MethodProxy methodProxy)</span></span><br></pre></td></tr></table></figure>

<p><strong style="color:red"><code>MethodInterceptor</code>的<code>intercept()</code>方法的第2个参数是method，可以通过反射对目标方法进行调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args); <span class="comment">// 用方法反射调用目标</span></span><br></pre></td></tr></table></figure>

<p>第4个参数proxy，可以不用反射就能对目标方法进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proxy.invoke(target, args); <span class="comment">// 需要传目标类 （spring用的是这种）</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proxy.invokeSuper(obj, args); <span class="comment">// 不需要目标类，需要代理对象本身</span></span><br></pre></td></tr></table></figure>

<p>代理类不需要实现接口</p>
<p>代理对象和目标对象是父子关系，代理类继承于目标类；</p>
<p>目标类定义的时候不能加final修饰，否则代理类就无法继承目标类了，会报IllegalArgumentException</p>
<p><strong style="color:red">目标类方法定义的时候不能加final修饰，否则代理类继承目标类以后就不能重写目标类的方法了</strong></p>
<br>

<h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><h3 id="代码模拟cglib动态代理"><a href="#代码模拟cglib动态代理" class="headerlink" title="代码模拟cglib动态代理"></a>代码模拟cglib动态代理</h3><p>先创建一个目标类，其中有三个方法，再创建一个代理类继承目标类，并且通过构造方法传入MethodInterceptor对象用于回调。重写目标类后，通过调用intercept方法实现功能增强（静态代码块作用与jdk动态代理中类似）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;save()&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">int</span> i)</span> &#123;System.out.println(<span class="string">&quot;save(int)&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">long</span> j)</span> &#123;System.out.println(<span class="string">&quot;save(long)&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">extends</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MethodInterceptor methodInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodInterceptor</span><span class="params">(MethodInterceptor methodInterceptor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodInterceptor = methodInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//第一个参数：代理类对象</span></span><br><span class="line">        <span class="comment">//第二个参数：当前正在执行的方法</span></span><br><span class="line">        <span class="comment">//第三个参数：实参数组</span></span><br><span class="line">        <span class="comment">//第四个参数：方法代理（可以避免反射调用）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodInterceptor.intercept(<span class="built_in">this</span>,save0,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>], <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodInterceptor.intercept(<span class="built_in">this</span>,save1,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;i&#125;, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">long</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodInterceptor.intercept(<span class="built_in">this</span>,save2,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;j&#125;, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Method save0;</span><br><span class="line">    <span class="keyword">static</span> Method save1;</span><br><span class="line">    <span class="keyword">static</span> Method save2;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            save0 = Target.class.getMethod(<span class="string">&quot;save&quot;</span>);</span><br><span class="line">            save1 = Target.class.getMethod(<span class="string">&quot;save&quot;</span>,<span class="type">int</span>.class);</span><br><span class="line">            save2 = Target.class.getMethod(<span class="string">&quot;save&quot;</span>,<span class="type">long</span>.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p> 测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line">    <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">    proxy.setMethodInterceptor(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">intercept</span></span><br><span class="line">            <span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(target, objects);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    proxy.save();</span><br><span class="line">    proxy.save(<span class="number">2</span>);</span><br><span class="line">    proxy.save(<span class="number">5L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="创建MethodProxy"><a href="#创建MethodProxy" class="headerlink" title="创建MethodProxy"></a>创建MethodProxy</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> MethodProxy save0Proxy;</span><br><span class="line"><span class="keyword">static</span> MethodProxy save1Proxy;</span><br><span class="line"><span class="keyword">static</span> MethodProxy save2Proxy;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//第一个参数：目标类型</span></span><br><span class="line">    <span class="comment">//第二个参数：代理的类型</span></span><br><span class="line">    <span class="comment">//第三个参数：用于描述参数和返回值类型 </span></span><br><span class="line">    <span class="comment">//		()V表示无参无返回值，(I)V表示参数为整型无返回值，(J)V表示参数为长整型无返回值</span></span><br><span class="line">    <span class="comment">//第四个参数：带增强功能的方法名</span></span><br><span class="line">    <span class="comment">//第五个参数：带原始功能的方法名</span></span><br><span class="line">    save0Proxy = MethodProxy.create(Target.class,Proxy.class,<span class="string">&quot;()V&quot;</span>,<span class="string">&quot;save&quot;</span>,<span class="string">&quot;saveSuper&quot;</span>);</span><br><span class="line">    save1Proxy = MethodProxy.create(Target.class,Proxy.class,<span class="string">&quot;(I)V&quot;</span>,<span class="string">&quot;save&quot;</span>,<span class="string">&quot;saveSuper&quot;</span>);</span><br><span class="line">    save2Proxy = MethodProxy.create(Target.class,Proxy.class,<span class="string">&quot;(J)V&quot;</span>,<span class="string">&quot;save&quot;</span>,<span class="string">&quot;saveSuper&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带原始功能的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveSuper</span><span class="params">()</span> &#123;<span class="built_in">super</span>.save();&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveSuper</span><span class="params">(<span class="type">int</span> i)</span> &#123;<span class="built_in">super</span>.save(i);&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveSuper</span><span class="params">(<span class="type">long</span> j)</span> &#123;<span class="built_in">super</span>.save(j);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带增强功能的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//第一个参数：代理类对象</span></span><br><span class="line">        <span class="comment">//第二个参数：当前正在执行的方法</span></span><br><span class="line">        <span class="comment">//第三个参数：实参数组</span></span><br><span class="line">        <span class="comment">//第四个参数：代理类对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodInterceptor.intercept(<span class="built_in">this</span>,save0,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>], save0Proxy);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodInterceptor.intercept(<span class="built_in">this</span>,save1,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;i&#125;, save1Proxy);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(<span class="type">long</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodInterceptor.intercept(<span class="built_in">this</span>,save2,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;j&#125;, save2Proxy);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="cglib避免反射调用"><a href="#cglib避免反射调用" class="headerlink" title="cglib避免反射调用"></a><strong style="color:red">cglib避免反射调用</strong></h3><p><strong>MethodProxy在调用invoke和invokeSuper时不会走反射途经，而是通过FastClass来避免反射，cglib在调用方法时，生成两个代理类（为FastClass的子类），代理类中的方法能避免反射</strong></p>
<img src="/2022/08/16/AOP/5.png" style="zoom:80%;">

<br>

<h3 id="调用invoke"><a href="#调用invoke" class="headerlink" title="调用invoke"></a>调用invoke</h3><p><strong>在调用MethodProxy的create静态方法时，底层会创建一个FastClass子类（以下称代理类）来避免反射的调用</strong>（因为该代理类实现了fastClas太多功能，所以不直接继承FastClass类，而是选择其中两个功能进行实现）</p>
<img src="/2022/08/16/AOP/6.png" style="zoom:80%;">

<p><strong style="color:red">1、当我们创建MethodProxy时，会传入signature（包括方法名字和参数返回值）</strong></p>
<p><strong style="color:red">2、代理类中会根据传入的signature编写目标方法的编号（将传入的signature与自定义的signature进行比较）</strong></p>
<p><strong style="color:red">3、代理类中根据获取方法的编号去调用方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetFastClass</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="type">Signature</span> <span class="variable">s0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Signature</span>(<span class="string">&quot;save&quot;</span>,<span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Signature</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Signature</span>(<span class="string">&quot;save&quot;</span>,<span class="string">&quot;(I)V&quot;</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Signature</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Signature</span>(<span class="string">&quot;save&quot;</span>,<span class="string">&quot;(J)V&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取目标方法的编号</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Target</span></span><br><span class="line"><span class="comment">     *      save()         0</span></span><br><span class="line"><span class="comment">     *      save(int)      1</span></span><br><span class="line"><span class="comment">     *      save(long)     2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//signature：包括方法名字、参数返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Signature signature)</span>&#123;</span><br><span class="line">        <span class="comment">//根据方法名字和返回值类型编写编号</span></span><br><span class="line">        <span class="keyword">if</span> (s0.equals(signature)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s1.equals(signature)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s2.equals(signature)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据获取方法的编号，去正常调用目标对象的方法，不通过反射</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="type">int</span> index,Object target,Object[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            ((Target)target).save();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            ((Target)target).save((<span class="type">int</span>) args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">            ((Target) target).save((<span class="type">long</span>) args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无此方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="调用invokeSuper"><a href="#调用invokeSuper" class="headerlink" title="调用invokeSuper"></a>调用invokeSuper</h3><p><strong>与上面调用invoke时步骤基本相同，唯一不同的是：</strong></p>
<p><strong>获取代理类中的方法编号时，应该获取的是带原始功能的方法了，而且在调用目标对象的方法时，也应该调用带原始功能的方法</strong></p>
<img src="/2022/08/16/AOP/8.png" style="zoom:70%;">

<p><strong style="color:red">原因：MethodProxy调用invokeSuper是在MethodInterceptor中执行的，增强功能已经在外面实现了，当获取到的是增强功能时，里面又间接调用了MethodInterceptor，进入循环调用</strong></p>
<img src="/2022/08/16/AOP/9.png" style="zoom:70%;">

<br>

<p><strong style="color:red">代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFastClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Signature</span> <span class="variable">s0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Signature</span>(<span class="string">&quot;saveSuper&quot;</span>,<span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Signature</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Signature</span>(<span class="string">&quot;saveSuper&quot;</span>,<span class="string">&quot;(I)V&quot;</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Signature</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Signature</span>(<span class="string">&quot;saveSuper&quot;</span>,<span class="string">&quot;(J)V&quot;</span>);</span><br><span class="line">    <span class="comment">//获取代理类中方法的编号</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Proxy</span></span><br><span class="line"><span class="comment">     *      saveSuper()         0</span></span><br><span class="line"><span class="comment">     *      saveSuper(int)      1</span></span><br><span class="line"><span class="comment">     *      saveSuper(long)     2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//signature：包括方法名字、参数返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Signature signature)</span>&#123;</span><br><span class="line">        <span class="comment">//根据方法名字和返回值类型编写编号</span></span><br><span class="line">        <span class="keyword">if</span> (s0.equals(signature)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s1.equals(signature)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s2.equals(signature)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据获取方法的编号，去正常调用目标对象的方法，不通过反射</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="type">int</span> index,Object proxy,Object[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            ((Proxy)proxy).saveSuper();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            ((Proxy)proxy).saveSuper((<span class="type">int</span>) args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">            ((Proxy) proxy).saveSuper((<span class="type">long</span>) args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无此方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">ProxyFastClass</span> <span class="variable">fastClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFastClass</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> fastClass.getIndex(<span class="keyword">new</span> <span class="title class_">Signature</span>(<span class="string">&quot;saveSuper&quot;</span>, <span class="string">&quot;()V&quot;</span>));</span><br><span class="line">        System.out.println(index);</span><br><span class="line">        fastClass.invoke(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Proxy</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><strong>与jdk对比，jdk是调用17次时，针对一个方法产生一个代理类</strong></p>
<p><strong style="color:red">cglib是MethodProxy调用的时候就产生代理，一个proxy代理类对应两个fastClass的子类</strong></p>
<p><strong>（一个是MethodProxy调用invoke时结合目标使用，一个是MethodProxy调用invokeSuper时结合代理使用）</strong></p>
<img src="/2022/08/16/AOP/7.png" style="zoom:70%;">

<br>

<h1 id="Spring选择代理"><a href="#Spring选择代理" class="headerlink" title="Spring选择代理"></a>Spring选择代理</h1><blockquote>
<p>切点：增强的匹配规则</p>
<p>通知：增强的逻辑</p>
<p>切面：切点和通知组合</p>
<p>两个切面的概念</p>
<p>aspect &#x3D; </p>
<p>​			通知1（advice）+ 切点1（pointcut）</p>
<p>​			通知2（advice）+ 切点2（pointcut）</p>
<p>​			通知3（advice）+ 切点3（pointcut）</p>
<p>asvisor &#x3D; 更细粒度的切面，只包含一个通知和切点</p>
<p>在aspect生效之前，会被拆解成多个advisor</p>
</blockquote>
<h2 id="接口及目标类实现"><a href="#接口及目标类实现" class="headerlink" title="接口及目标类实现"></a>接口及目标类实现</h2><p><strong>先创建一个包含又foo和bar方法的接口，再创建一个Target1目标类实现该接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">I1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target1</span> <span class="keyword">implements</span> <span class="title class_">I1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target1 foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target1 bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target2 foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target2 bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="准备切点"><a href="#准备切点" class="headerlink" title="准备切点"></a>准备切点</h2><p><strong>创建切点对象，调用setExpression设置切点表达式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">pointcut.setExpression(<span class="string">&quot;execution(* foo())&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="准备通知"><a href="#准备通知" class="headerlink" title="准备通知"></a>准备通知</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MethodInterceptor</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> invocation.proceed();<span class="comment">//调用目标</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="准备切面"><a href="#准备切面" class="headerlink" title="准备切面"></a>准备切面</h2><p><strong>创建<code>DefaultPointcutAdvisor</code>对象，传入切点和通知</strong></p>
<p><strong>然后再创建<code>ProxyFactory</code>对象，添加目标对象和切面，最后通过代理对象调用方法完成测试</strong></p>
<p><strong>（<code>ProxyFactory</code>内部会根据不同的情况选择cglib或者jdk的代理）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut,advice);</span><br><span class="line"></span><br><span class="line"><span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">factory.setTarget(<span class="keyword">new</span> <span class="title class_">Target1</span>());<span class="comment">//添加目标</span></span><br><span class="line">factory.addAdvisor(advisor);<span class="comment">//添加切面</span></span><br><span class="line"></span><br><span class="line"><span class="type">I1</span> <span class="variable">proxy</span> <span class="operator">=</span> (I1) factory.getProxy();</span><br><span class="line">proxy.foo();</span><br><span class="line">proxy.bar();</span><br></pre></td></tr></table></figure>

<h2 id="选择代理的方式"><a href="#选择代理的方式" class="headerlink" title="选择代理的方式"></a>选择代理的方式</h2><p><code>**ProxyFactory</code>内部存在一个成员变量<code>proxyTargetClass</code>决定spring的代理方式**</p>
<img src="/2022/08/16/AOP/10.png" style="zoom:70%;">

<h3 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h3><p><strong><code>proxyTargetClass = false</code>，而且目标实现了接口, 使用 <code>JdkDynamicAopProxy</code> 实现（默认<code>proxyTargetClass</code>为alse）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut,advice);</span><br><span class="line"></span><br><span class="line"><span class="type">Target1</span> <span class="variable">target1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target1</span>();</span><br><span class="line"><span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">factory.setTarget(target1);<span class="comment">//添加目标</span></span><br><span class="line">factory.addAdvisor(advisor);<span class="comment">//添加切面</span></span><br><span class="line"></span><br><span class="line">factory.setInterfaces(target1.getClass().getInterfaces());<span class="comment">//添加目标类上实现的接口</span></span><br><span class="line"><span class="comment">//factory.setProxyTargetClass(false);</span></span><br><span class="line"></span><br><span class="line"><span class="type">I1</span> <span class="variable">proxy</span> <span class="operator">=</span> (I1) factory.getProxy();</span><br><span class="line"></span><br><span class="line">proxy.foo();</span><br><span class="line">proxy.bar();</span><br></pre></td></tr></table></figure>

<h3 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h3><p><strong><code>proxyTargetClass = false</code>，而且目标没有接口, 使用 <code>ObjenesisCglibAopProxy</code> 实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut,advice);</span><br><span class="line"></span><br><span class="line"><span class="type">Target1</span> <span class="variable">target1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target1</span>();</span><br><span class="line"><span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">factory.setTarget(target1);<span class="comment">//添加目标</span></span><br><span class="line">factory.addAdvisor(advisor);<span class="comment">//添加切面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//factory.setProxyTargetClass(false);</span></span><br><span class="line"></span><br><span class="line"><span class="type">I1</span> <span class="variable">proxy</span> <span class="operator">=</span> (I1) factory.getProxy();</span><br><span class="line"></span><br><span class="line">proxy.foo();</span><br><span class="line">proxy.bar();</span><br></pre></td></tr></table></figure>

<h3 id="情况3"><a href="#情况3" class="headerlink" title="情况3"></a>情况3</h3><p><strong><code>proxyTargetClass = true</code>总是使用 <code>ObjenesisCglibAopProxy</code> 实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut,advice);</span><br><span class="line"></span><br><span class="line"><span class="type">Target1</span> <span class="variable">target1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target1</span>();</span><br><span class="line"><span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">factory.setTarget(target1);<span class="comment">//添加目标</span></span><br><span class="line">factory.addAdvisor(advisor);<span class="comment">//添加切面</span></span><br><span class="line"></span><br><span class="line">factory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">I1</span> <span class="variable">proxy</span> <span class="operator">=</span> (I1) factory.getProxy();</span><br><span class="line"></span><br><span class="line">proxy.foo();</span><br><span class="line">proxy.bar();</span><br></pre></td></tr></table></figure>

<br>

<h1 id="切点匹配"><a href="#切点匹配" class="headerlink" title="切点匹配"></a>切点匹配</h1><blockquote>
<p>先定义一个静态类T1，其中有用@Transactional注解的foo方法和一个普通的bar方法</p>
<p>再定义一个使用@Transactional注解标注的静态类T2</p>
<p>然后再定义一个用@Transactional注解标注的接口，内有方法foo，最后创建一个类实现该接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T1</span> &#123;</span><br><span class="line">       <span class="meta">@Transactional</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T2</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">I3</span> &#123; <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>; &#125;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T3</span> <span class="keyword">implements</span> <span class="title class_">I3</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<br>

<p><strong>1、创建AspectJExpressionPointcut对象，然后调用setExpression方法，在其中填写切点表达式<a href="https://www.cnblogs.com/zhangxufeng/p/9160869.html">（点我）</a></strong></p>
<p><strong>2、调用matches方法判断是否与切点表达式匹配，第一个参数为对应类的方法名，第二个参数为对应类的class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A16</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//判断方法是否与切点表达式匹配</span></span><br><span class="line">        <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">        pointcut1.setExpression(<span class="string">&quot;execution(* bar())&quot;</span>);</span><br><span class="line">        System.out.println(pointcut1.matches(T1.class.getMethod(<span class="string">&quot;foo&quot;</span>), T1.class));</span><br><span class="line">        System.out.println(pointcut1.matches(T1.class.getMethod(<span class="string">&quot;bar&quot;</span>), T1.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断方法上的注解类型是否与切点表达式定义的类型匹配</span></span><br><span class="line">        <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">        pointcut2.setExpression(<span class="string">&quot;@annotation(org.springframework.transaction.annotation.Transactional)&quot;</span>);</span><br><span class="line">        System.out.println(pointcut2.matches(T1.class.getMethod(<span class="string">&quot;foo&quot;</span>), T1.class));</span><br><span class="line">        System.out.println(pointcut2.matches(T1.class.getMethod(<span class="string">&quot;bar&quot;</span>), T1.class));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、为了保证当出现T3类的情况时（实现了被注解标注的接口）<code>@Transactional</code>注解能够被匹配到，在spring内部并不是采用以上方法匹配<code>@Transactional</code>注解，而是创建StaticMethodMatcherPointcut对象并重写matches方法，在方法内部添加匹配注解的逻辑</strong></p>
<p><a href="https://juejin.cn/post/6926532878247575565#heading-6">spring探秘之组合注解的处理（点我）</a></p>
<img src="/2022/08/16/AOP/11.png" style="zoom:80%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匹配@Transactional注解</span></span><br><span class="line"><span class="type">StaticMethodMatcherPointcut</span> <span class="variable">pointcut3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticMethodMatcherPointcut</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">        <span class="comment">//检查方法上是否添加@Transactional注解</span></span><br><span class="line">        <span class="type">MergedAnnotations</span> <span class="variable">annotations</span> <span class="operator">=</span> MergedAnnotations.from(method);</span><br><span class="line">        <span class="keyword">if</span> (annotations.isPresent(Transactional.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查类上是否添加@Transactional注解，并添加检查策略</span></span><br><span class="line">        annotations = MergedAnnotations.from(targetClass, MergedAnnotations.SearchStrategy.TYPE_HIERARCHY);</span><br><span class="line">        <span class="keyword">if</span> (annotations.isPresent(Transactional.class))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">System.out.println(pointcut3.matches(T1.class.getMethod(<span class="string">&quot;foo&quot;</span>), T1.class));	<span class="comment">//true</span></span><br><span class="line">System.out.println(pointcut3.matches(T1.class.getMethod(<span class="string">&quot;bar&quot;</span>), T1.class));	<span class="comment">//false</span></span><br><span class="line">System.out.println(pointcut3.matches(T2.class.getMethod(<span class="string">&quot;foo&quot;</span>), T2.class));	<span class="comment">//true</span></span><br><span class="line">System.out.println(pointcut3.matches(T3.class.getMethod(<span class="string">&quot;foo&quot;</span>), T3.class));	<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<br>

<h1 id="Aspect与Advisor"><a href="#Aspect与Advisor" class="headerlink" title="@Aspect与Advisor"></a>@Aspect与Advisor</h1><blockquote>
<p><strong>先准备一个高级切面类<code>Aspect1</code>和一个低级切面类<code>Config</code>，并把两个切面类注册进bean，添加处理@Bean的后处理器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">   context.registerBean(<span class="string">&quot;aspect1&quot;</span>,Aspect1.class);</span><br><span class="line">   context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">   context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">   context.refresh();</span><br><span class="line">   <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">       System.out.println(name);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;target1 foo&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;target2 bar&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Aspect</span> <span class="comment">//高级切面类</span></span><br><span class="line">&gt;<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Aspect1</span> &#123;</span><br><span class="line">   <span class="meta">@Before(&quot;execution(* foo())&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;aspect1 before&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@After(&quot;execution(* foo())&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;aspect1 after&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Configuration</span></span><br><span class="line">&gt;<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">   <span class="comment">//低级切面：由一个切点和一个通知组成</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Advisor <span class="title function_">advisor3</span><span class="params">(MethodInterceptor advice3)</span>&#123;</span><br><span class="line">       <span class="comment">//定义切点</span></span><br><span class="line">       <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">       pointcut.setExpression(<span class="string">&quot;execution(* foo())&quot;</span>);</span><br><span class="line">       <span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice3);</span><br><span class="line">       <span class="keyword">return</span> advisor;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//定义通知</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> MethodInterceptor <span class="title function_">advice3</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;advice3 before&quot;</span>);</span><br><span class="line">               <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">               System.out.println(<span class="string">&quot;advice3 after&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> res;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="AnnotationAwareAspectJAutoProxyCreator-作用"><a href="#AnnotationAwareAspectJAutoProxyCreator-作用" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator 作用"></a>AnnotationAwareAspectJAutoProxyCreator 作用</h2><p><strong>自动代理后处理器 <code>AnnotationAwareAspectJAutoProxyCreator</code> 会帮我们创建代理</strong></p>
<p><strong>通常代理创建的活在原始对象初始化后执行, 但碰到循环依赖会提前至依赖注入之前执行</strong></p>
<p><strong style="color:red">高级的 @Aspect 切面会转换为低级的 Advisor 切面</strong></p>
<br>

<h3 id="findEligibleAdvisors方法"><a href="#findEligibleAdvisors方法" class="headerlink" title="findEligibleAdvisors方法"></a>findEligibleAdvisors方法</h3><p><strong>解析某个类的切面，一部分切面是低级的，如准备代码中的advisor3；另一部分是高级的, 由解析 @Aspect 后获得。解析时会将高级切面解析成多个低级切面</strong></p>
<img src="/2022/08/16/AOP/14.png" style="zoom:80%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AnnotationAwareAspectJAutoProxyCreator</span> <span class="variable">creator</span> <span class="operator">=</span> context.getBean(AnnotationAwareAspectJAutoProxyCreator.class);</span><br><span class="line">List&lt;Advisor&gt; advisors = creator.findEligibleAdvisors(Target1.class, <span class="string">&quot;target1&quot;</span>);</span><br></pre></td></tr></table></figure>

<br>

<h3 id="wrapIfNecessary方法"><a href="#wrapIfNecessary方法" class="headerlink" title="wrapIfNecessary方法"></a>wrapIfNecessary方法</h3><p><strong>判断是否有必要对目标进行代理，内部调用 <code>findEligibleAdvisors</code>, 只要返回集合不空, 则表示需要创建代理</strong></p>
<img src="/2022/08/16/AOP/15.png" style="zoom:80%;">

<p><strong>如下面代码，因为在准备时Target2中的bar方法，没有与切点进行匹配，所以Target2在调用<code>findEligibleAdvisors</code>方法后获取的切面集合为空，所以没必要进行代理</strong></p>
<img src="/2022/08/16/AOP/16.png" style="zoom:80%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> creator.wrapIfNecessary(<span class="keyword">new</span> <span class="title class_">Target1</span>(), <span class="string">&quot;target1&quot;</span>, <span class="string">&quot;target1&quot;</span>);</span><br><span class="line">System.out.println(o1.getClass());</span><br><span class="line"><span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> creator.wrapIfNecessary(<span class="keyword">new</span> <span class="title class_">Target2</span>(), <span class="string">&quot;target2&quot;</span>, <span class="string">&quot;target2&quot;</span>);</span><br><span class="line">System.out.println(o2.getClass());</span><br></pre></td></tr></table></figure>

<br>

<h2 id="代理创建时机"><a href="#代理创建时机" class="headerlink" title="代理创建时机"></a>代理创建时机</h2><p><strong style="color:red">Bean创建的三个重要阶段分别为：创建 -&gt; (?） 依赖注入 -&gt; 初始化 (?)</strong></p>
<p><strong style="color:red">代理创建的时机有两个位置，一个是创建Bean和依赖注入之间，另一个是初始化之后</strong></p>
<h3 id="初始化之后"><a href="#初始化之后" class="headerlink" title="初始化之后"></a>初始化之后</h3><p><strong>下面代码中因为Bean1中有foo方法，所以Bean1将会被代理，而且在Bean2中还注入了Bean1。</strong></p>
<p><strong style="color:red">在这种单向的依赖关系下（Bean2依赖Bean1），代理在Bean1的初始化之后创建，在代理创建之后，才继续执行Bean2的构造方法，在Bean2中注入Bean1的代理，最后完成Bean2的初始化</strong></p>
<img src="/2022/08/16/AOP/17.png" style="zoom:80%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切面</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> Advisor <span class="title function_">advisor</span><span class="params">(MethodInterceptor advice)</span> &#123;</span><br><span class="line">           <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">           pointcut.setExpression(<span class="string">&quot;execution(* foo())&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br><span class="line">       &#125;</span><br><span class="line">	<span class="comment">//通知</span></span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> MethodInterceptor <span class="title function_">advice</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (MethodInvocation invocation) -&gt; &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Bean1()&quot;</span>); &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@PostConstruct</span> </span><br><span class="line">   	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Bean1 init()&quot;</span>); &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Bean2()&quot;</span>); &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="meta">@Autowired</span> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean1</span><span class="params">(Bean1 bean1)</span> &#123; </span><br><span class="line">           System.out.println(<span class="string">&quot;Bean2 setBean1(bean1) class is: &quot;</span> + bean1.getClass());</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="meta">@PostConstruct</span> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Bean2 init()&quot;</span>); &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="创建Bean和依赖注入之间"><a href="#创建Bean和依赖注入之间" class="headerlink" title="创建Bean和依赖注入之间"></a>创建Bean和依赖注入之间</h3><p><strong>下面代码中因为Bean1中有foo方法，所以Bean1将会被代理，而且在Bean1中注入了Bean2，在Bean2中注入了Bean1。在这种循环依赖的关系下，代理在Bean1的构造和Bean1的依赖注入之间创建的。</strong></p>
<p><strong style="color:red">原因：因为在Bean1中需要注入Bean2，所以执行完Bean1的构造后，就执行Bean2的构造，因为Bean2中需要注入Bean1的代理，所以再创建Bean1的代理。</strong></p>
<img src="/2022/08/16/AOP/18.png" style="zoom:80%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> Advisor <span class="title function_">advisor</span><span class="params">(MethodInterceptor advice)</span> &#123;</span><br><span class="line">           <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">           pointcut.setExpression(<span class="string">&quot;execution(* foo())&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> MethodInterceptor <span class="title function_">advice</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (MethodInvocation invocation) -&gt; &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Bean1()&quot;</span>); &#125;</span><br><span class="line">   	</span><br><span class="line">   	<span class="meta">@Autowired</span> </span><br><span class="line">   	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean2</span><span class="params">(Bean2 bean2)</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Bean1 setBean2(bean2) class is: &quot;</span> + bean2.getClass());</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@PostConstruct</span> </span><br><span class="line">   	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Bean1 init()&quot;</span>); &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Bean2()&quot;</span>); &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="meta">@Autowired</span> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean1</span><span class="params">(Bean1 bean1)</span> &#123; </span><br><span class="line">           System.out.println(<span class="string">&quot;Bean2 setBean1(bean1) class is: &quot;</span> + bean1.getClass());</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="meta">@PostConstruct</span> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Bean2 init()&quot;</span>); &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="切面顺序控制"><a href="#切面顺序控制" class="headerlink" title="切面顺序控制"></a>切面顺序控制</h2><p><strong>使用<code>@Order</code>注解进行控制，默认是最低优先级，值越小优先级越高</strong></p>
<p><strong style="color:red">注意：可以加在高级切面类上，但对于低级切面类，需要在<code>DefaultPointcutAdvisor</code>类中<code>setOrder</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="comment">//低级切面</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Advisor <span class="title function_">advisor3</span><span class="params">(MethodInterceptor advice3)</span>&#123;</span><br><span class="line">            <span class="comment">//定义切点</span></span><br><span class="line">            <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">            pointcut.setExpression(<span class="string">&quot;execution(* foo())&quot;</span>);</span><br><span class="line">            <span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice3);</span><br><span class="line">            advisor.setOrder(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> advisor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义通知</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> MethodInterceptor <span class="title function_">advice3</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;advice3 before&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">                    System.out.println(<span class="string">&quot;advice3 after&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="高级切面转为低级切面-Before为例"><a href="#高级切面转为低级切面-Before为例" class="headerlink" title="高级切面转为低级切面(@Before为例)"></a>高级切面转为低级切面(@Before为例)</h2><p>类似的有</p>
<ul>
<li>AspectJAroundAdvice (环绕通知)</li>
<li>AspectJAfterReturningAdvice</li>
<li>AspectJAfterThrowingAdvice (环绕通知)</li>
<li>AspectJAfterAdvice (环绕通知)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Aspect</span> &#123;</span><br><span class="line">        <span class="meta">@Before(&quot;execution(* foo())&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before1</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;before1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Before(&quot;execution(* foo())&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before2</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;before2&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;target foo&quot;</span>); &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">AspectInstanceFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(<span class="keyword">new</span> <span class="title class_">Aspect</span>());</span><br><span class="line">    <span class="comment">// 高级切面转低级切面类</span></span><br><span class="line">    List&lt;Advisor&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Method method : Aspect.class.getDeclaredMethods()) &#123;</span><br><span class="line">        <span class="comment">//判断方法上是否有加@Before注解</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(Before.class)) &#123;</span><br><span class="line">            <span class="comment">// 根据@Before注解的value值来生成一个切点对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> method.getAnnotation(Before.class).value();<span class="comment">//切点表达式</span></span><br><span class="line">            <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();<span class="comment">//解析后生成的切点对象</span></span><br><span class="line">            pointcut.setExpression(expression);</span><br><span class="line">            <span class="comment">// 通知类</span></span><br><span class="line">            <span class="type">AspectJMethodBeforeAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJMethodBeforeAdvice</span>(method, pointcut, factory);</span><br><span class="line">            <span class="comment">// 低级切面</span></span><br><span class="line">            <span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br><span class="line">            list.add(advisor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Advisor advisor : list) &#123; System.out.println(advisor); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="静态通知调用"><a href="#静态通知调用" class="headerlink" title="静态通知调用"></a>静态通知调用</h1><h2 id="不同的通知统一转换成环绕通知"><a href="#不同的通知统一转换成环绕通知" class="headerlink" title="不同的通知统一转换成环绕通知"></a>不同的通知统一转换成环绕通知</h2><p>ProxyFactory 在创建代理时，最后调用 advice 的是一个 MethodInvocation 对象（调用链对象）<br>1、因为 advisor 有多个, 且一个套一个调用, 因此需要一个调用链对象<br>2、MethodInvocation调用次序如下</p>
<img src="/2022/08/16/AOP/13.png" style="zoom:60%;">

<p>3、为了实现上图所示的调用次序，环绕通知最适合，因此其他 before、afterReturning 都会被转换成环绕通知<br>4、统一转换为环绕通知, 体现的是设计模式中的适配器模式<a href="https://note.youdao.com/s/Cf5oECEQ">（点击查看设计模式）</a></p>
<blockquote>
<p>统一转换为 MethodInterceptor 环绕通知, 这体现在方法中的 Interceptors 上</p>
<ul>
<li>MethodBeforeAdviceAdapter 将 @Before AspectJMethodBeforeAdvice 适配为 MethodBeforeAdviceInterceptor</li>
<li>AfterReturningAdviceAdapter 将 @AfterReturning AspectJAfterReturningAdvice 适配为 AfterReturningAdviceInterceptor</li>
</ul>
</blockquote>
<ul>
<li>对外是为了方便使用要区分 before、afterReturning</li>
<li>对内统一都是环绕通知, 统一用 MethodInterceptor 表示</li>
</ul>
<br>

<p><strong>定义了一个高级切面，里面含有多个通知类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Aspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* foo())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before1</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;before1&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* foo())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before2</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;before2&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;after&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* foo())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;afterReturning&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* foo())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing &quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* foo())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;around...before&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;around...after&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;target foo&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>将不同的通知类型统一转换成环绕通知</strong></p>
<img src="/2022/08/16/AOP/19.png" style="zoom:60%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">AspectInstanceFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(<span class="keyword">new</span> <span class="title class_">Aspect</span>());</span><br><span class="line">    <span class="comment">//高级切面转低级切面类</span></span><br><span class="line">    List&lt;Advisor&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Method method : Aspect.class.getDeclaredMethods()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(Before.class)) &#123;</span><br><span class="line">            <span class="comment">// 解析切点</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> method.getAnnotation(Before.class).value();</span><br><span class="line">            <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">            pointcut.setExpression(expression);</span><br><span class="line">            <span class="comment">// 通知类</span></span><br><span class="line">            <span class="type">AspectJMethodBeforeAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJMethodBeforeAdvice</span>(method, pointcut, factory);</span><br><span class="line">            <span class="comment">// 切面</span></span><br><span class="line">            <span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br><span class="line">            list.add(advisor);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.isAnnotationPresent(AfterReturning.class)) &#123;</span><br><span class="line">                <span class="comment">// 解析切点</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> method.getAnnotation(AfterReturning.class).value();</span><br><span class="line">                <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">                pointcut.setExpression(expression);</span><br><span class="line">                <span class="comment">// 通知类</span></span><br><span class="line">                <span class="type">AspectJAfterReturningAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJAfterReturningAdvice</span>(method, pointcut, factory);</span><br><span class="line">                <span class="comment">// 切面</span></span><br><span class="line">                <span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br><span class="line">                list.add(advisor);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.isAnnotationPresent(Around.class)) &#123;</span><br><span class="line">                <span class="comment">// 解析切点</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> method.getAnnotation(Around.class).value();</span><br><span class="line">                <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">                pointcut.setExpression(expression);</span><br><span class="line">                <span class="comment">// 通知类</span></span><br><span class="line">                <span class="type">AspectJAroundAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJAroundAdvice</span>(method, pointcut, factory);</span><br><span class="line">                <span class="comment">// 切面</span></span><br><span class="line">                <span class="type">Advisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br><span class="line">                list.add(advisor);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (Advisor advisor : list) &#123; System.out.println(advisor); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">    proxyFactory.setTarget(target); <span class="comment">//设置目标</span></span><br><span class="line">    proxyFactory.addAdvice(ExposeInvocationInterceptor.INSTANCE); <span class="comment">// 准备把 MethodInvocation 放入当前线程</span></span><br><span class="line">    proxyFactory.addAdvisors(list); <span class="comment">//关联低级切面</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  将除了环绕通知以外的通知，统一转为环绕通知</span></span><br><span class="line"><span class="comment">     *  参数一：目标方法对象</span></span><br><span class="line"><span class="comment">     *  参数二：目标的class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; methodInterceptorList = proxyFactory.getInterceptorsAndDynamicInterceptionAdvice(Target.class.getMethod(<span class="string">&quot;foo&quot;</span>), Target.class);</span><br><span class="line">    <span class="comment">//省略了对低级切面进行排序</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : methodInterceptorList) &#123; System.out.println(o); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<br>

<h2 id="调用链执行过程"><a href="#调用链执行过程" class="headerlink" title="调用链执行过程"></a>调用链执行过程</h2><p><strong style="color:red">注意：在调用链执行的过程中，某些通知内部有可能会使用到调用链对象。所以必须使用一个最外层的环绕通知，将 MethodInvocation 放入当前线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建并执行调用链 (多个环绕通知 + 目标)</span></span><br><span class="line"><span class="type">MethodInvocation</span> <span class="variable">methodInvocation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  参数一：代理对象</span></span><br><span class="line"><span class="comment">         *  参数二：目标对象</span></span><br><span class="line"><span class="comment">         *  参数三：目标中对应的方法</span></span><br><span class="line"><span class="comment">         *  参数四：目标方法的实参数组</span></span><br><span class="line"><span class="comment">         *  参数五：目标类型</span></span><br><span class="line"><span class="comment">         *  参数六：环绕通知集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="literal">null</span>, target, Target.class.getMethod(<span class="string">&quot;foo&quot;</span>), <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>], Target.class, methodInterceptorList</span><br><span class="line">);</span><br><span class="line"><span class="comment">//将环绕通知一层层逐一进行调用</span></span><br><span class="line">methodInvocation.proceed();</span><br></pre></td></tr></table></figure>

<img src="/2022/08/16/AOP/20.png" style="zoom:80%;">

<br>

<h2 id="模拟实现调用链"><a href="#模拟实现调用链" class="headerlink" title="模拟实现调用链"></a>模拟实现调用链</h2><p>在proceed方法内部首先需要将可调用次数count（初始化为1）与通知的list集合比较，如果可调用次数大，说明集合为空，没有通知，则直接调用目标。如果集合不为空，那么就递归调用下一个通知</p>
<p>注意：此处递归调用并不是直接在proceed方法内部调用proceed而是通过interceptor调用invoke，从而间接地在切面中调用proceed方法</p>
<img src="/2022/08/16/AOP/21.png" style="zoom:90%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;Target.foo()&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Advice1</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Advice1 before...&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> invocation.proceed();	<span class="comment">//调用下一个通知或目标</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Advice1 after...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Advice2</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Advice2.before...&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> invocation.proceed();	<span class="comment">// 调用下一个通知或目标</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Advice2.after...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyInvocation</span> <span class="keyword">implements</span> <span class="title class_">MethodInvocation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> Object[] args;</span><br><span class="line">    List&lt;MethodInterceptor&gt; methodInterceptorList; <span class="comment">// 环绕通知集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 调用次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocation</span><span class="params">(Object target, Method method, Object[] args, List&lt;MethodInterceptor&gt; methodInterceptorList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        <span class="built_in">this</span>.method = method;</span><br><span class="line">        <span class="built_in">this</span>.args = args;</span><br><span class="line">        <span class="built_in">this</span>.methodInterceptorList = methodInterceptorList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 调用每一个环绕通知, 调用目标</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; methodInterceptorList.size())&#123;</span><br><span class="line">            <span class="comment">//调用目标，返回并结束递归</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用通知，count+1</span></span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> methodInterceptorList.get(count++ - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> interceptor.invoke(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Method <span class="title function_">getMethod</span><span class="params">()</span> &#123;<span class="keyword">return</span> method;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] getArguments() &#123;<span class="keyword">return</span> args;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getThis</span><span class="params">()</span> &#123;<span class="keyword">return</span> target;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AccessibleObject <span class="title function_">getStaticPart</span><span class="params">()</span> &#123;<span class="keyword">return</span> method;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">    List&lt;MethodInterceptor&gt; list = List.of(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Advice1</span>(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Advice2</span>()</span><br><span class="line">    );</span><br><span class="line">    <span class="type">MyInvocation</span> <span class="variable">invocation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocation</span>(target, Target.class.getMethod(<span class="string">&quot;foo&quot;</span>), <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>], list);</span><br><span class="line">    invocation.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="动态通知调用"><a href="#动态通知调用" class="headerlink" title="动态通知调用"></a>动态通知调用</h1><br>
]]></content>
      <categories>
        <category>spring高级</category>
      </categories>
      <tags>
        <tag>底层源码</tag>
        <tag>spring高级</tag>
      </tags>
  </entry>
  <entry>
    <title>defineClass源码</title>
    <url>/2022/08/09/defineClass%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p><a href="https://www.hzzzzzy.icu/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/#%E4%B8%BB%E8%A6%81%E6%96%B9%E6%B3%95">点此返回</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; defineClass(String name, Resource res) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> res.getCodeSourceURL();</span><br><span class="line">    <span class="keyword">if</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pkgname</span> <span class="operator">=</span> name.substring(<span class="number">0</span>, i);</span><br><span class="line">        <span class="comment">// Check if package already loaded.</span></span><br><span class="line">        <span class="type">Manifest</span> <span class="variable">man</span> <span class="operator">=</span> res.getManifest();</span><br><span class="line">        definePackageInternal(pkgname, man, url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Now read the class bytes and define the class</span></span><br><span class="line">    java.nio.<span class="type">ByteBuffer</span> <span class="variable">bb</span> <span class="operator">=</span> res.getByteBuffer();</span><br><span class="line">    <span class="keyword">if</span> (bb != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Use (direct) ByteBuffer:</span></span><br><span class="line">        CodeSigner[] signers = res.getCodeSigners();</span><br><span class="line">        <span class="type">CodeSource</span> <span class="variable">cs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeSource</span>(url, signers);</span><br><span class="line">        sun.misc.PerfCounter.getReadClassBytesTime().addElapsedTimeFrom(t0);</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, bb, cs);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] b = res.getBytes();</span><br><span class="line">        <span class="comment">// must read certificates AFTER reading bytes.</span></span><br><span class="line">        CodeSigner[] signers = res.getCodeSigners();</span><br><span class="line">        <span class="type">CodeSource</span> <span class="variable">cs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CodeSource</span>(url, signers);</span><br><span class="line">        sun.misc.PerfCounter.getReadClassBytesTime().addElapsedTimeFrom(t0);</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length, cs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>findClass方法源码</title>
    <url>/2022/08/09/findClass%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p><a href="https://www.hzzzzzy.icu/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/#%E4%B8%BB%E8%A6%81%E6%96%B9%E6%B3%95">点此返回</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(<span class="keyword">final</span> String name)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Class&lt;?&gt;&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Class&lt;?&gt; run() <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">                    <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ucp.getResource(path, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (res != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">//defineClass：根据所给的二进制数据和名称，返回一个Class实例</span></span><br><span class="line">                            <span class="keyword">return</span> defineClass(name, res);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name, e);</span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, acc);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.security.PrivilegedActionException pae) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (ClassNotFoundException) pae.getException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>loadClass方法源码剖析</title>
    <url>/2022/08/09/loadClass%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p><a href="https://www.hzzzzzy.icu/2022/08/09/16-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/#%E4%B8%BB%E8%A6%81%E6%96%B9%E6%B3%95">点此返回</a></p>
<br>

<p><em>1、先在<strong>当前加载器的缓存</strong>中*<em>查找有无目标类</em></em>,如果有,直接返回。*</p>
<p><em>2、判断当前加载器的父加载器是否为空</em> <em>,如果不为空,则调用 parent.loadClass(name, false) 接口进行加载</em></p>
<p><em>3、反之,如果当前加载器的父类加载器为空,则调用 findBootstrapClassOrNull(name) 接口,让引导类加载器进行加载</em></p>
<p><em>4、如果通过以上3条路径都没能成功加载,则调用 findClass(name) 接口进行加载。该接口最终会调用 java.lang.ClassLoader 接口的 defineClass 系列的native接口加载目标Java类。</em></p>
<p><strong>双亲委派的模型就隐藏在这第2和第3步中</strong></p>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">       <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;	<span class="comment">//同步操作，保证只能加载一次</span></span><br><span class="line">		<span class="comment">//首先，在缓存中判断是否已经加载同名的类</span></span><br><span class="line">           Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">           <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//parent：当前类加载器的父类加载器</span></span><br><span class="line">                   <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="comment">//如果存在父类加载器，则调用父类加载器进行类的加载</span></span><br><span class="line">                       c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;	<span class="comment">//parent为null：父类加载器是引导类加载器</span></span><br><span class="line">                       c = findBootstrapClassOrNull(name);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                   <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                   <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;	<span class="comment">//当前类加载器的父类加载器未加载此类 或 当前类加载器被加载</span></span><br><span class="line">                   <span class="comment">//调用当前ClassLoader</span></span><br><span class="line">                   <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                   c = findClass(name);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                   sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                   sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                   sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (resolve) &#123;	<span class="comment">//是否进行解析操作</span></span><br><span class="line">               resolveClass(c);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> c;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>底层源码</tag>
      </tags>
  </entry>
  <entry>
    <title>容器与Bean</title>
    <url>/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/</url>
    <content><![CDATA[<h1 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h1><p>它是ApplicationContext的父接口</p>
<p>它才是Spring的核心容器，主要的ApplicationContext的实现都组合了它的功能</p>
<img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/11.png" style="zoom:80%;">

<p>比如使用ApplicationContext的getBean方法，实际上先拿到BeanFactory对象，再去调用BeanFactory的getBean方法</p>
<img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/12.png" style="zoom:80%;">

<p><strong>BeanFactory表面上只有getBean功能实际上，控制反转，基本的依赖注入，直至Bean的生命周期都是由它的实现类提供</strong></p>
<br>

<h1 id="ApplicationContext功能"><a href="#ApplicationContext功能" class="headerlink" title="ApplicationContext功能"></a>ApplicationContext功能</h1><img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/13.png" style="zoom:80%;">

<p><strong>MessageSource：处理国际化资源的能力（翻译）</strong> <em><strong>比如 getMessage方法</strong></em></p>
<p><img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/15.png" style="zoom:80%;"><img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/14.png" style="zoom:80%;"></p>
<br>

<p><strong>RessourcePatternResolver：通配符匹配资源的能力</strong> <em><strong>比如 getResources方法</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示在resources目录下的META-INF子目录下的spring.factories文件和jar包内的......</span></span><br><span class="line"><span class="comment">//*号表示也可以jar内进行搜索</span></span><br><span class="line">Resource[] resources = context.getResources(<span class="string">&quot;classpath*:META-INF/spring.factories&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">    System.out.println(resource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<p><strong>ApplicationEventPublisher：发布事件能力</strong> <em><strong>比如 publishEvent方法</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Component1然后进行注册</span></span><br><span class="line">context.getBean(Component1.class).register();</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Component1中进行声明</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Component1.class);</span><br><span class="line"><span class="comment">//该容器对象具备发送事件的功能</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationEventPublisher context;	<span class="comment">//事件发生器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;用户注册&quot;</span>);</span><br><span class="line">    context.publishEvent(<span class="keyword">new</span> <span class="title class_">UserRegisteredEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Component2中监听该事件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Component2.class);</span><br><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aaa</span><span class="params">(UserRegisteredEvent event)</span> &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, event);</span><br><span class="line">    log.debug(<span class="string">&quot;发送短信&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p><strong>EnvironmentCapable：读取环境信息</strong> <em><strong>比如getProperty方法</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取properties文件和系统环境变量对应键的值</span></span><br><span class="line">System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;java_home&quot;</span>));</span><br><span class="line">System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br></pre></td></tr></table></figure>

<br>

<h1 id="BeanFactory的实现"><a href="#BeanFactory的实现" class="headerlink" title="BeanFactory的实现"></a>BeanFactory的实现</h1><h2 id="给Bean添加定义并进行注册"><a href="#给Bean添加定义并进行注册" class="headerlink" title="给Bean添加定义并进行注册"></a><em>给Bean添加定义并进行注册</em></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"><span class="comment">// bean 的定义（class, scope, 初始化, 销毁）</span></span><br><span class="line"><span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span></span><br><span class="line">        BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope(<span class="string">&quot;singleton&quot;</span>).getBeanDefinition();</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>, beanDefinition);</span><br></pre></td></tr></table></figure>

<br>

<h2 id="添加-BeanFactory-后处理器"><a href="#添加-BeanFactory-后处理器" class="headerlink" title="添加 BeanFactory 后处理器"></a><em>添加 BeanFactory 后处理器</em></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给 BeanFactory 添加一些常用的后处理器</span></span><br><span class="line">AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只是添加后处理器不进行扩展，则无法解析@Confident和@bean注解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BeanFactory 后处理器主要功能，补充了一些 bean 定义</span></span><br><span class="line"><span class="comment">// getBeansOfType 根据类型获取多个bean（bean后处理器）</span></span><br><span class="line">beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values().forEach(beanFactoryPostProcessor -&gt; &#123;</span><br><span class="line">    beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);   <span class="comment">//执行beanFactory 后处理器</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();&#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();&#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean3 <span class="title function_">bean3</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean3</span>();&#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean4 <span class="title function_">bean4</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean4</span>();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Inter</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> <span class="keyword">implements</span> <span class="title class_">Inter</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean4</span> <span class="keyword">implements</span> <span class="title class_">Inter</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Bean1.class);</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;构造 Bean1()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;<span class="keyword">return</span> bean2;&#125;</span><br><span class="line">        <span class="comment">//同时添加两个注解（后处理器的顺序决定了哪个先被解析）</span></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="meta">@Resource(name = &quot;bean4&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Inter bean3;</span><br><span class="line">        <span class="keyword">public</span> Inter <span class="title function_">getInter</span><span class="params">()</span> &#123;<span class="keyword">return</span> bean3;&#125;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Bean2.class);</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;构造 Bean2()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="添加-Bean-后处理器"><a href="#添加-Bean-后处理器" class="headerlink" title="添加 Bean 后处理器"></a><em>添加 Bean 后处理器</em></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bean 后处理器, 针对 bean 的生命周期的各个阶段提供扩展, 例如 @Autowired @Resource ...</span></span><br><span class="line">beanFactory.getBeansOfType(BeanPostProcessor.class).values().stream()</span><br><span class="line">        .forEach(beanPostProcessor -&gt; &#123;</span><br><span class="line">    beanFactory.addBeanPostProcessor(beanPostProcessor);    <span class="comment">//建立Bean工厂和后处理器的关系</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<br>

<h2 id="后处理器器顺序"><a href="#后处理器器顺序" class="headerlink" title="后处理器器顺序"></a><em>后处理器器顺序</em></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认是Common的后处理器排在前面，Autowired的排在后面</span></span><br><span class="line">System.out.println(<span class="string">&quot;Common:&quot;</span> + (Ordered.LOWEST_PRECEDENCE - <span class="number">3</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Autowired:&quot;</span> + (Ordered.LOWEST_PRECEDENCE - <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<br>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><em><strong>BeanFactory总结：</strong></em></p>
<ol>
<li>不会主动调用 BeanFactory 后处理器</li>
<li>不会主动添加 Bean 后处理器</li>
<li>不会主动初始化单例</li>
<li>不会解析beanFactory 还不会解析 ${ } 与 #{ }</li>
</ol>
<p><em><strong>Bean后处理器会有排序的逻辑</strong></em></p>
<br>

<h1 id="ApplicationContext的实现"><a href="#ApplicationContext的实现" class="headerlink" title="ApplicationContext的实现"></a>ApplicationContext的实现</h1><h2 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h2><p><strong>在类路径下读取XML配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testClassPathXmlApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;a02.xml&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(context.getBean(Bean2.class).getBean1());</span><br><span class="line">    <span class="comment">/**	</span></span><br><span class="line"><span class="comment">     *  结果：</span></span><br><span class="line"><span class="comment">     *	bean1</span></span><br><span class="line"><span class="comment">     *	bean2</span></span><br><span class="line"><span class="comment">     *	com.itheima.a02.A02$Bean1@6392827e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//a02.xml</span><br><span class="line"><span class="comment">&lt;!-- 控制反转, 让 bean1和bean2 被 Spring 容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.a02.A02.Bean1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.a02.A02.Bean2&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖注入, 让 bean2 建立与 bean1 的依赖关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bean1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="FileSystemXmlApplicationContext"><a href="#FileSystemXmlApplicationContext" class="headerlink" title="FileSystemXmlApplicationContext"></a>FileSystemXmlApplicationContext</h2><p><strong>在磁盘路径下读取XML配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testFileSystemXmlApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileSystemXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;src\\main\\resources\\a02.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h2><p><strong>基于java配置类来完成</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAnnotationConfigApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Config.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">(Bean1 bean1)</span> &#123;</span><br><span class="line">        <span class="type">Bean2</span> <span class="variable">bean2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        bean2.setBean1(bean1);</span><br><span class="line">        <span class="keyword">return</span> bean2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123; &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Bean1 bean1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean1</span><span class="params">(Bean1 bean1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bean1 = bean1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">getBean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bean1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/16.png" style="zoom:80%;">

<br>

<h2 id="AnnotationConfigServletWebServerApplicationContext"><a href="#AnnotationConfigServletWebServerApplicationContext" class="headerlink" title="AnnotationConfigServletWebServerApplicationContext"></a>AnnotationConfigServletWebServerApplicationContext</h2><p><strong>基于 java 配置类来创建，用于 web 环境</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAnnotationConfigServletWebServerApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigServletWebServerApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>(WebConfig.class);</span><br><span class="line">    <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//产生内嵌的 tomcat 容器</span></span><br><span class="line">    <span class="keyword">public</span> ServletWebServerFactory <span class="title function_">servletWebServerFactory</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();&#125;</span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//创建 dispatcherServlet 对象</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();&#125;</span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//将 dispatcherServlet 注册到tomcat容器中</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">registrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Controller <span class="title function_">controller1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response) -&gt; &#123;</span><br><span class="line">            response.getWriter().print(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h1><p><img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/3.png"></p>
<p><strong>在各个阶段里都会有由bean后处理器提供的功能增强</strong></p>
<br>

<p><em><strong>bean的后处理器</strong></em></p>
<p><strong>创建前后的增强</strong></p>
<ul>
<li>postProcessBeforeInstantiation<ul>
<li>这里返回的对象若不为 null 会替换掉原本的 bean，并且仅会走 postProcessAfterInitialization 流程</li>
</ul>
</li>
<li>postProcessAfterInstantiation<ul>
<li>这里如果返回 false 会跳过依赖注入阶段</li>
</ul>
</li>
</ul>
<p><strong>依赖注入前的增强</strong></p>
<ul>
<li>postProcessProperties<ul>
<li>如 @Autowired、@Value、@Resource</li>
</ul>
</li>
</ul>
<p><strong>初始化前后的增强</strong></p>
<ul>
<li>postProcessBeforeInitialization<ul>
<li>这里返回的对象会替换掉原本的 bean</li>
<li>如 @PostConstruct、@ConfigurationProperties</li>
</ul>
</li>
<li>postProcessAfterInitialization <ul>
<li>这里返回的对象会替换掉原本的 bean</li>
<li>如代理增强</li>
</ul>
</li>
</ul>
<p><strong>销毁之前的增强</strong></p>
<ul>
<li>postProcessBeforeDestruction<ul>
<li>如 @PreDestroy</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">InstantiationAwareBeanPostProcessor</span>, DestructionAwareBeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyBeanPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//postProcessBeforeDestruction：在销毁之前执行 bean 后处理器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeforeDestruction</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(<span class="string">&quot;lifeCycleBean&quot;</span>))</span><br><span class="line">            log.debug(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt; 销毁之前执行, 如 @PreDestroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//postProcessBeforeInstantiation：在实例化之前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(<span class="string">&quot;lifeCycleBean&quot;</span>))</span><br><span class="line">            log.debug(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之前执行, 这里返回的对象会替换掉原本的 bean&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//postProcessAfterInstantiation：实例化之后执行，如果返回 false 会跳过依赖注入阶段，返回true则不会跳过</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(<span class="string">&quot;lifeCycleBean&quot;</span>)) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之后执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//postProcessProperties：依赖注入阶段执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertyValues <span class="title function_">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(<span class="string">&quot;lifeCycleBean&quot;</span>))</span><br><span class="line">            log.debug(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt; 依赖注入阶段执行, 如 @Autowired、@Value、@Resource&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//postProcessBeforeInitialization：初始化之前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(<span class="string">&quot;lifeCycleBean&quot;</span>))</span><br><span class="line">            log.debug(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt; 初始化之前执行, 这里返回的对象会替换掉原本的 bean, 如 @PostConstruct、@ConfigurationProperties&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//postProcessAfterInitialization：初始化之后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equals(<span class="string">&quot;lifeCycleBean&quot;</span>))</span><br><span class="line">            log.debug(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt; 初始化之后执行, 这里返回的对象会替换掉原本的 bean, 如代理增强&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBeanFactory</span>();</span><br><span class="line">    beanFactory.addBeanPostProcessor(bean -&gt; System.out.println(<span class="string">&quot;解析 @Autowired&quot;</span>));</span><br><span class="line">    beanFactory.addBeanPostProcessor(bean -&gt; System.out.println(<span class="string">&quot;解析 @Resource&quot;</span>));</span><br><span class="line">    beanFactory.getBean();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;构造 &quot;</span> + bean);</span><br><span class="line">        System.out.println(<span class="string">&quot;依赖注入 &quot;</span> + bean); <span class="comment">// @Autowired, @Resource</span></span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor processor : processors) &#123;</span><br><span class="line">            processor.inject(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化 &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;BeanPostProcessor&gt; processors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//后处理器集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBeanPostProcessor</span><span class="params">(BeanPostProcessor processor)</span> &#123;processors.add(processor);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(Object bean)</span>; <span class="comment">// 对依赖注入阶段的扩展</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h1 id="Bean后处理器"><a href="#Bean后处理器" class="headerlink" title="Bean后处理器"></a>Bean后处理器</h1><blockquote>
<p>前言：</p>
<p>1、先创建一个干净容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br></pre></td></tr></table></figure>

<p>2、用原始形式注入bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.registerBean(<span class="string">&quot;bean1&quot;</span>, Bean1.class);</span><br><span class="line">context.registerBean(<span class="string">&quot;bean2&quot;</span>, Bean2.class);</span><br><span class="line">context.registerBean(<span class="string">&quot;bean3&quot;</span>, Bean3.class);</span><br></pre></td></tr></table></figure>

<p>3、利用后处理器进行加载测试<br>4、初始化容器，并打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行beanFactory后处理器, 添加bean后处理器, 初始化所有单例</span></span><br><span class="line">context.refresh();</span><br><span class="line">System.out.println(context.getBean(Bean1.class));</span><br></pre></td></tr></table></figure>
<p>5、销毁容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.refresh();</span><br></pre></td></tr></table></figure>
</blockquote>
<br>


<h2 id="AutowiredAnnotationBeanPostProcessor后处理器"><a href="#AutowiredAnnotationBeanPostProcessor后处理器" class="headerlink" title="AutowiredAnnotationBeanPostProcessor后处理器"></a>AutowiredAnnotationBeanPostProcessor后处理器</h2><p><strong>在依赖注入阶段，解析@Autowired和@Value注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析@Value注解的值注入问题，暂时不要求掌握</span></span><br><span class="line">context.getDefaultListableBeanFactory()</span><br><span class="line">    .setAutowireCandidateResolver(<span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析@Autowired @Value</span></span><br><span class="line">context.registerBean(AutowiredAnnotationBeanPostProcessor.class); </span><br></pre></td></tr></table></figure>

<br>

<h3 id="运行过程分析"><a href="#运行过程分析" class="headerlink" title="运行过程分析"></a>运行过程分析</h3><p><em><strong>执行依赖注入的 postProcessProperties 方法</strong></em></p>
<p><img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/2.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 查找哪些属性、方法加了 @Autowired, 这称之为 InjectionMetadata</span></span><br><span class="line">        <span class="type">AutowiredAnnotationBeanPostProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutowiredAnnotationBeanPostProcessor</span>();</span><br><span class="line">        processor.setBeanFactory(beanFactory);</span><br><span class="line">        <span class="type">Bean1</span> <span class="variable">bean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">findAutowiringMetadata</span> <span class="operator">=</span> AutowiredAnnotationBeanPostProcessor.class.getDeclaredMethod(<span class="string">&quot;findAutowiringMetadata&quot;</span>, String.class, Class.class, PropertyValues.class);</span><br><span class="line">        findAutowiringMetadata.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取 Bean1 上加了 @Value @Autowired 的成员变量，方法参数信息</span></span><br><span class="line">        <span class="type">InjectionMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> (InjectionMetadata) findAutowiringMetadata.invoke(processor, <span class="string">&quot;bean1&quot;</span>, Bean1.class, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(metadata);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、调用 InjectionMetadata 来进行依赖注入, 注入时按类型查找值</span></span><br><span class="line">        metadata.inject(bean1, <span class="string">&quot;bean1&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(bean1);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4、inject内部</span></span><br><span class="line"><span class="comment">//4.1、成员变量注入</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">bean3</span> <span class="operator">=</span> Bean1.class.getDeclaredField(<span class="string">&quot;bean3&quot;</span>);</span><br><span class="line"><span class="comment">//将成员变量信息进行封装</span></span><br><span class="line"><span class="type">DependencyDescriptor</span> <span class="variable">dd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(bean3, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//根据成员变量信息得到类型，进行根据类型找到容器中符合此类型中的一个bean</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> beanFactory.doResolveDependency(dd1, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(o);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.2、方法注入</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">setBean2</span> <span class="operator">=</span> Bean1.class.getDeclaredMethod(<span class="string">&quot;setBean2&quot;</span>, Bean2.class);</span><br><span class="line"><span class="comment">//将方法进行封装（以参数为单位进行封装，此处的0指的是第一个参数）</span></span><br><span class="line"><span class="type">DependencyDescriptor</span> <span class="variable">dd2</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(<span class="keyword">new</span> <span class="title class_">MethodParameter</span>(setBean2, <span class="number">0</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//根据方法参数的类型在容器中找到符合此类型的bean</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> beanFactory.doResolveDependency(dd2, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(o1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.3、值注入</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">setHome</span> <span class="operator">=</span> Bean1.class.getDeclaredMethod(<span class="string">&quot;setHome&quot;</span>, String.class);</span><br><span class="line"><span class="type">DependencyDescriptor</span> <span class="variable">dd3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(<span class="keyword">new</span> <span class="title class_">MethodParameter</span>(setHome, <span class="number">0</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> beanFactory.doResolveDependency(dd3, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(o2);</span><br></pre></td></tr></table></figure>

<br>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><ol>
<li><strong>AutowiredAnnotationBeanPostProcessor.findAutowiringMetadata 用来获取某个 bean 上加了 @Value @Autowired 的成员变量，方法参数的信息，表示为 InjectionMetadata</strong></li>
<li><strong>InjectionMetadata 可以完成依赖注入</strong></li>
<li><strong>InjectionMetadata 内部根据成员变量，方法参数封装为 DependencyDescriptor 类型</strong></li>
<li><strong>有了 DependencyDescriptor，就可以利用 beanFactory.doResolveDependency 方法进行基于类型的查找</strong></li>
</ol>
<br>

<h2 id="CommonAnnotationBeanPostProcessor后处理器"><a href="#CommonAnnotationBeanPostProcessor后处理器" class="headerlink" title="CommonAnnotationBeanPostProcessor后处理器"></a>CommonAnnotationBeanPostProcessor后处理器</h2><p><strong>依赖注入阶段解析@Resource，初始化前解析@PostConstruct，销毁前@PreDestroy注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.registerBean(CommonAnnotationBeanPostProcessor.class);</span><br></pre></td></tr></table></figure>

<br>

<h2 id="ConfigurationPropertiesBindingPostProcessor后处理器"><a href="#ConfigurationPropertiesBindingPostProcessor后处理器" class="headerlink" title="ConfigurationPropertiesBindingPostProcessor后处理器"></a>ConfigurationPropertiesBindingPostProcessor后处理器</h2><p><strong>初始化前@ConfigurationProperties</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConfigurationPropertiesBindingPostProcessor.register(context.getDefaultListableBeanFactory());</span><br></pre></td></tr></table></figure>

<br>

<h1 id="BeanFactory后处理器"><a href="#BeanFactory后处理器" class="headerlink" title="BeanFactory后处理器"></a>BeanFactory后处理器</h1><h2 id="ConfigurationClassPostProcessor后处理器"><a href="#ConfigurationClassPostProcessor后处理器" class="headerlink" title="ConfigurationClassPostProcessor后处理器"></a>ConfigurationClassPostProcessor后处理器</h2><p><em><strong>可以用来解析@ComponentScan、@Bean、@Import、@ImportResource注解</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.registerBean(ConfigurationClassPostProcessor.class);</span><br></pre></td></tr></table></figure>

<br>

<h2 id="MapperScannerConfigurer后处理器"><a href="#MapperScannerConfigurer后处理器" class="headerlink" title="MapperScannerConfigurer后处理器"></a>MapperScannerConfigurer后处理器</h2><p><em><strong>解析@MapperScanner注解</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.registerBean(MapperScannerConfigurer.class, bd -&gt; &#123;</span><br><span class="line">    bd.getPropertyValues().add(<span class="string">&quot;basePackage&quot;</span>, <span class="string">&quot;com.itheima.a05.mapper&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<br>

<h2 id="模拟实现-ComponentScan注解"><a href="#模拟实现-ComponentScan注解" class="headerlink" title="模拟实现@ComponentScan注解"></a>模拟实现@ComponentScan注解</h2><p><a href="https://www.hzzzzzy.icu/2022/08/09/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0@ComponentScan/">模拟实现@ComponentScan（点我跳转）</a></p>
<br>

<h2 id="模拟解析Mapper接口"><a href="#模拟解析Mapper接口" class="headerlink" title="模拟解析Mapper接口"></a>模拟解析Mapper接口</h2><p><a href="https://www.hzzzzzy.icu/2022/08/09/%E6%A8%A1%E6%8B%9F%E8%A7%A3%E6%9E%90Mapper%E6%8E%A5%E5%8F%A3/">解析Mapper接口（点我跳转）</a></p>
<br>

<h2 id="模拟解析-Bean注解"><a href="#模拟解析-Bean注解" class="headerlink" title="模拟解析@Bean注解"></a>模拟解析@Bean注解</h2><p><a href="https://www.hzzzzzy.icu/2022/08/09/%E6%A8%A1%E6%8B%9F%E8%A7%A3%E6%9E%90Bean%E6%B3%A8%E8%A7%A3/">解析@Bean注解（点我跳转）</a></p>
<br>

<h1 id="Aware接口及InitializingBean-接口"><a href="#Aware接口及InitializingBean-接口" class="headerlink" title="Aware接口及InitializingBean 接口"></a>Aware接口及InitializingBean 接口</h1><p><strong style="color:red">Aware 接口用于注入一些与容器相关信息</strong></p>
<p><em><strong>1、BeanNameAware：注入 bean 的名字</strong></em></p>
<p><em><strong>2、BeanFactoryAware：注入 BeanFactory 容器</strong></em></p>
<p><em><strong>3、ApplicationContextAware：注入 ApplicationContext 容器</strong></em></p>
<p><strong style="color:red">InitializingBean 接口提供了一种内置的初始化手段</strong></p>
<br>

<p><strong style="color:red">为什么有些功能@Autowired可以实现，还要用Aware接口</strong></p>
<ul>
<li><em><strong>内置的注入和初始化不受扩展功能的影响，总会被执行</strong></em></li>
<li><em><strong>而扩展功能受某些情况影响可能会失效</strong></em></li>
<li><em><strong>因此 Spring 框架内部的类常用内置注入和初始化</strong></em></li>
</ul>
<br>

<h1 id="配置类-Autowired-失效分析"><a href="#配置类-Autowired-失效分析" class="headerlink" title="配置类 @Autowired 失效分析"></a>配置类 @Autowired 失效分析</h1><p><strong style="color:red">一开始执行beanFactory，而我们配置的beanFactory是通过工厂方法的模式进行配置的，这个方法要进行调用，前提是配置类对象创建了</strong></p>
<p><img src="/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/9.png"></p>
<br>

<p><strong style="color:red">java配置类包含BeanFactoryPostProcessor的情况，因此要创建其中的BeanFactoryPostProcessor必须提前创建Java配置类，而此时BeanPostProcessor还没准备好，也就导致@Autowired等注解失效</strong></p>
<p><img src="/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/10.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyConfig1.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;注入 ApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//  beanFactory 后处理器</span></span><br><span class="line">    <span class="keyword">public</span> BeanFactoryPostProcessor <span class="title function_">processor1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;执行 processor1&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(test.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;myConfig1&quot;</span>, MyConfig1.class);</span><br><span class="line">        context.refresh();		<span class="comment">// 1. beanFactory 后处理器,  2. 添加 bean 后处理器, 3. 初始化单例</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h1 id="Bean的初始化和销毁"><a href="#Bean的初始化和销毁" class="headerlink" title="Bean的初始化和销毁"></a>Bean的初始化和销毁</h1><h2 id="Bean的初始化执行顺序"><a href="#Bean的初始化执行顺序" class="headerlink" title="Bean的初始化执行顺序"></a>Bean的初始化执行顺序</h2><p>1、@PostConstruct 标注的初始化方法</p>
<p>2、实现InitializingBean 接口的初始化方法</p>
<p>3、@Bean(initMethod) 指定的初始化方法</p>
<h2 id="Bean的销毁执行顺序"><a href="#Bean的销毁执行顺序" class="headerlink" title="Bean的销毁执行顺序"></a>Bean的销毁执行顺序</h2><p>1、@PreDestroy 标注的销毁方法</p>
<p>2、DisposableBean 接口的销毁方法</p>
<p>3、@Bean(destroyMethod) 指定的销毁方法</p>
<br>

<h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><blockquote>
<p>singleton是容器默认的scope。scope为singleton的时候，在Spring的IoC容器中只存在一个实例，所有对该对象的引用将共享这个实例。该实例从容器启动，并因为第一次被请求而初始化后，将一直存活到容器退出，也就是说，它与IOC容器“几乎”拥有相同的寿命</p>
</blockquote>
<p>singleton：容器启动时创建（未设置延迟），容器关闭时销毁</p>
<br>

<blockquote>
<p>对于那些请求方不能共享的对象实例，应该将其bean定义的scope设置为prototype。这样，每个请求方可以得到自己对应的一个对象实例。通常，声明为prototype的scope的bean定义类型，都是一些有状态的，比如保存每个顾客信息的对象</p>
</blockquote>
<p>prototype，每次使用时创建，不会自动销毁，需要调用 DefaultListableBeanFactory.destroyBean(bean) 销毁</p>
<br>

<blockquote>
<p>在Spring容器中，即XmlWebApplicationContext会为每个HTTP请求创建一个全新的Request-Processor对象供当前请求使用，当请求结束后，该对象实生命周期就结束。</p>
</blockquote>
<p>request，每次请求用到此 bean 时创建，请求结束时销毁</p>
<br>

<blockquote>
<p>Spring容器会为每个独立的session创建属于它们自己全新的UserPreferences对象实例。放到session中的最普遍的信息就是用户登录信息，</p>
</blockquote>
<p>session，每个会话用到此 bean 时创建，会话结束时销毁</p>
<br>

<p>application，web 容器用到此 bean 时创建，容器停止时销毁</p>
<br>

<h1 id="Scope失效分析"><a href="#Scope失效分析" class="headerlink" title="Scope失效分析"></a>Scope失效分析</h1><blockquote>
<p>存在一个单例对象E</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">@Component</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line">&gt;<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(E.class);</span><br><span class="line">&gt;<span class="meta">@Autowired</span></span><br><span class="line">&gt;<span class="keyword">private</span> F f;</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="title function_">E</span><span class="params">()</span> &#123;log.info(<span class="string">&quot;E()&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Autowired</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setF</span><span class="params">(F f)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.f = f;</span><br><span class="line">  log.info(<span class="string">&quot;setF(F f) &#123;&#125;&quot;</span>, f.getClass());</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="keyword">public</span> F <span class="title function_">getF</span><span class="params">()</span> &#123;<span class="keyword">return</span> f;&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>要注入的对象 F 期望是多例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">@Component</span></span><br><span class="line">&gt;<span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(F.class);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">F</span><span class="params">()</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;F()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> context.getBean(E.class);</span><br><span class="line">&gt;<span class="type">F</span> <span class="variable">f1</span> <span class="operator">=</span> e.getF();</span><br><span class="line">&gt;<span class="type">F</span> <span class="variable">f2</span> <span class="operator">=</span> e.getF();</span><br><span class="line">&gt;System.out.println(f1);</span><br><span class="line">&gt;System.out.println(f2);</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;com.itheima.demo.cycle.F@6622fc65</span><br><span class="line">&gt;com.itheima.demo.cycle.F@6622fc65</span><br></pre></td></tr></table></figure>

<p>发现它们是同一个对象，而不是期望的多例对象</p>
</blockquote>
<p>对于单例对象来讲，依赖注入仅发生了一次，后续再没有用到多例的 F，因此 E 用的始终是第一次依赖注入的 F</p>
<img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/17.png" style="zoom:60%;">

<p>在注入F时，使用 @Lazy 生成代理（代理对象虽然还是同一个但当每次<strong>使用代理对象的任意方法</strong>时，由代理创建新的 f 对象）</p>
<img src="/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/18.png" style="zoom:60%;">

<br>

<p>方法一：使用@Lazy代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> F f;</span><br></pre></td></tr></table></figure>

<p>方法二：在目标类上的Scope注解里添加proxyMode属性<code>proxyMode = ScopedProxyMode.TARGET_CLASS</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(value = &quot;prototype&quot;, proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法三：在注入时，通过注入一个对象工厂来完成多例的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ObjectFactory&lt;F&gt; f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> F <span class="title function_">getF</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> f.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法四：在注入时，通过注入ApplicationContext的方式来完成多例的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> F <span class="title function_">getF</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(F.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法一和二都是通过反射原理完成多例的创建，性能相比后两种差一点</p>
<br>
]]></content>
      <categories>
        <category>spring高级</category>
      </categories>
      <tags>
        <tag>底层源码</tag>
        <tag>spring高级</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟实现@ComponentScan</title>
    <url>/2022/08/09/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0@ComponentScan/</url>
    <content><![CDATA[<p><a href="https://www.hzzzzzy.icu/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0-ComponentScan%E6%B3%A8%E8%A7%A3">点此返回</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟 @ComponentScan 注解的解析</span></span><br><span class="line"><span class="comment">//1、让自定义类实现 BeanDefinitionRegistryPostProcessor 接口</span></span><br><span class="line"><span class="comment">//		并重写 postProcessBeanFactory 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComponentScanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// context.refresh</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span></span><br><span class="line">        <span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span></span><br><span class="line">        <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2、使用 AnnotationUtils 工具类从Config类中找到 @ComponentScan 注解对象</span></span><br><span class="line">            <span class="type">ComponentScan</span> <span class="variable">componentScan</span> <span class="operator">=</span> AnnotationUtils</span><br><span class="line">                .findAnnotation(Config.class, ComponentScan.class);</span><br><span class="line">            <span class="keyword">if</span> (componentScan != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//3、不为空，获取包名（包名转换为classpath下的资源路径）</span></span><br><span class="line">                <span class="comment">//	com.itheima.a05.component </span></span><br><span class="line">                <span class="comment">//	-&gt; classpath*:com/itheima/a05/component/**/*.class</span></span><br><span class="line">                <span class="keyword">for</span> (String p : componentScan.basePackages()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;classpath*:&quot;</span> + p.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/**/*.class&quot;</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//4、读取类的元信息</span></span><br><span class="line">                    <span class="type">CachingMetadataReaderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> </span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">CachingMetadataReaderFactory</span>();</span><br><span class="line">                    Resource[] resources = </span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(path);</span><br><span class="line">                    <span class="type">AnnotationBeanNameGenerator</span> <span class="variable">generator</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationBeanNameGenerator</span>();</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">                        <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> factory.getMetadataReader(resource);</span><br><span class="line">                        <span class="comment">//5、判断是否间接或者直接加了@Component注解</span></span><br><span class="line">                        <span class="keyword">if</span> (reader.getAnnotationMetadata()</span><br><span class="line">                            		  	.hasMetaAnnotation(Component.class.getName())</span><br><span class="line">                            		   	|| </span><br><span class="line">                           	 reader.getAnnotationMetadata()</span><br><span class="line">                            			.hasAnnotation(Component.class.getName())) &#123;</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment">//6、创建一个BeanDefinition</span></span><br><span class="line">                            <span class="type">AbstractBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">                                .genericBeanDefinition(reader</span><br><span class="line">                                                       	.getClassMetadata()</span><br><span class="line">                                                       	.getClassName())</span><br><span class="line">                                						.getBeanDefinition();</span><br><span class="line">                            <span class="keyword">if</span> (configurableListableBeanFactory <span class="keyword">instanceof</span> </span><br><span class="line">                                DefaultListableBeanFactory beanFactory) &#123;</span><br><span class="line">                                <span class="comment">//7、将BeanDefinition加入到Bean工厂</span></span><br><span class="line">                                <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generator.generateBeanName(bd, beanFactory);</span><br><span class="line">                                beanFactory.registerBeanDefinition(beanName,bd);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>当其他类使用时，只需要调用 context的 registerBean方法，并传入自定义类的.class即可</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">context.registerBean(ComponentScanPostProcessor.class);</span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line">context.refresh();</span><br><span class="line"><span class="comment">//for (String name : context.getBeanDefinitionNames()) &#123;</span></span><br><span class="line"><span class="comment">//    System.out.println(name);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//销毁容器</span></span><br><span class="line">context.close();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring高级</category>
      </categories>
      <tags>
        <tag>底层源码</tag>
        <tag>spring高级</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟解析@Bean注解</title>
    <url>/2022/08/09/%E6%A8%A1%E6%8B%9F%E8%A7%A3%E6%9E%90Bean%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://www.hzzzzzy.icu/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/#%E6%A8%A1%E6%8B%9F%E8%A7%A3%E6%9E%90-Bean%E6%B3%A8%E8%A7%A3">点此返回</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span></span><br><span class="line">            <span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取类信息</span></span><br><span class="line">            <span class="type">CachingMetadataReaderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachingMetadataReaderFactory</span>();</span><br><span class="line">            <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> factory</span><br><span class="line">                    .getMetadataReader(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;com/itheima/a05/Config.class&quot;</span>));</span><br><span class="line">            <span class="comment">//获取被@Bean标注的方法</span></span><br><span class="line">            <span class="comment">//1.获取和注解相关的元数据</span></span><br><span class="line">            <span class="comment">//2.进一步获取被@Bean注解标注的方法</span></span><br><span class="line">            Set&lt;MethodMetadata&gt; methods = reader</span><br><span class="line">                    .getAnnotationMetadata()</span><br><span class="line">                    .getAnnotatedMethods(Bean.class.getName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (MethodMetadata method : methods) &#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="comment">//解析@Bean注解中的属性</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">initMethod</span> <span class="operator">=</span> (String) </span><br><span class="line">                        method.getAnnotationAttributes(Bean.class.getName()).get(<span class="string">&quot;initMethod&quot;</span>);</span><br><span class="line">                <span class="comment">//利用BeanDefinitionBuilder获取BeanDefinition，并加入bean工厂</span></span><br><span class="line">                <span class="type">BeanDefinitionBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition();</span><br><span class="line">                builder.setFactoryMethodOnBean(method.getMethodName(),<span class="string">&quot;config&quot;</span>);</span><br><span class="line">                <span class="comment">//指定自动装配模式(因为SqlSessionFactoryBean有一个dataSource参数)</span></span><br><span class="line">                builder.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);</span><br><span class="line">                <span class="keyword">if</span> (initMethod.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    builder.setInitMethodName(initMethod);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">AbstractBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> builder.getBeanDefinition();</span><br><span class="line">                <span class="comment">//注册Bean到容器中</span></span><br><span class="line">                <span class="keyword">if</span> (configurableListableBeanFactory </span><br><span class="line">                        <span class="keyword">instanceof</span> DefaultListableBeanFactory beanFactory) &#123;</span><br><span class="line">                    beanFactory.registerBeanDefinition(method.getMethodName(),bd);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>当其他类调用时，只需调用容器的registerBean方法，传入对实现类.class文件即可</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanApp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(BeanApp.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个干净容器</span></span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>, Config.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析@Bean</span></span><br><span class="line">        context.registerBean(AtBeanPostProcessor.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化容器</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//销毁容器</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring高级</category>
      </categories>
      <tags>
        <tag>底层源码</tag>
        <tag>spring高级</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟解析Mapper接口</title>
    <url>/2022/08/09/%E6%A8%A1%E6%8B%9F%E8%A7%A3%E6%9E%90Mapper%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p><a href="https://www.hzzzzzy.icu/2022/08/09/%E5%AE%B9%E5%99%A8%E4%B8%8EBean/#%E6%A8%A1%E6%8B%9F%E8%A7%A3%E6%9E%90Mapper%E6%8E%A5%E5%8F%A3">点此返回</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperPostProcessor</span>  <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span></span><br><span class="line">            <span class="params">(BeanDefinitionRegistry beanFactory)</span> </span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//扫描 mapper 包下的资源（使用通配符解析器）</span></span><br><span class="line">            <span class="type">PathMatchingResourcePatternResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>();</span><br><span class="line">            Resource[] resources = resolver</span><br><span class="line">                    .getResources(<span class="string">&quot;classpath:com/itheima/a05/mapper/**/*.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建名称生成器对象</span></span><br><span class="line">            <span class="type">AnnotationBeanNameGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationBeanNameGenerator</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取类的元数据信息</span></span><br><span class="line">            <span class="type">CachingMetadataReaderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachingMetadataReaderFactory</span>();</span><br><span class="line">            <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">                <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> factory.getMetadataReader(resource);</span><br><span class="line">                <span class="type">ClassMetadata</span> <span class="variable">classMetadata</span> <span class="operator">=</span> reader.getClassMetadata();</span><br><span class="line">                <span class="comment">//判断是否是接口</span></span><br><span class="line">                <span class="keyword">if</span> (classMetadata.isInterface()) &#123;</span><br><span class="line">                    <span class="comment">//生成 BeanDefinition</span></span><br><span class="line">                    <span class="type">AbstractBeanDefinition</span> <span class="variable">bd1</span> <span class="operator">=</span> </span><br><span class="line">                            BeanDefinitionBuilder</span><br><span class="line">                                    .genericBeanDefinition(MapperFactoryBean.class)</span><br><span class="line">                                    <span class="comment">//给构造方法设置参数值（接口名称）</span></span><br><span class="line">                                    .addConstructorArgValue(classMetadata.getClassName())</span><br><span class="line">                                    <span class="comment">//设置装配模式</span></span><br><span class="line">                                    .setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE)   </span><br><span class="line">                                    .getBeanDefinition();</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//再生成一个 BeanDefinition</span></span><br><span class="line">                    <span class="type">AbstractBeanDefinition</span> <span class="variable">bd2</span> <span class="operator">=</span> </span><br><span class="line">                                    BeanDefinitionBuilder</span><br><span class="line">                                    .genericBeanDefinition(classMetadata.getClassName())</span><br><span class="line">                                    .getBeanDefinition();</span><br><span class="line">                    <span class="comment">//根据bd2生成名称，以免覆盖bd1生成的名称</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generator.generateBeanName(bd2, beanFactory);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//注册到Bean工厂</span></span><br><span class="line">                    beanFactory.registerBeanDefinition(beanName,bd1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span></span><br><span class="line">            <span class="params">(ConfigurableListableBeanFactory beanFactory)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>当其他类调用时，只需调用容器的registerBean方法，传入对实现类.class文件即可</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanApp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(BeanApp.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个干净容器</span></span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>, Config.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析Mapper接口</span></span><br><span class="line">        context.registerBean(MapperPostProcessor.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化容器</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//销毁容器</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring高级</category>
      </categories>
      <tags>
        <tag>底层源码</tag>
        <tag>spring高级</tag>
      </tags>
  </entry>
  <entry>
    <title>集合专题</title>
    <url>/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p><strong>ArrayList无参构造的初始容量为0</strong></p>
<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/1.png" style="zoom:70%;">

<p><strong>ArrayList有参构造的初始容量根据所给的长度进行创建（如果是集合，就根据集合的大小进行创建）</strong></p>
<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/2.png" style="zoom:90%;">

<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/3.png" style="zoom:90%;">

<br>

<h2 id="调用add方法触发扩容"><a href="#调用add方法触发扩容" class="headerlink" title="调用add方法触发扩容"></a>调用add方法触发扩容</h2><p>当往ArrayList添加元素的时候。触发第一次扩容，创建一个长度为10的新数组，然后将元素添加进新数组里面，再用新的数组替换掉旧的空数组。</p>
<p>当数组内元素为10时，进行第二次扩容，扩容为第一次容量的1.5倍，即15（以后每一次扩容都是上一次的1.5倍）</p>
<p><strong style="color:red">注意：此处的1.5倍其实是上一次容量右移一位，再加上它本身，如第三次扩容：15右移一位是7，7+15为22</strong></p>
<br>

<h2 id="调用addAll方法触发扩容"><a href="#调用addAll方法触发扩容" class="headerlink" title="调用addAll方法触发扩容"></a>调用addAll方法触发扩容</h2><p>在下一次扩容的容量跟实际的元素个数之间选择一个较大值</p>
<p>如：添加元素个数为16个，那么数组容量将会扩容到22</p>
<p>0	10	15	22	33	49	73	109</p>
<br>

<h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><h2 id="Fail-Fast策略"><a href="#Fail-Fast策略" class="headerlink" title="Fail-Fast策略"></a>Fail-Fast策略</h2><p><strong style="color:red">在通过迭代器遍历的同时如果有人对集合进行修改，那么就抛出异常</strong></p>
<p><strong>ArrayList的迭代器采用了Fail-Fast策略</strong></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a><strong style="color:red">源码分析</strong></h3><p><strong style="color:green">增强for循环在首次调用内部会生成一个迭代器，在执行过程中，expectedModCount作为迭代器的成员变量，记录了迭代器刚开始迭代时的修改次数。modCount作为list的成员变量，记录list修改次数，该数会记录在expectedModCount里</strong></p>
<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/4.png" style="zoom:90%;">

<p><strong style="color:green">接下来调用hasNext方法和next方法，调用next方法之前会进行一次校验（checkForComodification方法）</strong></p>
<p><strong style="color:green">当在迭代的过程中，对集合进行了修改，此时expectedModCount的值就会变换，导致二者不等，那么就会直接抛出异常</strong></p>
<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/5.png" style="zoom:90%;">

<br>

<h2 id="Fail-Save策略"><a href="#Fail-Save策略" class="headerlink" title="Fail-Save策略"></a>Fail-Save策略</h2><p><strong style="color:red">在通过迭代器遍历的同时如果有人对集合进行修改，可以采取应对策略而不是抛出异常，如牺牲一致性来让整个遍历正常完成</strong></p>
<p><strong>CopyOnWriteArrayList采用了Fail-Save策略</strong></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a><strong style="color:red">源码分析</strong></h3><p><strong style="color:green">在迭代器内部会首先创建一个数组，将要遍历的数组复制过去，然后遍历该数组</strong></p>
<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/6.png" style="zoom:90%;">

<p><strong style="color:green">当我们在迭代的过程中调用add方法添加新元素的时候，实际上在add方法的内部是先将原来的数组复制一份，然后让长度加一，而新添加的元素加到了新的数组的最后一位，所以遍历的时候使用的是旧数组，而添加元素的时候使用的是新数组，二者互不干扰</strong></p>
<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/7.png" style="zoom:90%;">

<br>

<h1 id="LinkedList与ArrayList的比较"><a href="#LinkedList与ArrayList的比较" class="headerlink" title="LinkedList与ArrayList的比较"></a>LinkedList与ArrayList的比较</h1><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><strong>LinkedList</strong></h2><p><strong style="color:red">基于双向链表，无需连续内存</strong></p>
<p><strong style="color:red">随机访问慢（要沿着链表遍历）</strong></p>
<p><strong style="color:red">头尾插入删除性能高</strong></p>
<p>占用内存多</p>
<h2 id="ArrayList-1"><a href="#ArrayList-1" class="headerlink" title="ArrayList"></a><strong>ArrayList</strong></h2><p><strong style="color:red">基于数组，需要连续内存</strong></p>
<p><strong style="color:red">随机访问快（指根据下标访问）</strong></p>
<p><strong style="color:red">尾部插入、删除性能可以，其它部分插入、删除都会移动数据，因此性能会低</strong></p>
<p>可以利用 cpu 缓存，局部性原理</p>
<br>

<h2 id="随机访问速度"><a href="#随机访问速度" class="headerlink" title="随机访问速度"></a>随机访问速度</h2><img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/8.png" style="zoom:70%;">

<p><strong style="color:red">ArrayList内部实现了RandomAccess接口（LinkedList没有），该接口是一个标识接口，如果实现了该接口，那么当获取其中某个元素时就直接根据下标get就行。如果没有实现该接口，那么只能通过迭代器的next方法获取下一个元素</strong></p>
<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/9.png" style="zoom:80%;">

<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/10.png" style="zoom:90%;">

<br>

<h2 id="增删速度"><a href="#增删速度" class="headerlink" title="增删速度"></a>增删速度</h2><p><strong style="color:red">LinkedList：头尾插入删除性能高</strong></p>
<p><strong style="color:red">ArrayList：尾部插入、删除性能可以，其它部分插入、删除都会移动数据，因此性能会低</strong></p>
<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/11.png" style="zoom:60%;">

<br>

<h2 id="局部性"><a href="#局部性" class="headerlink" title="局部性"></a><strong style="color:red">局部性</strong></h2><p><strong>cpu读取数据是按照缓存行读取到缓存的，就是cpu会把需要的数据加载到缓存中，查找数据时，会先从缓存找，找不到再到内存中去找。</strong></p>
<p><strong>数组作为连续内存，而cpu缓存会把一片连续的内存空间读入，这样连续内存的数组更容易整块读取到缓存中，当进行遍历时，直接命中缓存。</strong></p>
<p><strong>链表是跳跃式的地址，很轻易就会跳出缓存，跑到内存中去查找数据。所以会慢很多</strong></p>
<br>

<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p>1.7	数组+链表</p>
<p>1.8	数组+（链表&#x2F;红黑树）</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在实例化之后，底层创建了一个长度是16的一维数组Entry[] table，在进行put操作时，先获得key的hashCode，通过hash()散列算法得到hash值，进而定位到数组的位置</p>
<p>如果该位置上为空，此时添加成功</p>
<p>如果该位置上不为空，意味着此位置上存在一个或多个数据（以链表的形式存在），此时比较该元素与其他元素的hash值（调用equals方法），当返回false时添加成功，返回true时使用新的value替换掉旧的value</p>
<br>

<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>capacity 容量，默认16。</p>
<p>loadFactor 加载因子，默认是0.75</p>
<p>threshold 阈值。阈值&#x3D;容量*加载因子。默认12。当元素数量超过阈值时便会触发扩容。</p>
<br>

<h2 id="二次哈希的意义"><a href="#二次哈希的意义" class="headerlink" title="二次哈希的意义"></a>二次哈希的意义</h2><p>下面是HashMap根据二次Hash计算出的哈希码，计算键值对下标的代码，<code>length</code>是底层数组的长度。HashMap采用了位运算，而非常见的取模运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当不进行二次hash的时候，假设数组长度为16，当哈希码为5时，下标Index结果是5\</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"> 00000000000000000000000000000101</span><br><span class="line">&amp;00000000000000000000000000001111</span><br><span class="line">=00000000000000000000000000000101</span><br><span class="line">=5</span><br></pre></td></tr></table></figure>

<p>当哈希码为65541时，下标Index结果依然是5，不同的哈希码算出相同的下标，出现了哈希碰撞</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"> 00000000000000010000000000000101</span><br><span class="line">&amp;00000000000000000000000000001111</span><br><span class="line">=00000000000000000000000000001101</span><br><span class="line">=5</span><br></pre></td></tr></table></figure>

<p>通过例子可以发现哈希码的高位压根就没有参与运算，全部被丢弃了。</p>
<p>不管哈希码的高位是多少，都不会影响最终Index的计算结果，因为只有低位才参与了运算，这样的哈希函数是不好的，它会带来更多的冲突，影响HashMap的效率。</p>
<p>HashMap为了解决这个问题，将哈希码的高16位与低16位进行异或运算，得到一个新的哈希码，这样就可以让高位也参与到运算，这个函数也被称为扰动函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：HashMap通过二次哈希，引入扰动函数，拿高16位和低16位做异或运算，把高位的特征和地位的特征组合起来，以此来降低哈希碰撞的概率</p>
<p>注意：二次 hash 是为了配合 <em>容量是 2 的 n 次幂</em> 这一设计前提，如果 hash 表的容量不是 2 的 n 次幂，则不必二次 hash，<em>容量是 2 的 n 次幂</em> 这一设计计算索引效率更好，但 hash 的分散性就不好，需要二次 hash 来作为补偿，没有采用这一设计的典型例子是 Hashtable</p>
<br>

<h2 id="数组容量为何是2的n次幂"><a href="#数组容量为何是2的n次幂" class="headerlink" title="数组容量为何是2的n次幂"></a>数组容量为何是2的n次幂</h2><p>1、当数组容量是2的n次幂时，计算索引时可以用按位与运算代替求模运算，提高运算性能</p>
<p>2、扩容时使用<code>hash &amp; oldCap == 0</code>的元素留在原来位置，否则<code>新位置 = 旧位置 + oldCap</code></p>
<p>3、可以尽量避免hash冲突的发生。</p>
<p>从HashMap的源码中可以看到HashMap在扩容时选择了位运算，向集合中添加元素时，会使用(n - 1) &amp; hash的计算方法来得出该元素在集合中的位置。</p>
<p>hash表初始数组长度是16进行一次扩容数组长度就会变成32，他们的二进制分别是10000和100000。</p>
<p>(n-1)&amp;hash中n就是hash表原来的长度，n-1就会使二进制发生如下的变化：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">16	10000 	-&gt; 	15	01111</span><br><span class="line">32	100000 	-&gt; 	31	011111</span><br></pre></td></tr></table></figure>

<p>(n-1)&amp;hash，接下来就会与被插入的对象hash进行按位与运算，看下面几个例子：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">01111 &amp; 01001 = 01001</span><br><span class="line">01111 &amp; 01101 = 01101</span><br></pre></td></tr></table></figure>

<p>如果数组扩容不是按2的n次幂来运算，那么就会有hash冲突的情况出现。比如数组长度16进行一次扩容以后变成了25（二进制11001），与带插入新元素进行&amp;运算时就会出现hash冲突，如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">11001 &amp; 10111 = 10001</span><br><span class="line">11001 &amp; 10011 = 10001</span><br></pre></td></tr></table></figure>

<img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/12.png" style="zoom:70%;">

<br>

<h2 id="树化与退化"><a href="#树化与退化" class="headerlink" title="树化与退化"></a>树化与退化</h2><h3 id="树化规则"><a href="#树化规则" class="headerlink" title="树化规则"></a><strong>树化规则</strong></h3><p>当链表长度超过树化阈值 8 时，先尝试扩容来减少链表长度，如果数组容量已经 &gt;&#x3D;64，才会进行树化</p>
<h3 id="树化意义"><a href="#树化意义" class="headerlink" title="树化意义"></a><strong>树化意义</strong></h3><p>红黑树用来避免 DoS 攻击，防止链表超长时性能下降，树化应当是偶然情况，是保底策略</p>
<p>hash 表的查找，更新的时间复杂度是 *O(1)*，而红黑树的查找，更新的时间复杂度是 *O(log_2⁡n )*，TreeNode 占用空间也比普通 Node 的大，如非必要，尽量还是使用链表</p>
<p>hash 值如果足够随机，则在 hash 表内按泊松分布，在负载因子 0.75 的情况下，长度超过 8 的链表出现概率是 0.00000006，树化阈值选择 8 就是为了让树化几率足够小</p>
<h3 id="退化规则"><a href="#退化规则" class="headerlink" title="退化规则"></a><strong>退化规则</strong></h3><p>情况1：在扩容时如果拆分树时，树元素个数 &lt;&#x3D; 6 则会退化链表</p>
<p>情况2：remove 树节点时，若 root、root.left、root.right、root.left.left 有一个为 null ，也会退化为链表（在移除之前进行检查）</p>
<p><img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/13.png" style="zoom:60%;"><img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/14.png" style="zoom:70%;"><img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/15.png" style="zoom:70%;"><img src="/2022/08/21/%E9%9B%86%E5%90%88%E4%B8%93%E9%A2%98/16.png" style="zoom:70%;"></p>
<br>

<h2 id="put方法流程总结"><a href="#put方法流程总结" class="headerlink" title="put方法流程总结"></a>put方法流程总结</h2><p>HashMap 是懒惰创建数组的，首次使用才创建数组</p>
<p>计算索引（桶下标）</p>
<p>如果桶下标还没人占用，创建 Node 占位返回</p>
<p>如果桶下标已经有人占用 </p>
<p>​	已经是 TreeNode 走红黑树的添加或更新逻辑</p>
<p>​	是普通 Node，走链表的添加或更新逻辑，如果链表长度超过树化阈值，走树化逻辑</p>
<p>返回前检查容量是否超过阈值，一旦超过进行扩容</p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
